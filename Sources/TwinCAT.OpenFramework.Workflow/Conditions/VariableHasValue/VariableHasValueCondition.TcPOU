<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="VariableHasValueCondition" Id="{30d35608-a928-454b-b4e1-546e7091b14c}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK VariableHasValueCondition EXTENDS Condition IMPLEMENTS IVariableHasValueCondition
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}
	_MonitoredVariableName : STRING;

	{attribute 'OPC.UA.DA' := '0'}
	_Predicate : Comparision.IdenticalDataPredicate;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Internal methods" Id="{49e947e5-a970-42b5-94f3-6c9b90e734da}" />
    <Folder Name="Overriden members" Id="{d7c51a79-76d5-4e54-8ba0-beccf5464437}" />
    <Property Name="ClassName" Id="{b7bad684-4c7d-44fa-b9f3-59356c9c0af6}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{2a12b19e-b4b4-4d1f-994c-3462d69f02b9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Configure" Id="{beea4cf4-f4df-4bfa-87eb-0a7431cad617}">
      <Declaration><![CDATA[METHOD Configure
VAR_INPUT
	monitoredVariableName : STRING;
	referenceValue : ANY; 
END_VAR
VAR
	variableNameEmptyException : Core.ArgumentOutOfRangeException;
	referenceValueNullException : Core.ArgumentNullException; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF monitoredVariableName = '' THEN
	variableNameEmptyException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'monitoredVariableName', monitoredVariableName);
END_IF

IF referenceValue.pValue = 0 OR_ELSE referenceValue.diSize = 0 THEN
	referenceValueNullException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'referenceValue');
END_IF

InternalConfigure(monitoredVariableName, referenceValue);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Configured" Id="{d3138cc2-4f83-42fd-a975-721b3efc8f84}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Configured : BOOL]]></Declaration>
      <Get Name="Get" Id="{0840293a-29eb-4900-b343-b40209a68d29}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Configured := _MonitoredVariableName <> '' AND_THEN NOT Core.GenericValueHelper.CheckIsNull(_Predicate.ReferenceValue);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="InternalConfigure" Id="{0fc36eec-48f7-4ec9-ab94-4c8afdbe1add}" FolderPath="Internal methods\">
      <Declaration><![CDATA[METHOD INTERNAL InternalConfigure
VAR_INPUT
	monitoredWorkflowVariableName : STRING;
	referenceValue : __SYSTEM.AnyType; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_MonitoredVariableName := monitoredWorkflowVariableName;
_Predicate.SetReferenceValueByAnyType(referenceValue);]]></ST>
      </Implementation>
    </Method>
    <Property Name="MonitoredVariableName" Id="{7e4166f8-1c74-494f-b340-b1e526abbf0a}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY MonitoredVariableName : STRING]]></Declaration>
      <Get Name="Get" Id="{1eb33d4c-ec62-4599-b5f6-fa72662f6551}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[MonitoredVariableName := _MonitoredVariableName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnEvalute" Id="{8440fe50-06b4-43d8-bb22-4354c386b514}" FolderPath="Overriden members\">
      <Declaration><![CDATA[METHOD PROTECTED OnEvalute : BOOL
VAR_INPUT
	activity : IActivity;
END_VAR
VAR
	conditionNotConfiguredException : Core.StandardException;
	variableNotFoundException : Core.StandardException;

	variable : Core.GENERIC_VALUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Configured THEN
	conditionNotConfiguredException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Condition '", Name, "' is not configured"));
END_IF

IF NOT _Workflow.TryGetVariable(_MonitoredVariableName, variable => variable) THEN
	variableNotFoundException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Condition '", Name, "' requirs variable '", TO_WSTRING(_MonitoredVariableName), "' which is not found"));
END_IF

OnEvalute := _Predicate.Check(variable.AsAnyType());]]></ST>
      </Implementation>
    </Method>
    <Property Name="ReferenceValue" Id="{f2dea975-210b-4d62-87af-bcb2e4255b55}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ReferenceValue : REFERENCE TO Core.GENERIC_VALUE]]></Declaration>
      <Get Name="Get" Id="{2820c5a1-237c-4f4e-8eb7-440359a3c141}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReferenceValue REF= _Predicate.ReferenceValue;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Size" Id="{55fdfcaa-f84a-4e5f-9254-77c594301c7d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{fbc6c56a-2a60-4acb-9dc2-0c0cf6bc25f2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>