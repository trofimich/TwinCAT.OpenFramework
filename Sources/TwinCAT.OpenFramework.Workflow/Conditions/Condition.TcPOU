<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Condition" Id="{5ba1e305-1521-4876-bdb5-1f2abfdf8601}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ABSTRACT Condition EXTENDS Core.Object IMPLEMENTS ICondition
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_Name : WSTRING;

	{attribute 'OPC.UA.DA' := '0'}
	_Workflow : IWorkflow;

	{attribute 'OPC.UA.DA' := '0'}
	_Activity : IActivity;
	
	{attribute 'OPC.UA.DA' := '0'}
	_Parent : ICondition;

	{attribute 'OPC.UA.DA' := '0'}
	_Variables : Collections.Dictionary(0, 0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods to override" Id="{5ed654de-488c-41a3-9dd6-d31befe37354}" />
    <Property Name="Configured" Id="{167f4971-9594-4ce6-95be-09c7e6a87131}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ABSTRACT Configured : BOOL]]></Declaration>
      <Get Name="Get" Id="{d14f9b9f-000e-4358-a872-00cc7a327f4d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Evaluate" Id="{79c4792c-02ed-4587-8f2d-2a9ccd61ae06}">
      <Declaration><![CDATA[METHOD FINAL Evaluate : BOOL
VAR_INPUT
	activity : IActivity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF OnEvalute(activity) THEN
	Evaluate := TRUE;
	
	LogManager.TryLogMessage(WideStringHelper.ConcatStrings255("Condition '", Name, "' evaluated as TRUE at ", TO_WSTRING(SystemDateTimeManager.SystemLocalDateTime)), LOG_CATEGORY.SUCCESS, TO_WSTRING(ClassName), "Condition", "ConditionEvaluate");
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{4bec2862-106d-4344-bbd9-4598c29c12e2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
	workflow : IWorkflow;
	activity : IActivity;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Workflow := workflow;
_Activity := activity;

IF _Workflow <> 0 THEN
	_Workflow.RegisterChild(THIS^);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{71961bbf-f4ff-4ba9-a45a-cd1279b7b5ac}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL Name : WSTRING
]]></Declaration>
      <Get Name="Get" Id="{f1799a45-8028-470b-acc1-25f2f24a0e72}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := SEL(_Name = "", _Name, TO_WSTRING(ClassName));]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{df79a823-5566-422a-bdb9-d7bb776fc316}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Name := Name;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnEvalute" Id="{679374e5-c40e-49a4-b386-c18b7d32a90f}" FolderPath="Methods to override\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnEvalute : BOOL
VAR_INPUT
	activity : IActivity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Parent" Id="{40367a00-bd78-4469-98b1-577fa9c041fd}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Parent : ICondition]]></Declaration>
      <Get Name="Get" Id="{0f9d4991-246e-4d36-9ce8-fbe0351b39ca}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Parent := _Parent;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{978ca590-cf93-4e11-9c04-01e9c256740b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Parent := Parent;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TryGetVariable" Id="{54c0b438-a23e-4e9d-a1fa-12698a06e3ed}">
      <Declaration><![CDATA[METHOD TryGetVariable : BOOL
VAR_INPUT
	name : STRING;
END_VAR
VAR_OUTPUT
	variable : Core.GENERIC_VALUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetVariable := _Variables.TryGetValueByKey(name, value => variable);

IF NOT TryGetVariable AND_THEN _Parent <> 0 THEN
	TryGetVariable := _Parent.TryGetVariable(name, variable => variable);
END_IF

IF NOT TryGetVariable AND_THEN _Activity <> 0 THEN
	TryGetVariable := _Activity.TryGetVariable(name, variable => variable);
END_IF

IF NOT TryGetVariable AND_THEN _Workflow <> 0 THEN
	TryGetVariable := _Workflow.TryGetVariable(name, variable => variable);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>