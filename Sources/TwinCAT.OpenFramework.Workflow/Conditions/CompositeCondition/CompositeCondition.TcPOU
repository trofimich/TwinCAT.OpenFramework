<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="CompositeCondition" Id="{8a55c5b1-693f-4932-9f9a-010c3c539516}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK CompositeCondition EXTENDS Condition IMPLEMENTS ICompositeCondition
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}
	_LogicalOperator : LOGICAL_OPERATOR;

	{attribute 'OPC.UA.DA' := '0'}
	_Children : Collections.List(0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Overriden members" Id="{92167edf-a171-45ae-b0b4-cbb4363d35a0}" />
    <Method Name="AddChildCondition" Id="{a9ba8ac8-dab1-4579-a8c6-f1dcf4f0781e}">
      <Declaration><![CDATA[METHOD AddChildCondition
VAR_INPUT
	condition : ICondition;
END_VAR
VAR
	argumentNullExcxeption : Core.ArgumentNullException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF condition = 0  THEN
	argumentNullExcxeption.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'condition');
END_IF

condition.Parent := THIS^;

_Children.AppendGeneric(Core.GenericValueFactory.FromParts(GENERIC_TYPE_CLASS.TYPE_OBJECT, condition.Address, condition.Size, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.STORE_ORIGINAL_REFERENCE_AND_NOT_OWNS_MEMORY));]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{70333ea1-3549-4d0a-a3ad-521d1db0db74}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{a5ccd782-e1de-457e-9e73-065fb67a7a80}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Configured" Id="{21dacc3f-ed62-4ab7-8da9-cb67ea9bfcba}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Configured : BOOL]]></Declaration>
      <Get Name="Get" Id="{ea5c9fa4-9f95-445e-834b-d8986cf079b5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Configured := _Children.Count > 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LogicalOperator" Id="{2e60dc3a-8843-4578-a90f-416536b1cdcb}">
      <Declaration><![CDATA[PROPERTY LogicalOperator : LOGICAL_OPERATOR]]></Declaration>
      <Get Name="Get" Id="{24be606b-b29e-4d7a-9059-3d33397fc9bc}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[LogicalOperator := _LogicalOperator;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{91bb16fb-1705-4e7d-aeac-ee32b7347b30}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_LogicalOperator := LogicalOperator;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnEvalute" Id="{65421d01-d63f-414e-ae6f-3caad321436b}" FolderPath="Overriden members\">
      <Declaration><![CDATA[METHOD PROTECTED OnEvalute : BOOL
VAR_INPUT
	activity : IActivity;
END_VAR
VAR
	conditionException : Core.StandardException;

	i : DINT;
	
	childCondition : ICondition;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Configured THEN
	conditionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Condition '", Name, "' is not configured"));
END_IF

IF _LogicalOperator = LOGICAL_OPERATOR.AND_ THEN
	OnEvalute := TRUE;	
END_IF
 
FOR i := 0 TO _Children.Count - 1 DO
	IF NOT __QUERYINTERFACE(_Children.Get(i).AsObject(), childCondition) THEN
		conditionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Condition #", TO_WSTRING(i), " is null"));
	END_IF
	
	IF NOT childCondition.Configured THEN
		conditionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Condition '", childCondition.Name, "' is not configured"));
	END_IF

	IF childCondition.Evaluate(activity) THEN
		IF _LogicalOperator = LOGICAL_OPERATOR.OR_ THEN
			OnEvalute := TRUE;	
			RETURN;
		END_IF
	ELSE
		IF _LogicalOperator = LOGICAL_OPERATOR.AND_ THEN
			OnEvalute := FALSE;	
			RETURN;
		END_IF
	END_IF	 
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{0c774fc8-e3e1-46bd-bc7e-7d6910760a9c}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{02bdd4c2-e6e9-4e38-a963-e1672ee8a20b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>