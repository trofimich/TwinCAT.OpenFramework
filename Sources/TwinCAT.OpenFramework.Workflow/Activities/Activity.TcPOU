<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Activity" Id="{ab48bd8b-e561-4a48-ba30-d8d6aa6a3a44}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ABSTRACT Activity EXTENDS Core.AbortableTask IMPLEMENTS IActivity
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_Name : WSTRING;

	{attribute 'OPC.UA.DA' := '0'}
	_Workflow : IWorkflow;
	
	{attribute 'OPC.UA.DA' := '0'}
	_Parent : IActivity;

	{attribute 'OPC.UA.DA' := '0'}
	_Variables : Collections.Dictionary;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{ffd89157-0584-4da6-8b2f-193481b5613d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
	workflow : IWorkflow;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Workflow := workflow;

IF _Workflow <> 0 THEN
	_Workflow.RegisterChild(THIS^);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{6f9801a4-5977-4def-a91d-0e8a2adf8486}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY Name : WSTRING
]]></Declaration>
      <Get Name="Get" Id="{f46d6ffa-61a5-4dc1-af31-5e5917bbe297}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := SEL(_Name = "", _Name, TO_WSTRING(ClassName));]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fc99bfa7-024d-4538-9fd8-9276dd17dca6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Name := Name;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Parent" Id="{7746eee7-81b2-4cc8-b04b-86aaff99c3e3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Parent : IActivity]]></Declaration>
      <Get Name="Get" Id="{c910d929-401b-4d62-9e02-b489beb98812}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Parent := _Parent;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{45312744-e8d0-4156-ae50-a2d68cc6dcc8}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Parent := Parent;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TryGetVariable" Id="{7404742e-521b-4644-b536-622820cce67b}">
      <Declaration><![CDATA[METHOD TryGetVariable : BOOL
VAR_INPUT
	name : STRING;
END_VAR
VAR_OUTPUT
	variable : Core.GENERIC_VALUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetVariable := _Variables.TryGetValueByKey(name, value => variable);

IF NOT TryGetVariable AND_THEN _Parent <> 0 THEN
	TryGetVariable := _Parent.TryGetVariable(name, variable => variable);
END_IF

IF NOT TryGetVariable AND_THEN _Workflow <> 0 THEN
	TryGetVariable := _Workflow.TryGetVariable(name, variable => variable);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Workflow" Id="{5b9f0838-cfd8-4e68-96b0-62c7d023998f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Workflow : IWorkflow]]></Declaration>
      <Get Name="Get" Id="{82ce28f2-8424-4b0f-9ba1-3ba80b3f14e7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Workflow := _Workflow;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>