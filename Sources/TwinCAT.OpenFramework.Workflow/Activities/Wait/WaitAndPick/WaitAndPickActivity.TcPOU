<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="WaitAndPickActivity" Id="{7ca74e30-2f2f-411e-8b84-b64b51b6f7a0}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK WaitAndPickActivity EXTENDS Activity IMPLEMENTS IWaitAndPickActivity
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}
	_BranchConditions : List(0);

	{attribute 'OPC.UA.DA' := '0'}
	_BranchActivities : List(0);
	
	{attribute 'OPC.UA.DA' := '0'}	
	_CurrentBranchIndex : DINT := -1;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Overriden" Id="{a3581e76-f514-4d4c-96cc-6129adf8be06}" />
    <Folder Name="Service members" Id="{c6e27584-45c1-42b9-878f-b5efd85fa30e}" />
    <Method Name="AddBarnch" Id="{999a20dd-8826-4f9a-be23-0577cd48c35e}">
      <Declaration><![CDATA[METHOD AddBarnch : DINT
VAR_INPUT
	condition : ICondition;
	activity : IActivity;
END_VAR
VAR
	conditionNullExcxeption : Core.ArgumentNullException;
	activityNullExcxeption : Core.ArgumentNullException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF condition = 0  THEN
	activityNullExcxeption.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'condition');
END_IF

IF activity = 0  THEN
	activityNullExcxeption.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'activity');
END_IF

activity.Parent := THIS^;

_BranchConditions.AppendGeneric(Core.GenericValueFactory.FromParts(GENERIC_TYPE_CLASS.TYPE_OBJECT, condition.Address, condition.Size, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.STORE_ORIGINAL_REFERENCE_AND_NOT_OWNS_MEMORY));

_BranchActivities.AppendGeneric(Core.GenericValueFactory.FromParts(GENERIC_TYPE_CLASS.TYPE_OBJECT, activity.Address, activity.Size, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.STORE_ORIGINAL_REFERENCE_AND_NOT_OWNS_MEMORY), index => AddBarnch);]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{18f84891-69f8-4374-ada0-1c89a09977b8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{d24bd772-b2db-4dfb-b100-81327452d590}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentActivity" Id="{c10ca17a-8f62-4d6e-9cd6-ea23bb803aea}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL CurrentActivity : IActivity]]></Declaration>
      <Get Name="Get" Id="{f4fba724-2cd2-4997-a825-074a04b4e335}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _BranchActivities.Count > 0 AND_THEN _CurrentBranchIndex >= 0 AND_THEN _CurrentBranchIndex < _BranchActivities.Count THEN
	__QUERYINTERFACE(_BranchActivities.Get(_CurrentBranchIndex).AsObject(), CurrentActivity);
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentBranchIndex" Id="{98df383e-dd91-4fe0-859f-b33a1f5a8541}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL CurrentBranchIndex : DINT]]></Declaration>
      <Get Name="Get" Id="{92c83ccc-4313-4b8e-8d0b-c8ecb982fc67}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentBranchIndex := _CurrentBranchIndex;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NamespaceName" Id="{d8f87ccd-1e4b-45ce-990b-a1d11e9fc9f2}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{f2e21a33-a15e-4fa6-98d5-283175ae904d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAborting" Id="{2653f339-5a4a-42ab-ad80-c36301e37eac}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnAborting 
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
VAR
	activity : IActivity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _BranchConditions.Count < 1 THEN
	done := TRUE;
	RETURN;
END_IF

activity := CurrentActivity;

IF activity = 0 OR_ELSE NOT activity.Busy THEN
	done := TRUE;
	RETURN;
END_IF

IF start THEN
	activity.StartAbort();
ELSE
	activity.Execute();
END_IF

done := NOT activity.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRunning" Id="{ac56bd84-913a-48ac-9e5d-6489f1be5179}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnRunning 
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
VAR
	activity : IActivity;
	
	currentActivityNullException : Core.NullReferenceException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _BranchConditions.Count < 1 THEN
	done := TRUE;
	RETURN;
END_IF

IF start THEN
	_CurrentBranchIndex := -1;
END_IF

IF _CurrentBranchIndex < 0 THEN
	_CurrentBranchIndex := tryPickBranch();
END_IF

IF _CurrentBranchIndex < 0 THEN
	RETURN;
END_IF

activity := CurrentActivity;

IF activity = 0 THEN
	currentActivityNullException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'CurrentActivity');
END_IF

IF start OR_ELSE NOT activity.Busy THEN
	activity.Start();
ELSE
	activity.Execute();
END_IF

done := NOT activity.Busy;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{93fd3a2d-9370-4f71-9dd2-0f8d12b5e4fd}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{b25229a2-01b1-484a-a7f8-cc9431df722a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="tryPickBranch" Id="{7b572117-fec2-496a-8d60-5ff2bbfc4630}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE tryPickBranch : DINT
VAR
	i : DINT;
	condition : ICondition;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tryPickBranch := -1;

FOR i := 0 TO _BranchConditions.Count - 1 DO
	__QUERYINTERFACE(_BranchConditions.Get(i).AsObject(), condition);
	
	IF condition.Evaluate(THIS^) THEN
		tryPickBranch := i;
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>