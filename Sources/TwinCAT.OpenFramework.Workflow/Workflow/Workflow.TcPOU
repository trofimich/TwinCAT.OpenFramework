<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Workflow" Id="{276b6eec-c9aa-49be-b713-e71500f934ba}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ABSTRACT Workflow 
VAR_GENERIC CONSTANT
    VariableCount : INT(0..10000) := 0;
END_VAR
EXTENDS Core.AbortableTask IMPLEMENTS IWorkflow
VAR
	_Initialized : BOOL;
	
	_Name : WSTRING;
	
	_Variables : Collections.Dictionary;
	
	_RootActivityReference : ACTIVITY_REFERENCE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service memebrs" Id="{ffeeb1bb-f103-4831-b028-ff9633b28215}" />
    <Method Name="CreateWorkflowVariables" Id="{77b0e16c-37a3-4b71-b6b3-d4ba31e98e52}" FolderPath="Service memebrs\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT CreateWorkflowVariables : ARRAY [0..VariableCount - 1] OF WORKFLOW_VARIABLE_DESCRIPTOR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{65ee405b-8b1e-4ae7-9974-225ad26df18e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL Name : WSTRING
]]></Declaration>
      <Get Name="Get" Id="{b7e931d0-7b7d-4f6b-8da6-49a3bdb4acdd}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := SEL(_Name = "", Name := TO_WSTRING(ClassName), _Name);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3b381740-d9a9-41ca-8ac6-f3d83f6a3463}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Name := Name;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnAborting" Id="{6bd3b55b-678a-4eda-a303-ace07e392d29}" FolderPath="Service memebrs\">
      <Declaration><![CDATA[METHOD PROTECTED OnAborting
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF RootActivity = 0 THEN
	done := TRUE;
	RETURN;
END_IF

IF start THEN
	RootActivity.StartAbort();
ELSE
	RootActivity.Execute();
END_IF

IF NOT RootActivity.Busy THEN
	done := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRunning" Id="{d6befcb3-c72e-4377-b591-92320c859943}" FolderPath="Service memebrs\">
      <Declaration><![CDATA[METHOD PROTECTED OnRunning
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF RootActivity = 0 THEN
	done := TRUE;
	RETURN;
END_IF

IF start THEN
	RootActivity.Start();
ELSE
	RootActivity.Execute();
END_IF

IF NOT RootActivity.Busy THEN
	done := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="RootActivity" Id="{142ff0bb-9cbe-49d5-8b58-eabad1dc6713}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL RootActivity : IActivity]]></Declaration>
      <Get Name="Get" Id="{bda62c52-93af-4541-b8a0-25e42cace2f2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[RootActivity := _RootActivityReference.Activity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetRootActivity" Id="{c98e2b1c-fc8c-4d20-ba30-5596dcd42dcd}">
      <Declaration><![CDATA[METHOD FINAL SetRootActivity
VAR_INPUT
	rootActivity : IActivity;
	deleteOnParentDelete : BOOL;
END_VAR
VAR
	workflowBusyException : Core.StandardException; 

	workflowVariablException : Core.StandardException;

	workflowVariables : ARRAY [0..VariableCount - 1] OF WORKFLOW_VARIABLE_DESCRIPTOR;
	
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _RootActivityReference.Activity = rootActivity THEN
	RETURN;
END_IF

IF Busy THEN
	workflowBusyException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Unable to change root activity for workflow '", Name, "': workflow is busy"));
END_IF

IF NOT _Initialized THEN
	workflowVariables := CreateWorkflowVariables();
	
	FOR i := 0 TO VariableCount - 1 DO
		IF workflowVariables[i].WorkflowVariableName = '' THEN
			workflowVariablException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Method CreateWorkflowVariables returned workflow variable with empty name");
		END_IF
				
		_Variables.SetGeneric(Core.GenericValueFactory.FromStringValue(
			workflowVariables[i].WorkflowVariableName), 
			Core.GenericValueFactory.FromAny(workflowVariables[i].PlcVariable, workflowVariables[i].PlcVariableIsObject, FALSE));
	END_FOR
	
	IF _Variables.Count <> VariableCount THEN
		workflowVariablException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Invalid number of unique workflow variables ", TO_WSTRING(_Variables.Count), " instead of ", TO_WSTRING(VariableCount), ". Check for duplicated names"));		
	END_IF
	
	_Initialized := TRUE;
END_IF

_RootActivityReference.Set(rootActivity, deleteOnParentDelete);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetWorkflowVariable" Id="{2212bb53-6a6c-40cd-94df-0c4026ca5254}">
      <Declaration><![CDATA[METHOD TryGetWorkflowVariable : BOOL
VAR_INPUT
	name : STRING;
END_VAR
VAR_OUTPUT
	variable : Core.GENERIC_VALUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetWorkflowVariable := _Variables.TryGetValueByKey(name, value => variable);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>