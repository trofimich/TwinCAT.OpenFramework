<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="SignalControlledIntersectionAutomationUnit" Id="{d0f0aa39-ea76-461a-8fa3-dba15b8635a6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK SignalControlledIntersectionAutomationUnit EXTENDS TOF_AutomationEngine.AutomationUnit<6>
VAR_INPUT
	ThrowTestExceptionRequest : BOOL;
	TestExceptionMessage : STRING := 'Test error message';
END_VAR
VAR_OUTPUT	
	Mode : TRAFFIC_LIGHT_MODE;
	State : INTERSECTION_TRAFFIC_LIGHTS_STATE;

	{region "Devices"}
	
	WorkingModeSwitch : TOF_Devices_IO.DigitalInput(THIS^, CONTACT_TYPE.NORMALY_OPEN);
	
	BlinkingYellowModeSwitch : TOF_Devices_IO.DigitalInput(THIS^, CONTACT_TYPE.NORMALY_OPEN);
	
	TrafficLight1 : TrafficLight(THIS^);
	TrafficLight2 : TrafficLight(THIS^);
	TrafficLight3 : TrafficLight(THIS^);
	TrafficLight4 : TrafficLight(THIS^);
	
 	{endregion} 	
END_VAR
VAR	
	_ClassName : STRING := __POUNAME();

	_Devices : ARRAY [0..5] OF TOF_Automation.IDevice := [WorkingModeSwitch, BlinkingYellowModeSwitch, TrafficLight1, TrafficLight2, TrafficLight3, TrafficLight4];
	
	{region "Timers"}
	
	_RedGreenLightTimer : TOF_Timers.Timer;
	_YellowLightTimer : TOF_Timers.Timer;

	_FlashingYellowLightTimer : TOF_Timers.Timer;
	
	{endregion}
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service methods" Id="{856d71ee-39f1-4125-9914-d1908aaa9de4}">
      <Folder Name="Process mode" Id="{9df05ec4-b756-4783-a76b-40e885978be7}" />
      <Folder Name="Start mode" Id="{5736814f-405d-4520-8342-b8d268de143f}" />
    </Folder>
    <Property Name="ClassName" Id="{533645c9-51ab-4278-b915-2be070529db7}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{1aae8f98-7140-4915-9ec0-3cdf6e26caf7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Devices" Id="{e36d4584-8140-4c77-9df9-e6749306c675}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Devices : REFERENCE TO ARRAY [0.._DeviceCount - 1] OF TOF_Automation.IDevice]]></Declaration>
      <Get Name="Get" Id="{950e992f-c738-4f5e-bde1-e86a5e25b6b3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Devices REF= _Devices;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="executeTimers" Id="{dfed4c3f-27bc-4f55-8a83-85a2d79b2492}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE executeTimers]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Execute();
_YellowLightTimer.Execute();
_FlashingYellowLightTimer.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnInitialize" Id="{6722cbdb-3c99-454a-ba16-212d041e432c}">
      <Declaration><![CDATA[METHOD PROTECTED OnInitialize : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Interval := T#3S;
_YellowLightTimer.Interval := T#1S;

_FlashingYellowLightTimer.Interval := T#500MS;

OnInitialize := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRun" Id="{89569639-43c3-4fe5-81a2-97d1904a242b}">
      <Declaration><![CDATA[METHOD PROTECTED OnRun
VAR_IN_OUT CONSTANT
	executionContext : TOF_Automation.AUTOMATION_EXECUTION_CONTEXT;
END_VAR
VAR
	testException : TOF_Core.StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[executeTimers();

IF WorkingModeSwitch.Changed THEN
	IF WorkingModeSwitch.Value THEN
		IF BlinkingYellowModeSwitch.Value THEN
			startBlinkingYellowMode();
		ELSE
			startNormalMode();
		END_IF
	ELSE		
		startTurnOffMode();
	END_IF
	
	RETURN;
END_IF

IF WorkingModeSwitch.Value AND_THEN BlinkingYellowModeSwitch.Changed THEN
	IF BlinkingYellowModeSwitch.Value THEN
		startBlinkingYellowMode();
	ELSE
		startNormalMode();
	END_IF	
	
	RETURN;
END_IF

CASE Mode OF
	TRAFFIC_LIGHT_MODE.NORMAL:
		processNormalMode();
	
	TRAFFIC_LIGHT_MODE.BLINKING_YELLOW:
		processBlinkingYellowMode();
END_CASE

IF ThrowTestExceptionRequest THEN
	ThrowTestExceptionRequest := FALSE;
	testException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TO_WSTRING(TestExceptionMessage));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="processBlinkingYellowMode" Id="{62fb35a3-197f-483b-a168-1d68d2c02c71}" FolderPath="Service methods\Process mode\">
      <Declaration><![CDATA[METHOD PRIVATE processBlinkingYellowMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _FlashingYellowLightTimer.Done THEN
	IF State = INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW THEN
		State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_OFF;
	ELSE
		State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW;
	END_IF
	
	_FlashingYellowLightTimer.Start();
	
	updateTraficLights();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="processNormalMode" Id="{a778b296-2e19-469e-8475-30ab670a6dcd}" FolderPath="Service methods\Process mode\">
      <Declaration><![CDATA[METHOD processNormalMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED:
		IF _RedGreenLightTimer.Done THEN
			_YellowLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_YELLOW_AND_2_4_YELLOW;
			updateTraficLights();
		END_IF
 
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_YELLOW_AND_2_4_YELLOW:
		IF _YellowLightTimer.Done THEN
			_RedGreenLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_GREEN_AND_1_3_RED;
			updateTraficLights();
		END_IF
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_GREEN_AND_1_3_RED:
		IF _RedGreenLightTimer.Done THEN
			_YellowLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_YELLOW_AND_1_3_YELLOW;
			updateTraficLights();
		END_IF
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_YELLOW_AND_1_3_YELLOW:
		IF _YellowLightTimer.Done THEN
			_RedGreenLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED;
			updateTraficLights();
		END_IF
	
	ELSE
		_RedGreenLightTimer.Start();
		State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED;
		updateTraficLights();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{db85e590-8997-4b56-bd9a-8e5dd4df70fe}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{f6ab4eca-dad6-4656-bd85-433d2bf1854b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="startBlinkingYellowMode" Id="{338031f0-6ea3-4eea-a4fb-410b4cc13072}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD PRIVATE startBlinkingYellowMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Stop();
_YellowLightTimer.Stop();

_FlashingYellowLightTimer.Start();

Mode := TRAFFIC_LIGHT_MODE.BLINKING_YELLOW;
State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startNormalMode" Id="{bfa9afc6-d6b0-4dbc-b2b3-10d6e8a939c6}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD startNormalMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Start();
_YellowLightTimer.Stop();

_FlashingYellowLightTimer.Stop();

Mode := TRAFFIC_LIGHT_MODE.NORMAL;
State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startTurnOffMode" Id="{464d42a9-3c20-4a31-a794-03937e5bceab}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD PRIVATE startTurnOffMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Stop();
_YellowLightTimer.Stop();

_FlashingYellowLightTimer.Stop();

Mode := TRAFFIC_LIGHT_MODE.OFF;
State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_OFF;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateTraficLights" Id="{f60cca55-65f4-4222-8c1f-0c67e0a9c589}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE updateTraficLights]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_OFF:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW, 
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_YELLOW_AND_2_4_YELLOW,
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_YELLOW_AND_1_3_YELLOW:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.RED);
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_GREEN_AND_1_3_RED:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>