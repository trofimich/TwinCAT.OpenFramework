<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="DemoWorkflowAutomationController" Id="{dc096c7a-49dd-4129-a1d0-54dcfc137d76}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK DemoWorkflowAutomationController EXTENDS TOF_AutomationEngine.AutomationController<0>
VAR_OUTPUT
	DemoWorkflow : DemoWorkflow;	
END_VAR
VAR	
	_ClassName : STRING := __POUNAME();
	
	_Started : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service methods" Id="{1828c457-8a78-48a2-9b87-64cb67bc8882}" />
    <Property Name="ClassName" Id="{ad6b5264-2d84-464d-8021-1d07f9d49884}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{897a4b58-f1c6-4661-8c68-f7b7183bfc21}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="createActivityForMovementFromCorner" Id="{5aa5ff3a-92c3-4d8d-9a23-b811cd230c9d}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE createActivityForMovementFromCorner : IActivity
VAR_INPUT
	workflow : TOF_Workflow.IWorkflow;
	cornerNumber : BYTE;
END_VAR
VAR
	waitAndPickActivity : POINTER TO TOF_Workflow.WaitAndPickActivity;
	
	trueValue : BOOL := TRUE;
	
	needMoveByTimeArrowVariableName : STRING;	
	moveByTimeArrowToXPosition : LREAL;
	moveByTimeArrowToYPosition : LREAL;
	
	needMoveAgainstTimeArrowVariableName : STRING;
	moveAgainstByTimeArrowToXPosition : LREAL;
	moveAgainstByTimeArrowToYPosition : LREAL;
	
	needMoveByTimeArrowCondition : POINTER TO VariableHasValueCondition;
	needMoveAgainstTimeArrowCondition : POINTER TO VariableHasValueCondition;
	
	moveByTimeArrowActivity : POINTER TO MoveFromToActivity;
	moveAgainstTimeArrowActivity : POINTER TO MoveFromToActivity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// calculate variable values depending of current position (corner number 1-4)
CASE cornerNumber OF 
	1:
		needMoveByTimeArrowVariableName := 'MoveFrom1To2';
		moveByTimeArrowToXPosition := 400;
		moveByTimeArrowToYPosition := 0;
		
		needMoveAgainstTimeArrowVariableName := 'MoveFrom1To4';
		moveAgainstByTimeArrowToXPosition := 0;
		moveAgainstByTimeArrowToYPosition := 300;
		
	2:
		needMoveByTimeArrowVariableName := 'MoveFrom2To3';
		moveByTimeArrowToXPosition := 400;
		moveByTimeArrowToYPosition := 300;
		
		needMoveAgainstTimeArrowVariableName := 'MoveFrom2To1';
		moveAgainstByTimeArrowToXPosition := 0;
		moveAgainstByTimeArrowToYPosition := 0;
		
	3:
		needMoveByTimeArrowVariableName := 'MoveFrom3To4';
		moveByTimeArrowToXPosition := 0;
		moveByTimeArrowToYPosition := 300;
		
		needMoveAgainstTimeArrowVariableName := 'MoveFrom3To2';
		moveAgainstByTimeArrowToXPosition := 400;
		moveAgainstByTimeArrowToYPosition := 0;
		
	4:
		needMoveByTimeArrowVariableName := 'MoveFrom4To1';
		moveByTimeArrowToXPosition := 0;
		moveByTimeArrowToYPosition := 0;
		
		needMoveAgainstTimeArrowVariableName := 'MoveFrom4To3';
		moveAgainstByTimeArrowToXPosition := 400;
		moveAgainstByTimeArrowToYPosition := 300;
END_CASE

// activity waits for move command (move from current corner by time arrow or move from current corner against time arrow) 
waitAndPickActivity := __NEW(TOF_Workflow.WaitAndPickActivity(workflow := workflow));

// condition to wait move by time arrow command
needMoveByTimeArrowCondition := __NEW(VariableHasValueCondition);
needMoveByTimeArrowCondition^.Configure(needMoveByTimeArrowVariableName, trueValue);

// activity to move by time arrow command
moveByTimeArrowActivity := __NEW(MoveFromToActivity(workflow := workflow));
moveByTimeArrowActivity^.Configure(moveByTimeArrowToXPosition, moveByTimeArrowToYPosition);

waitAndPickActivity^.AddBarnch(needMoveByTimeArrowCondition^, TRUE, moveByTimeArrowActivity^, TRUE);

// condition to wait move against time arrow command
needMoveAgainstTimeArrowCondition := __NEW(VariableHasValueCondition);
needMoveAgainstTimeArrowCondition^.Configure(needMoveAgainstTimeArrowVariableName, trueValue);

// activity to move againsta time arrow command
moveAgainstTimeArrowActivity := __NEW(MoveFromToActivity(workflow := workflow));
moveAgainstTimeArrowActivity^.Configure(moveAgainstByTimeArrowToXPosition, moveAgainstByTimeArrowToYPosition);

waitAndPickActivity^.AddBarnch(needMoveAgainstTimeArrowCondition^, TRUE, moveAgainstTimeArrowActivity^, TRUE);

createActivityForMovementFromCorner := waitAndPickActivity^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Devices" Id="{b7272ce5-6ecc-4fa4-bb5c-6b5e453591e8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Devices : REFERENCE TO ARRAY [0.._DeviceCount - 1] OF TOF_Automation.IDevice]]></Declaration>
      <Get Name="Get" Id="{7ac2f615-f965-4470-afb8-029e1a112b89}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Devices REF= 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnInitialize" Id="{b3bfbc25-ec55-4a48-bb17-81d8eba45dce}">
      <Declaration><![CDATA[METHOD PROTECTED OnInitialize : BOOL
VAR
	rootActivity : POINTER TO TOF_Workflow.SequenceActivity;
	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[rootActivity := __NEW(TOF_Workflow.SequenceActivity(workflow := DemoWorkflow));

DemoWorkflow.SetRootActivity(rootActivity^, TRUE);

rootActivity^.AddActivity(createActivityForMovementFromCorner(DemoWorkflow, 1), TRUE);

rootActivity^.AddActivity(createActivityForMovementFromCorner(DemoWorkflow, 2), TRUE);

rootActivity^.AddActivity(createActivityForMovementFromCorner(DemoWorkflow, 3), TRUE);

rootActivity^.AddActivity(createActivityForMovementFromCorner(DemoWorkflow, 4), TRUE);

OnInitialize := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRun" Id="{59d6ffe3-77b0-4f4a-8326-62224dd497be}">
      <Declaration><![CDATA[METHOD PROTECTED OnRun
VAR_IN_OUT CONSTANT
	executionContext : TOF_Automation.AUTOMATION_EXECUTION_CONTEXT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Started THEN
	DemoWorkflow.Execute();
ELSE
	DemoWorkflow.Start();
	
	_Started := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStop" Id="{5d7a8a2a-bb17-458b-b196-f49d8eecab4b}">
      <Declaration><![CDATA[METHOD PROTECTED OnStop
VAR_IN_OUT CONSTANT
	executionContext	: TOF_AutomationEngine.AUTOMATION_EXECUTION_CONTEXT;
END_VAR
VAR
	testException : TOF_Core.StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DemoWorkflow.Running THEN
	DemoWorkflow.StartAbort();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{e4928d85-ffb2-44cd-81d8-5da5452d15ff}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{f290be1b-b375-45a7-a2dc-21a7680125fb}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StartRequest" Id="{1e43dc08-5c6f-43fa-8043-e77bc3e183c3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY StartRequest : BOOL]]></Declaration>
      <Get Name="Get" Id="{22609e63-872f-4e8a-8b38-595be3a2ffa6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartRequest := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StopRequest" Id="{3b9be127-2d2d-4e1c-8337-0b2322700b8b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY StopRequest : BOOL]]></Declaration>
      <Get Name="Get" Id="{ef4223e6-dc24-45ae-b593-31786ae2a856}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopRequest := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>