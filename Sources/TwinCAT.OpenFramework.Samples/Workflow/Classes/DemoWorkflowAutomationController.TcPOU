<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="DemoWorkflowAutomationController" Id="{dc096c7a-49dd-4129-a1d0-54dcfc137d76}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK DemoWorkflowAutomationController EXTENDS TOF_AutomationEngine.AutomationController<0>
VAR_OUTPUT
	DemoWorkflow : DemoWorkflow;	
END_VAR
VAR	
	_ClassName : STRING := __POUNAME();
	
	_Started : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service methods" Id="{1828c457-8a78-48a2-9b87-64cb67bc8882}">
      <Folder Name="Process mode" Id="{2830862c-af39-433a-bfc5-c4779b94574a}" />
      <Folder Name="Start mode" Id="{e6d5cc89-53d5-4031-bf54-1c7290aaf2dd}" />
      <Folder Name="Start timer" Id="{8218823c-2369-48ba-939f-55c94e77d80b}" />
    </Folder>
    <Method Name="calculateCorrectedInterval" Id="{d6b8d7d8-0ba3-4888-812f-d52b506fb4c2}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE calculateCorrectedInterval : TIME
VAR_INPUT
	originalInterval : TIME;
	correctionPercent : SINT(-50..50);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF correctionPercent = 0 THEN
	calculateCorrectedInterval := originalInterval;
ELSIF correctionPercent > 0 THEN
	calculateCorrectedInterval := originalInterval + TO_TIME(TO_INT(originalInterval) * correctionPercent / 100);
ELSE
	calculateCorrectedInterval := originalInterval - TO_TIME(TO_INT(originalInterval) * -correctionPercent / 100);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{ad6b5264-2d84-464d-8021-1d07f9d49884}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{897a4b58-f1c6-4661-8c68-f7b7183bfc21}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Devices" Id="{b7272ce5-6ecc-4fa4-bb5c-6b5e453591e8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Devices : REFERENCE TO ARRAY [0.._DeviceCount - 1] OF TOF_Automation.IDevice]]></Declaration>
      <Get Name="Get" Id="{7ac2f615-f965-4470-afb8-029e1a112b89}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Devices REF= 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="executeTimers" Id="{d6689454-b54c-4459-a967-b7590c9e2480}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE executeTimers]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Execute();
_YellowLightTimer.Execute();
_FlashingYellowLightTimer.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnInitialize" Id="{b3bfbc25-ec55-4a48-bb17-81d8eba45dce}">
      <Declaration><![CDATA[METHOD PROTECTED OnInitialize : BOOL
VAR
	rootActivity : POINTER TO TOF_Workflow.SequenceActivity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[rootActivity := __NEW(TOF_Workflow.SequenceActivity(workflow := DemoWorkflow));

DemoWorkflow.SetRootActivity(rootActivity^, TRUE);

OnInitialize := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRun" Id="{59d6ffe3-77b0-4f4a-8326-62224dd497be}">
      <Declaration><![CDATA[METHOD PROTECTED OnRun
VAR_IN_OUT CONSTANT
	executionContext : TOF_Automation.AUTOMATION_EXECUTION_CONTEXT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Started THEN
	DemoWorkflow.Execute();
ELSE
	DemoWorkflow.Start();
	
	_Started := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStop" Id="{5d7a8a2a-bb17-458b-b196-f49d8eecab4b}">
      <Declaration><![CDATA[METHOD PROTECTED OnStop
VAR_IN_OUT CONSTANT
	executionContext	: TOF_AutomationEngine.AUTOMATION_EXECUTION_CONTEXT;
END_VAR
VAR
	testException : TOF_Core.StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DemoWorkflow.Running THEN
	DemoWorkflow.StartAbort();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="processBlinkingYellowMode" Id="{93aaaedb-5482-445e-b164-6fee3752d3ca}" FolderPath="Service methods\Process mode\">
      <Declaration><![CDATA[METHOD PRIVATE processBlinkingYellowMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _FlashingYellowLightTimer.Done THEN
	IF State = SIGNAL_CONTROLLED_INTERSECTION_STATE.ALL_YELLOW THEN
		State := SIGNAL_CONTROLLED_INTERSECTION_STATE.ALL_OFF;
	ELSE
		State := SIGNAL_CONTROLLED_INTERSECTION_STATE.ALL_YELLOW;
	END_IF
	
	startFlashingYellowLightTimer();
	
	updateTraficLights();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="processNormalMode" Id="{26403d4a-6ed7-45b0-961c-1b379ab49453}" FolderPath="Service methods\Process mode\">
      <Declaration><![CDATA[METHOD processNormalMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_GREEN_AND_2_4_RED:
		IF _RedGreenLightTimer.Done THEN
			startYellowLightTimer();
			State := SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_YELLOW_AND_2_4_YELLOW;
			updateTraficLights();
		END_IF
 
	SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_YELLOW_AND_2_4_YELLOW:
		IF _YellowLightTimer.Done THEN
			startRedGreenLightTimer();
			State := SIGNAL_CONTROLLED_INTERSECTION_STATE._2_4_GREEN_AND_1_3_RED;
			updateTraficLights();
		END_IF
	
	SIGNAL_CONTROLLED_INTERSECTION_STATE._2_4_GREEN_AND_1_3_RED:
		IF _RedGreenLightTimer.Done THEN
			startYellowLightTimer();
			State := SIGNAL_CONTROLLED_INTERSECTION_STATE._2_4_YELLOW_AND_1_3_YELLOW;
			updateTraficLights();
		END_IF
	
	SIGNAL_CONTROLLED_INTERSECTION_STATE._2_4_YELLOW_AND_1_3_YELLOW:
		IF _YellowLightTimer.Done THEN
			startRedGreenLightTimer();
			State := SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_GREEN_AND_2_4_RED;
			updateTraficLights();
		END_IF
	
	ELSE
		startRedGreenLightTimer();
		State := SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_GREEN_AND_2_4_RED;
		updateTraficLights();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{e4928d85-ffb2-44cd-81d8-5da5452d15ff}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{f290be1b-b375-45a7-a2dc-21a7680125fb}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="startBlinkingYellowMode" Id="{afaf0079-d1ca-41f9-9820-c4d725cb6165}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD PRIVATE startBlinkingYellowMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.StartAbort();
_YellowLightTimer.StartAbort();

startFlashingYellowLightTimer();

Mode := SIGNAL_CONTROLLED_INTERSECTION_MODE.BLINKING_YELLOW;
State := SIGNAL_CONTROLLED_INTERSECTION_STATE.ALL_YELLOW;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startFlashingYellowLightTimer" Id="{c44621fa-b379-4fc0-bb34-8266d6369564}" FolderPath="Service methods\Start timer\">
      <Declaration><![CDATA[METHOD PRIVATE startFlashingYellowLightTimer]]></Declaration>
      <Implementation>
        <ST><![CDATA[_FlashingYellowLightTimer.Interval := calculateCorrectedInterval(FLASHING_YELLOW_LIGHT_INTERVAL, TO_SINT(SWITCH_SPEED_FACTOR * SwitchSpeedAdjuster.Value));

_FlashingYellowLightTimer.Start();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startNormalMode" Id="{76cc7cec-8bb8-483f-8830-4b0daa48eff7}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD startNormalMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[startRedGreenLightTimer();

_YellowLightTimer.StartAbort();
_FlashingYellowLightTimer.StartAbort();

Mode := SIGNAL_CONTROLLED_INTERSECTION_MODE.NORMAL;
State := SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_GREEN_AND_2_4_RED;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startRedGreenLightTimer" Id="{fb26be72-9019-4878-8707-91d805059137}" FolderPath="Service methods\Start timer\">
      <Declaration><![CDATA[METHOD PRIVATE startRedGreenLightTimer]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Interval := calculateCorrectedInterval(RED_GREEN_LIGHT_INTERVAL, TO_SINT(SWITCH_SPEED_FACTOR * SwitchSpeedAdjuster.Value));

_RedGreenLightTimer.Start();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartRequest" Id="{78382aa1-6618-4f16-a890-41a4544a1a14}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY StartRequest : BOOL]]></Declaration>
      <Get Name="Get" Id="{99bde6ca-5eaf-466f-8b8e-c3b6ac68e758}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartRequest := WorkingModeSwitch.Value;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="startYellowLightTimer" Id="{a8b1bfa1-d660-4a58-9e56-3440ee3ae010}" FolderPath="Service methods\Start timer\">
      <Declaration><![CDATA[METHOD PRIVATE startYellowLightTimer]]></Declaration>
      <Implementation>
        <ST><![CDATA[_YellowLightTimer.Interval := calculateCorrectedInterval(YELLOW_LIGHT_INTERVAL, TO_SINT(SWITCH_SPEED_FACTOR * SwitchSpeedAdjuster.Value));

_YellowLightTimer.Start();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopRequest" Id="{a22b7a46-c274-4451-9cb1-0e96941b94d3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY StopRequest : BOOL]]></Declaration>
      <Get Name="Get" Id="{7d9eb9d0-1864-4d76-9461-a6d893ee99aa}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopRequest := NOT WorkingModeSwitch.Value;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="updateTraficLights" Id="{7602923e-95a4-453d-9729-44b8d0b6091f}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE updateTraficLights]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	SIGNAL_CONTROLLED_INTERSECTION_STATE.ALL_OFF:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
	
	SIGNAL_CONTROLLED_INTERSECTION_STATE.ALL_YELLOW, 
	SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_YELLOW_AND_2_4_YELLOW,
	SIGNAL_CONTROLLED_INTERSECTION_STATE._2_4_YELLOW_AND_1_3_YELLOW:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
	
	SIGNAL_CONTROLLED_INTERSECTION_STATE._1_3_GREEN_AND_2_4_RED:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.RED);
	
	SIGNAL_CONTROLLED_INTERSECTION_STATE._2_4_GREEN_AND_1_3_RED:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>