<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="SameDataPredicate" Id="{ddbd19a6-cabe-4848-833d-1f8983917ab8}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK SameDataPredicate EXTENDS Core.Object IMPLEMENTS Core.IPredicate
VAR
	_ClassName : STRING := __POUNAME();
	
	_ReferenceValue : Core.GENERIC_VALUE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Check" Id="{35c8a3af-5588-4846-ab97-7e0e1082c853}">
      <Declaration><![CDATA[METHOD Check : BOOL
VAR_INPUT
	valueToCompare : __System.AnyType; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// same address and type class, but diffirent size can be in case of string comparision where size determined in diffirent ways: with lengs function which searches for zero and with compiler by real allocated memory size 
// same address and size, but diffirent type class can be in case of integer/enum/range type comparision
Check := _ReferenceValue.Address = valueToCompare.pValue AND_THEN (TO_DINT(_ReferenceValue.Size) = valueToCompare.diSize OR_ELSE _ReferenceValue.TypeClass = valueToCompare.TypeClass);]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{0f0f4f1b-f736-46d7-b0fe-2b1a692afb8a}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{48637cf3-74bd-4840-a502-e264f1448455}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{51fd8ac6-6067-4184-8676-0a7db000891d}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	(* if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{c43d2823-61c1-460f-b4a3-57db1b9244d0}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{9a33a61f-82c0-4bb0-973a-547ed775c8d6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ReferenceValue" Id="{3a6361dc-cd05-497a-ae3e-0922ee4a25e7}">
      <Declaration><![CDATA[PROPERTY ReferenceValue : REFERENCE TO Core.GENERIC_VALUE]]></Declaration>
      <Get Name="Get" Id="{6680e3a5-1741-40fe-944e-98ad83061ed3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReferenceValue REF= _ReferenceValue;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetReferenceValueByAny" Id="{c7a48568-b0d3-494c-86f2-965f9dbd55dd}">
      <Declaration><![CDATA[METHOD SetReferenceValueByAny
VAR_INPUT
	referenceValue : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ReferenceValue := Core.GenericValueFactory.FromAnyType(referenceValue, FALSE, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.CLONE_ORIGINAL_VALUE_AND_OWNS_MEMORY);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetReferenceValueByAnyType" Id="{180ffd21-4342-4518-baa0-ee950af19a4a}">
      <Declaration><![CDATA[METHOD SetReferenceValueByAnyType
VAR_INPUT
	referenceValue : __SYSTEM.AnyType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ReferenceValue := Core.GenericValueFactory.FromAnyType(referenceValue, FALSE, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.CLONE_ORIGINAL_VALUE_AND_OWNS_MEMORY);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{b813da18-a809-462b-a4de-1884c9edb817}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{077ac4cd-c491-495e-895c-1321ae8834d3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>