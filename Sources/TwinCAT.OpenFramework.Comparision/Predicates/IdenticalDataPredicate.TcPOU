<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="IdenticalDataPredicate" Id="{69d89670-0944-46d2-b34c-f87cdf7e100c}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK IdenticalDataPredicate EXTENDS Core.Object IMPLEMENTS Core.IPredicate
VAR
	_ClassName : STRING := __POUNAME();
	
	_ReferenceValue : Core.GENERIC_VALUE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Check" Id="{cec5bd44-71ec-48bd-974d-4ba41cd8e3ee}">
      <Declaration><![CDATA[METHOD Check : BOOL
VAR_INPUT
	valueToCompare : __SYSTEM.AnyType; 
END_VAR
VAR
	stringPointer : POINTER TO STRING;
	wideStringPointer : POINTER TO WSTRING;
	referenceDataSize : DINT;
	valueToComapreDataSize : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ReferenceValue.Address = 0 OR_ELSE _ReferenceValue.Size = 0 OR_ELSE valueToCompare.pValue = 0 OR_ELSE valueToCompare.diSize = 0 THEN
	Check := (_ReferenceValue.Address = 0 OR_ELSE _ReferenceValue.Size = 0) AND_THEN (valueToCompare.pValue = 0 OR_ELSE valueToCompare.diSize = 0);
ELSE
	IF _ReferenceValue.TypeClass = Core.GENERIC_TYPE_CLASS.TYPE_STRING AND_THEN valueToCompare.TypeClass = __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
		stringPointer := _ReferenceValue.Address;
		referenceDataSize := TO_DINT(StringHelper.GetActualSize(stringPointer^));
		
		stringPointer := valueToCompare.pValue;		
		valueToComapreDataSize := TO_DINT(StringHelper.GetActualSize(stringPointer^));
	ELSIF _ReferenceValue.TypeClass = Core.GENERIC_TYPE_CLASS.TYPE_WSTRING AND_THEN valueToCompare.TypeClass = __SYSTEM.TYPE_CLASS.TYPE_WSTRING THEN
		wideStringPointer := _ReferenceValue.Address;
		referenceDataSize := TO_DINT(WideStringHelper.GetActualSize(wideStringPointer^));
		
		wideStringPointer := valueToCompare.pValue;		
		valueToComapreDataSize := TO_DINT(WideStringHelper.GetActualSize(wideStringPointer^));
	ELSE
		referenceDataSize := TO_DINT(_ReferenceValue.Size);
		valueToComapreDataSize := valueToCompare.diSize;		
	END_IF
 
	Check := referenceDataSize = valueToComapreDataSize AND_THEN Tc2_System.MEMCMP(_ReferenceValue.Address, valueToCompare.pValue, TO_UDINT(referenceDataSize)) = 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{8e5ab7c3-2f39-4002-b1dc-2aeb600ea841}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{cf2504cf-80f7-4f82-801a-33325d77d0b0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{d05e9858-8a0c-459a-8e82-d6877f44d432}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	(* if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ReferenceValue.Release();]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{3055752a-4441-45eb-a886-3ee93e0fc81b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{f2bbe44a-7978-4436-9525-efb70f004014}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ReferenceValue" Id="{9cd7fd1d-8654-4942-b166-4c2c2e170f03}">
      <Declaration><![CDATA[PROPERTY ReferenceValue : REFERENCE TO Core.GENERIC_VALUE]]></Declaration>
      <Get Name="Get" Id="{b8cc6388-67b7-4249-afa3-baf099683d6c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReferenceValue REF= _ReferenceValue;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetReferenceValueByAny" Id="{d2db5743-54df-4a10-9415-dd40ad903d0e}">
      <Declaration><![CDATA[METHOD SetReferenceValueByAny
VAR_INPUT
	referenceValue : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ReferenceValue := Core.GenericValueFactory.FromAnyType(referenceValue, FALSE, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.CLONE_ORIGINAL_VALUE_AND_OWNS_MEMORY);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetReferenceValueByAnyType" Id="{47a51104-523c-4416-8ae4-bda16604c8b3}">
      <Declaration><![CDATA[METHOD SetReferenceValueByAnyType
VAR_INPUT
	referenceValue : __SYSTEM.AnyType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ReferenceValue := Core.GenericValueFactory.FromAnyType(referenceValue, FALSE, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.CLONE_ORIGINAL_VALUE_AND_OWNS_MEMORY);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{807678b9-ec28-4f30-9f23-d752d98349af}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{7c7a200b-5a01-4955-8f62-0234eb0a28fb}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>