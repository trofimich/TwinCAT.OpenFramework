<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StandardPointerComparers" Id="{84d117f5-3356-4f02-afbe-89823e726e07}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM StandardPointerComparers
VAR
	_ClassName : STRING := __POUNAME();

	_BoolComparer : BoolPointerComparer;
	_ByteComparer : BytePointerComparer;
	_WordComparer : WordPointerComparer;
	_DWordComparer : DWordPointerComparer;
	_LWordComparer : LWordPointerComparer;
	_SIntComparer : SIntPointerComparer;
	_USIntComparer : USIntPointerComparer;
	_IntComparer : IntPointerComparer;
	_UIntComparer : UIntPointerComparer;
	_DIntComparer : DIntPointerComparer;
	_UDIntComparer : UDIntPointerComparer;
	_LIntComparer : LIntPointerComparer;
	_ULIntComparer : ULIntPointerComparer;
	_UXIntComparer : UXIntPointerComparer;
	_XIntComparer : XIntPointerComparer;
	_XWordComparer : XWordPointerComparer;	
	_RealComparer : RealPointerComparer;
	_LRealComparer : LRealPointerComparer;		
	_StringComparer : StringPointerComparer;
	_WStringComparer : WStringPointerComparer;
	_TimeComparer : TimePointerComparer;
	_LTimeComparer : LTimePointerComparer;
	_DateComparer : DatePointerComparer;
	_DateAndTimeComparer : DateAndTimePointerComparer;
	_LDateAndTimeComparer : DateAndTimePointerComparer;
	_TimeOfDayComparer : TimeOfDayPointerComparer;	
	_LTimeOfDayComparer : LTimeOfDayPointerComparer;	
	_PointerComparer : UntypedPointerComparer;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{48215c22-d68e-45f1-a23f-90ea48b585b3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{652dda7e-0c8e-489d-b0b4-67b9b71c3467}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetForType" Id="{a80eb4d6-0893-4e38-8c11-287516c270b4}">
      <Declaration><![CDATA[METHOD GetForType : IPointerComparer
VAR_INPUT
	pointerType : POINTER_TYPE;
END_VAR
VAR
	argumentOutOfRangeException : ArgumentOutOfRangeException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE pointerType OF
	POINTER_TYPE.BOOL_POINTER:
		GetForType := _BoolComparer;
	POINTER_TYPE.BYTE_POINTER:
		GetForType := _ByteComparer;
	POINTER_TYPE.WORD_POINTER:
		GetForType := _WordComparer;
	POINTER_TYPE.DWORD_POINTER:
		GetForType := _DWordComparer;
	POINTER_TYPE.LWORD_POINTER:
		GetForType := _LWordComparer;
	POINTER_TYPE.SINT_POINTER:
		GetForType := _SIntComparer;
	POINTER_TYPE.USINT_POINTER:
		GetForType := _USIntComparer;
	POINTER_TYPE.INT_POINTER:
		GetForType := _IntComparer;
	POINTER_TYPE.UINT_POINTER:
		GetForType := _UIntComparer;
	POINTER_TYPE.DINT_POINTER:
		GetForType := _DIntComparer;
	POINTER_TYPE.UDINT_POINTER:
		GetForType := _UDIntComparer;
	POINTER_TYPE.LINT_POINTER:
		GetForType := _LIntComparer;
	POINTER_TYPE.ULINT_POINTER:
		GetForType := _ULIntComparer;
	POINTER_TYPE.XINT_POINTER:
		GetForType := _XIntComparer;
	POINTER_TYPE.XWORD_POINTER:
		GetForType := _XWordComparer;
	POINTER_TYPE.UXINT_POINTER:
		GetForType := _UXIntComparer;		
	POINTER_TYPE.REAL_POINTER:
		GetForType := _RealComparer;
	POINTER_TYPE.LREAL_POINTER:
		GetForType := _LRealComparer;
	POINTER_TYPE.STRING_POINTER:
		GetForType := _StringComparer;
	POINTER_TYPE.WSTRING_POINTER:
		GetForType := _WStringComparer;
	POINTER_TYPE.TIME_POINTER:
		GetForType := _TimeComparer;
	POINTER_TYPE.LTIME_POINTER:
		GetForType := _LTimeComparer;
	POINTER_TYPE.DATE_POINTER:
		GetForType := _DateComparer;
	POINTER_TYPE.DATE_AND_TIME_POINTER:
		GetForType := _DateAndTimeComparer;
	POINTER_TYPE.LDATE_AND_TIME_POINTER:
		GetForType := _LDateAndTimeComparer;
	POINTER_TYPE.TIME_OF_DAY_POINTER:
		GetForType := _TimeOfDayComparer;
	POINTER_TYPE.LTIME_OF_DAY_POINTER:
		GetForType := _LTimeOfDayComparer;
	POINTER_TYPE.UNTYPED_POINTER:
		GetForType := _PointerComparer;
	POINTER_TYPE.OBJECT_POINTER:
		GetForType := _PointerComparer;
	ELSE
		argumentOutOfRangeException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'pointerType', pointerType);
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>