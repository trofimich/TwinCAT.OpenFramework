<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ValueTypeValidator" Id="{6a8697ad-e358-436a-8685-e70e266a2b7d}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ValueTypeValidator EXTENDS Core.Object IMPLEMENTS IGenericValueValidator
VAR
	_ClassName : STRING := __POUNAME();
	
	_TypeClass : GENERIC_TYPE_CLASS;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{831e44e9-5112-479e-be91-38be188df071}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{a4a02b90-0094-48ee-9e45-d272556f9030}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{d87e5545-45a5-4e70-81f3-27d3be5de1aa}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
	typeClass : GENERIC_TYPE_CLASS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_TypeClass := typeClass;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{29d4e334-1d0a-43a7-ad9e-c9cb322c212b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{2cebe2aa-4644-4a99-9700-14e96b5ca5c5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Size" Id="{d75f5256-e128-4d3f-8529-30830fbef3f2}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{1091d033-42cd-4d72-976b-96127ade6d3c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Validate" Id="{7984efcb-e5f8-4d21-a49b-a77ef729b5cd}">
      <Declaration><![CDATA[METHOD Validate
VAR_INPUT
	validatedObjectName : WSTRING;
END_VAR
VAR_IN_OUT CONSTANT
	valueTypeClass : Core.GENERIC_TYPE_CLASS;
END_VAR
VAR
	invalidTypeException : IncompartibleGenericValueTypeException;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF valueTypeClass <> _TypeClass THEN
	invalidTypeException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), validatedObjectName, valueTypeClass, _TypeClass);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>