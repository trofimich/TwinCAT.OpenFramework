<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Dictionary" Id="{aa9d18ee-85a8-44b9-8978-597d9cf8b178}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
// Dynamic dictionary of pointers to key and value
FUNCTION_BLOCK Dictionary EXTENDS Core.Object IMPLEMENTS IDictionary
VAR_INPUT
	DefaultAllocationElemetCount : BYTE := 10;	
END_VAR
VAR
	_ClassName : STRING := __POUNAME();

	_Array : POINTER TO Core.GENERIC_KEY_VALUE_PAIR;
	_ArrayLength : DINT;
	_ValueCount : DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Serviceme mebers" Id="{e2c68c01-e8ea-425f-ba6b-6175fdff734e}" />
    <Method Name="AllocateMemory" Id="{0e7f768a-1410-4b70-bf65-58b5d6436902}">
      <Declaration><![CDATA[METHOD AllocateMemory
VAR_INPUT
	elementCount : DINT;
END_VAR
VAR
	newMemory : POINTER TO GENERIC_KEY_VALUE_PAIR;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newMemory := __NEW(BYTE, TO_UDINT(SIZEOF(GENERIC_KEY_VALUE_PAIR) * (_ArrayLength + elementCount)));

IF _ValueCount > 0 THEN
	Tc2_System.MEMCPY(newMemory, _Array, TO_UDINT(SIZEOF(GENERIC_KEY_VALUE_PAIR) * _ValueCount));
END_IF
 
IF _Array <> 0 THEN
	__DELETE(_Array);
END_IF

_ArrayLength := _ArrayLength + elementCount;

_Array := newMemory;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{2ba03c75-6849-4d3f-be0a-7ec3bb3723e7}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{16dbbed6-7d92-472a-aa65-fa307ed9f2d6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{6bbda434-8ecb-447c-84e2-06549ff7293c}">
      <Declaration><![CDATA[METHOD Clear
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _ValueCount - 1 DO
	_Array[i].Key.Release();			
	_Array[i].Value.Release();			
END_FOR	

_ValueCount := 0;
_ArrayLength := 0;

IF _Array <> 0 THEN
	__DELETE(_Array);	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ContainsGenericKey" Id="{40e3952b-e79c-43eb-86c3-ebc7badec7a9}">
      <Declaration><![CDATA[METHOD ContainsGenericKey : BOOL
VAR_INPUT
	key : GENERIC_VALUE;
	releaseKey : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ContainsGenericKey := FindKeyIndex(key.AsAnyType());

IF releaseKey THEN
	key.Release();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ContainsKey" Id="{59c7babd-f6ce-449c-a373-7928830c9806}">
      <Declaration><![CDATA[METHOD ContainsKey : BOOL
VAR_INPUT
	key : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ContainsKey := FindKeyIndex(key);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{ccfee7c1-4417-440d-a786-d1356b8baab2}">
      <Declaration><![CDATA[{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'monitoring' := 'call'}
PROPERTY Count : DINT]]></Declaration>
      <Get Name="Get" Id="{f9766b78-b24d-4be8-b437-f12592493950}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _ValueCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CreateEnumerator" Id="{5e86c797-07a7-40e5-a54a-edd93009219c}">
      <Declaration><![CDATA[METHOD CreateEnumerator : IEnumerator
VAR
	enumerator : POINTER TO DictionaryEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := __NEW(DictionaryEnumerator(dictionary := THIS^));

CreateEnumerator := enumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{bab70cb4-1255-41fe-9739-25af7a0667fe}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindKeyIndex" Id="{0002c577-30ed-4f40-b96a-46bdc85d8d43}" FolderPath="Serviceme mebers\">
      <Declaration><![CDATA[METHOD PROTECTED FindKeyIndex : BOOL
VAR_INPUT
	key : __SYSTEM.AnyType;
END_VAR
VAR_OUTPUT
	supposedIndex : DINT; 
END_VAR
VAR
	lastIndex : DINT;
	minIndex : DINT;
	maxIndex : DINT;
 
	keyComparer : ByteArrayComparer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ValueCount = 0 THEN
	RETURN;
END_IF

lastIndex := _ValueCount - 1;
minIndex := 0;
maxIndex := lastIndex;
supposedIndex := maxIndex / 2;

WHILE minIndex <= maxIndex DO
	CASE keyComparer.Compare(_Array[supposedIndex].Key.AsAnyType(), key) OF
		// assumed key equals to seached 
		COMPARISION_RESULT.FIRST_EQUAL_TO_SECOND:
			FindKeyIndex := TRUE;
			RETURN;

		// assumed key less than searched, move range to right
		COMPARISION_RESULT.FIRST_LESS_THAN_SECOND:
			minIndex := supposedIndex + 1;
			
		// assumed key greater than searched, move range to left	
		COMPARISION_RESULT.FIRST_GREATER_THAN_SECOND:
			maxIndex := supposedIndex - 1;
	END_CASE
	
	supposedIndex := minIndex + (maxIndex - minIndex) / 2;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetGenericKeyPosition" Id="{fbc764d5-47dd-4dd0-9946-aee3ff7c213c}">
      <Declaration><![CDATA[// Negative value returned if not found
METHOD GetGenericKeyPosition : DINT
VAR_INPUT
	key : GENERIC_VALUE;
	releaseKey : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT FindKeyIndex(key.AsAnyType(), supposedIndex => GetGenericKeyPosition) THEN
	GetGenericKeyPosition := -1;
END_IF

IF releaseKey THEN
	key.Release();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyPosition" Id="{bf8491de-1d63-4391-a1d1-4fca0379c7f2}">
      <Declaration><![CDATA[// Negative value returned if not found
METHOD GetKeyPosition : DINT
VAR_INPUT
	key : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT FindKeyIndex(key, supposedIndex => GetKeyPosition) THEN
	GetKeyPosition := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyValuePairByIndex" Id="{0291fd9f-109a-4434-bc5f-58af2ff03ea5}">
      <Declaration><![CDATA[METHOD GetKeyValuePairByIndex : REFERENCE TO GENERIC_KEY_VALUE_PAIR
VAR_INPUT
	index : DINT;
END_VAR
VAR
	argumentOutOfRangeException : ArgumentOutOfRangeException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index < 0 OR_ELSE index >= _ValueCount THEN
	argumentOutOfRangeException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'index', index);
END_IF

GetKeyValuePairByIndex REF= _Array[index];]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{6ffe1d1b-7166-4447-9a30-c1b0e902f1f1}">
      <Declaration><![CDATA[METHOD RemoveAt
VAR_INPUT
	index : DINT;
END_VAR
VAR
	argumentOutOfRangeException : ArgumentOutOfRangeException;

	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index < 0 OR_ELSE index >= _ValueCount THEN
	argumentOutOfRangeException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'index', index);
END_IF

_Array[index].Key.Release();
_Array[index].Value.Release();

IF index + 2 <= _ValueCount THEN
	FOR	i := index TO _ValueCount - 2 DO
		_Array[i] := _Array[i + 1];
	END_FOR			
END_IF
	
_Array[_ValueCount - 1].Key.Reset();
_Array[_ValueCount - 1].Value.Reset();

_ValueCount := _ValueCount - 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{de4fc0d3-020e-46c6-9a06-31b5ceb0b6d1}">
      <Declaration><![CDATA[METHOD Set : DINT
VAR_INPUT
	key : ANY;
	value : ANY;
	keyIsObject : BOOL := FALSE;
	valueIsObject : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Set := SetGeneric(GenericValueFactory.FromAnyType(key, keyIsObject, TRUE), GenericValueFactory.FromAnyType(value, valueIsObject, TRUE));]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetGeneric" Id="{94cffa05-38c9-49b3-9002-78aa4f07bd4c}">
      <Declaration><![CDATA[METHOD SetGeneric : DINT
VAR_INPUT
	key : GENERIC_VALUE;
	value : GENERIC_VALUE;
END_VAR
VAR
	genericKeyValuePair : GENERIC_KEY_VALUE_PAIR;
	index, i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[genericKeyValuePair.Key := key;
genericKeyValuePair.Value := value;

// if equal key found then we need to replace it
IF FindKeyIndex(genericKeyValuePair.Key.AsAnyType(), supposedIndex => index) THEN	
	_Array[index].Key.Release(); 
	_Array[index].Value.Release(); 
ELSE
	IF _ValueCount >= _ArrayLength THEN
		AllocateMemory(DefaultAllocationElemetCount);
	END_IF
		
	FOR i := _ValueCount - 1 TO index BY -1 DO	
		_Array[i + 1] := _Array[i];
	END_FOR

	_ValueCount := _ValueCount + 1;
END_IF

_Array[index] := genericKeyValuePair;

SetGeneric := index;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{2f97742f-3611-48c7-bd16-2c4c86e43b99}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{6d517caa-0175-488d-870c-e5bd38c78f1e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryGetValueByGenericKey" Id="{91c4f97e-734f-49f0-8ee6-5d284893d86b}">
      <Declaration><![CDATA[METHOD TryGetValueByGenericKey : BOOL
VAR_INPUT
	key : GENERIC_VALUE;
END_VAR
VAR_OUTPUT
	value : GENERIC_VALUE;
END_VAR
VAR
	index : DINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetValueByGenericKey := FindKeyIndex(key.AsAnyType(), supposedIndex => index);

IF TryGetValueByGenericKey THEN
	 value := _Array[index].Value;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetValueByKey" Id="{b4d9a44b-a711-4e6d-854a-ec939d35bf59}">
      <Declaration><![CDATA[METHOD TryGetValueByKey : BOOL
VAR_INPUT
	key : ANY;
END_VAR
VAR_OUTPUT
	value : GENERIC_VALUE;
END_VAR
VAR
	index : DINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetValueByKey := FindKeyIndex(key, supposedIndex => index);

IF TryGetValueByKey THEN
	 value := _Array[index].Value;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryRemoveByGenericKey" Id="{10b34f7a-b8be-47f1-a4a7-3163f5be0125}">
      <Declaration><![CDATA[METHOD TryRemoveByGenericKey : BOOL
VAR_INPUT
	key : GENERIC_VALUE;
	releaseKey : BOOL := TRUE;
END_VAR
VAR
	index : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryRemoveByGenericKey := FindKeyIndex(key.AsAnyType(), supposedIndex => index);
 
IF TryRemoveByGenericKey THEN
	RemoveAt(index);
END_IF

IF releaseKey THEN
	key.Release();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryRemoveByKey" Id="{26dd05f9-9b20-404d-aa51-3d260ab46bbe}">
      <Declaration><![CDATA[METHOD TryRemoveByKey : BOOL
VAR_INPUT
	key : ANY;
END_VAR
VAR
	index : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryRemoveByKey := FindKeyIndex(key, supposedIndex => index);
 
IF TryRemoveByKey THEN
	RemoveAt(index);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>