<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="SignalControlledIntersectionAutomationUnit" Id="{e9ec7903-2ab2-4010-be4e-4ef5635bf9d4}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK SignalControlledIntersectionAutomationUnit EXTENDS AutomationEngine.AutomationUnit<6>
VAR_OUTPUT	
	Mode : TRAFFIC_LIGHT_MODE;
	State : INTERSECTION_TRAFFIC_LIGHTS_STATE;

	{region "Devices"}
	
	WorkingModeSwitch : IODevices.DigitalInput(THIS^, CONTACT_TYPE.NORMALY_OPEN);
	
	BlinkingYellowModeSwitch : IODevices.DigitalInput(THIS^, CONTACT_TYPE.NORMALY_OPEN);
	
	TrafficLight1 : TrafficLight(THIS^);
	TrafficLight2 : TrafficLight(THIS^);
	TrafficLight3 : TrafficLight(THIS^);
	TrafficLight4 : TrafficLight(THIS^);
	
 	{endregion} 	
END_VAR
VAR	
	_ClassName : STRING := __POUNAME();

	_Devices : ARRAY [0..5] OF Automation.IDevice := [WorkingModeSwitch, BlinkingYellowModeSwitch, TrafficLight1, TrafficLight2, TrafficLight3, TrafficLight4];
	
	{region "Timers"}
	
	_RedGreenLightTimer : Timers.Timer;
	_YellowLightTimer : Timers.Timer;

	_FlashingYellowLightTimer : Timers.Timer;
	
	{endregion}
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service methods" Id="{3517f49b-3de7-41ac-beb3-8804a06efebe}">
      <Folder Name="Process mode" Id="{713fa236-42a2-4106-927e-6158b6cba414}" />
      <Folder Name="Start mode" Id="{4a1658bc-27da-4222-ab48-68e729dc5fc2}" />
    </Folder>
    <Property Name="ClassName" Id="{16f9e261-0b1e-4193-90f3-29f1e584c7f4}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{ca7e1d65-7c9f-4c02-a94a-9b4f3b9ad907}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Devices" Id="{36699c65-be63-4da2-a7de-3290b4253f23}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Devices : REFERENCE TO ARRAY [0.._DeviceCount - 1] OF Automation.IDevice]]></Declaration>
      <Get Name="Get" Id="{b1ec95c3-8cf3-4cca-83a1-2b79fba7867b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Devices REF= _Devices;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="executeTimers" Id="{05ad4ded-5d0c-437f-9cdc-db03156938f9}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE executeTimers]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Execute();
_YellowLightTimer.Execute();
_FlashingYellowLightTimer.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnInitialize" Id="{83a07a35-3dba-4af0-adbf-c1fc56d34bd4}">
      <Declaration><![CDATA[METHOD PROTECTED OnInitialize : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Interval := T#3S;
_YellowLightTimer.Interval := T#1S;

_FlashingYellowLightTimer.Interval := T#500MS;

OnInitialize := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRun" Id="{381c4a51-8ae0-43ad-9033-f9f34830df0b}">
      <Declaration><![CDATA[METHOD PROTECTED OnRun
VAR_IN_OUT CONSTANT
	executionContext : AutomationEngine.AUTOMATION_EXECUTION_CONTEXT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[executeTimers();

IF WorkingModeSwitch.Changed THEN
	IF WorkingModeSwitch.Value THEN
		IF BlinkingYellowModeSwitch.Value THEN
			startBlinkingYellowMode();
		ELSE
			startNormalMode();
		END_IF
	ELSE		
		startTurnOffMode();
	END_IF
	
	RETURN;
END_IF

IF WorkingModeSwitch.Value AND_THEN BlinkingYellowModeSwitch.Changed THEN
	IF BlinkingYellowModeSwitch.Value THEN
		startBlinkingYellowMode();
	ELSE
		startNormalMode();
	END_IF	
	
	RETURN;
END_IF

CASE Mode OF
	TRAFFIC_LIGHT_MODE.NORMAL:
		processNormalMode();
	
	TRAFFIC_LIGHT_MODE.BLINKING_YELLOW:
		processBlinkingYellowMode();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="processBlinkingYellowMode" Id="{876ffe93-bb7b-403c-8fe2-c9e8297b845d}" FolderPath="Service methods\Process mode\">
      <Declaration><![CDATA[METHOD PRIVATE processBlinkingYellowMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _FlashingYellowLightTimer.Done THEN
	IF State = INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW THEN
		State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_OFF;
	ELSE
		State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW;
	END_IF
	
	_FlashingYellowLightTimer.Start();
	
	updateTraficLights();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="processNormalMode" Id="{d57a14a8-fa22-45f7-af45-1d0d8f7c3ea4}" FolderPath="Service methods\Process mode\">
      <Declaration><![CDATA[METHOD processNormalMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED:
		IF _RedGreenLightTimer.Done THEN
			_YellowLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_YELLOW_AND_2_4_YELLOW;
			updateTraficLights();
		END_IF
 
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_YELLOW_AND_2_4_YELLOW:
		IF _YellowLightTimer.Done THEN
			_RedGreenLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_GREEN_AND_1_3_RED;
			updateTraficLights();
		END_IF
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_GREEN_AND_1_3_RED:
		IF _RedGreenLightTimer.Done THEN
			_YellowLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_YELLOW_AND_1_3_YELLOW;
			updateTraficLights();
		END_IF
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_YELLOW_AND_1_3_YELLOW:
		IF _YellowLightTimer.Done THEN
			_RedGreenLightTimer.Start();
			State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED;
			updateTraficLights();
		END_IF
	
	ELSE
		_RedGreenLightTimer.Start();
		State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED;
		updateTraficLights();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{6ebd35bd-5a2e-4232-92aa-aed3ec445272}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{9829f242-6577-490a-be4c-353a6ce5c3b3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="startBlinkingYellowMode" Id="{d871a09c-5e04-4e62-83e4-ace2545dc52d}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD PRIVATE startBlinkingYellowMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Stop();
_YellowLightTimer.Stop();

_FlashingYellowLightTimer.Start();

Mode := TRAFFIC_LIGHT_MODE.BLINKING_YELLOW;
State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startNormalMode" Id="{9b8b329b-1b57-4cee-b089-f89c32aed0fb}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD startNormalMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Start();
_YellowLightTimer.Stop();

_FlashingYellowLightTimer.Stop();

Mode := TRAFFIC_LIGHT_MODE.NORMAL;
State := INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="startTurnOffMode" Id="{5a29d151-be23-4229-8ee5-80d9552bb39d}" FolderPath="Service methods\Start mode\">
      <Declaration><![CDATA[METHOD PRIVATE startTurnOffMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RedGreenLightTimer.Stop();
_YellowLightTimer.Stop();

_FlashingYellowLightTimer.Stop();

Mode := TRAFFIC_LIGHT_MODE.OFF;
State := INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_OFF;

updateTraficLights();]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateTraficLights" Id="{a04b8447-bf36-479c-8c6f-6eb4990d6f8d}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE updateTraficLights]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_OFF:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.NO_COLOR);
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE.ALL_YELLOW, 
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_YELLOW_AND_2_4_YELLOW,
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_YELLOW_AND_1_3_YELLOW:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.YELLOW);
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._1_3_GREEN_AND_2_4_RED:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.RED);
	
	INTERSECTION_TRAFFIC_LIGHTS_STATE._2_4_GREEN_AND_1_3_RED:
		TrafficLight1.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight2.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
		TrafficLight3.SetLight(TRAFFIC_LIGHT_COLOR.RED);
		TrafficLight4.SetLight(TRAFFIC_LIGHT_COLOR.GREEN);
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>