<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="IncompartibleGenericValueTypeException" Id="{2a5dc715-cd1f-4ce2-9327-4f5541bcad20}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'enable_dynamic_creation'}	
{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK IncompartibleGenericValueTypeException EXTENDS GeneralException IMPLEMENTS IIncompartibleGenericValueTypeException
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{353676d2-1bd8-45e6-91d5-5a630137fd11}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{430d8c9d-c77f-4c10-9dc0-96aace5b6428}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clone" Id="{6778c213-d491-4b4b-b229-58c5eb8d7674}">
      <Declaration><![CDATA[METHOD Clone : IObject
VAR
	exceptionClone : POINTER TO IncompartibleGenericValueTypeException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[exceptionClone := __NEW(IncompartibleGenericValueTypeException);

FillClone(exceptionClone);

Clone := exceptionClone^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{52cecd28-1342-4b70-8845-0ca8ea2d7d3b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{2b135b7f-a6d0-4930-b56d-1c902b11bc21}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Throw" Id="{0d46e1a8-dfed-4ff2-a5b3-567ae4ff478d}">
      <Declaration><![CDATA[METHOD Throw
VAR_INPUT
	sourceNamespaceName : STRING;
	sourceClassName : STRING;
	sourceMethodName : STRING;
	sourcePosition : STRING;
	validatedObjectName : WSTRING;
	actualTypeClass : GENERIC_TYPE_CLASS;
	expectedTypeClass : GENERIC_TYPE_CLASS;
	fatal : BOOL := FALSE;
END_VAR
VAR
	stringBuilder : WideStringBuilder;
	message : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stringBuilder
	.AppendString("A value of an incorrect type was passed")
	.AppendStringIf(" to the '", validatedObjectName <> "")
	.AppendStringIf(validatedObjectName, validatedObjectName <> "")
	.AppendStringIf("'", validatedObjectName <> "")
	.AppendString(": actual type class is '")
	.AppendString255(TO_WSTRING(actualTypeClass))
	.AppendString("', expected type class is '")
	.AppendString255(TO_WSTRING(expectedTypeClass))
	.AppendString("'")
	.AssignToString(message);

InternalThrow(sourceNamespaceName, sourceClassName, sourceMethodName, sourcePosition, message, 0, fatal, 0);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>