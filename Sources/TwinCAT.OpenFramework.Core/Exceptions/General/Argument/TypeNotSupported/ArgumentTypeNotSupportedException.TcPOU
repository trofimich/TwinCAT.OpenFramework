<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ArgumentTypeNotSupportedException" Id="{70be0cc3-2d2a-41e4-a517-12fc32079b0e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'enable_dynamic_creation'}	
{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ArgumentTypeNotSupportedException EXTENDS GeneralException IMPLEMENTS IArgumentTypeNotSupportedException
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{b324b57f-066f-4cb6-b0ac-ec9d24afe8c8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{61c7bed7-5023-47b9-86ea-5957a1e30b10}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clone" Id="{46c54889-37ea-46c8-9aa0-acf43a681cd3}">
      <Declaration><![CDATA[METHOD Clone : IObject
VAR
	exceptionClone : POINTER TO ArgumentTypeNotSupportedException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[exceptionClone := __NEW(ArgumentTypeNotSupportedException);

FillClone(exceptionClone);

Clone := exceptionClone^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{e6a7413c-f3e8-4086-8370-46248199af7e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{61d6a2ea-1d21-4076-8c14-7090dd60a922}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Throw" Id="{82d8fa01-6199-47ad-8e53-39c23c88c3d9}">
      <Declaration><![CDATA[METHOD Throw
VAR_INPUT
	sourceNamespaceName : STRING;
	sourceClassName : STRING;
	sourceMethodName : STRING;
	sourcePosition : STRING;
	argumentName : STRING;
	argumentType : __SYSTEM.TYPE_CLASS;
	fatal : BOOL := FALSE;
END_VAR
VAR
	argumentTypeName : WSTRING;
	stringBuilder : WideStringBuilder;
	message : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[argumentTypeName := TO_WSTRING(argumentType);

stringBuilder
	.AppendString("Argument '")
	.Append(argumentName)
	.AppendString("' has not supported type '")
	.AppendString(argumentTypeName)
	.AppendString("' in method or function '");

AppendProgramOrganizationUnitFullName(stringBuilder, sourceNamespaceName, sourceClassName, sourceMethodName);

stringBuilder
	.AppendString("'")
	.AssignToString(message);

InternalThrow(sourceNamespaceName, sourceClassName, sourceMethodName, sourcePosition, message, 0, fatal, 0);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>