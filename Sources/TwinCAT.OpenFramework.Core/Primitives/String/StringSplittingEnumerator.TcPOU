<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StringSplittingEnumerator" Id="{39677a7e-6822-49fb-a976-fd077aac311a}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK StringSplittingEnumerator EXTENDS Object IMPLEMENTS IEnumerator
VAR_OUTPUT
	SourceString : POINTER TO STRING;
	SourceStringLength : UDINT;
	SourceStringSize : UDINT;
	Separator : STRING(255);
	SeparatorLength : UDINT;
	MaxCount : UDINT := 0;
	TrimEntries : BOOL := FALSE;
	RemoveEmptyEntries : BOOL := FALSE;	
END_VAR
VAR
	_ClassName : STRING := __POUNAME();

	_CurrentString : POINTER TO STRING;
	_CurrentStringLength : UDINT;
	_CurrentEntry : POINTER TO STRING;
	_CurrentEntrySize : UDINT;
	_EntryCount : UDINT; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{dc8168cb-a7bf-4d33-9f6c-41b2c6a729dd}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{451b3de0-abf2-482f-a7cd-159e1ec34840}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Current" Id="{578ddaf1-4d15-456a-9c92-6ba01ccaf901}">
      <Declaration><![CDATA[// Shows curent collection element
PROPERTY Current : REFERENCE TO GENERIC_VALUE]]></Declaration>
      <Get Name="Get" Id="{ff624da2-e0ce-48f6-a18a-67e4fe74d3a7}">
        <Declaration><![CDATA[VAR_INST
	genericValue : GENERIC_VALUE;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _CurrentEntry <> 0 AND_THEN _CurrentEntrySize > 0 THEN
	genericValue := GenericValueFactory.FromParts(GENERIC_TYPE_CLASS.TYPE_STRING, _CurrentEntry, _CurrentEntrySize, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.STORE_ORIGINAL_REFERENCE_AND_NOT_OWNS_MEMORY);
ELSE
	genericValue.Reset();
END_IF

Current REF= genericValue;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentEntry" Id="{3c87ffb4-1d5d-46d7-8e98-8f42eb9deaf3}">
      <Declaration><![CDATA[PROPERTY CurrentEntry : REFERENCE TO STRING
]]></Declaration>
      <Get Name="Get" Id="{df9fd113-3b9b-4abf-a069-25f1abcf0162}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _CurrentEntry <> 0 THEN
	CurrentEntry REF= _CurrentEntry^;	
END_IF ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{91c3c83f-b495-4483-9409-84eb69a852b9}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	(* if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _CurrentEntry <> 0 THEN
	__DELETE(_CurrentEntry);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{dd46f3d0-2251-42fe-acf7-cf970e2b2bc6}">
      <Declaration><![CDATA[METHOD INTERNAL Initialize
VAR_INPUT
	sourceString : POINTER TO STRING;
	separator : STRING(255);
	maxCount : UDINT;
	trimEntries : BOOL;
	removeEmptyEntries : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.SourceString := sourceString;
THIS^.SourceStringLength := StringHelper.InternalGetLength(sourceString);
THIS^.SourceStringSize := THIS^.SourceStringLength + StringHelper.CharSize; 
THIS^.Separator := separator;
THIS^.SeparatorLength := StringHelper.InternalGetLength(ADR(separator));
THIS^.MaxCount := maxCount;
THIS^.TrimEntries := trimEntries;
THIS^.RemoveEmptyEntries := removeEmptyEntries;

_CurrentString := THIS^.SourceString;

Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveNext" Id="{b4c28f78-8b1f-47b3-af5b-cb333bb9b6f3}">
      <Declaration><![CDATA[METHOD MoveNext : BOOL
VAR
	separatorPosition : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[START:

IF _CurrentString = 0 OR_ELSE _CurrentStringLength = 0 OR_ELSE Separator = '' OR_ELSE (MaxCount > 0 AND_THEN _EntryCount >= MaxCount) THEN
	RETURN;
END_IF

IF _CurrentEntry <> 0 THEN
	_CurrentEntrySize := 0;	
	__DELETE(_CurrentEntry);
END_IF

IF StringHelper.InternalFind(_CurrentString, _CurrentStringLength, ADR(Separator), SeparatorLength, position => separatorPosition) THEN
	_CurrentEntrySize := separatorPosition * StringHelper.CharSize;
	_CurrentEntry := __NEW(BYTE, _CurrentEntrySize);

	Tc2_System.MEMCPY(_CurrentEntry, _CurrentString, (separatorPosition - 1) * StringHelper.CharSize);
	Tc2_System.MEMSET(_CurrentEntry + ((separatorPosition - 1) * StringHelper.CharSize), 0, StringHelper.CharSize);

	_CurrentString := _CurrentString + ((separatorPosition - 1) * StringHelper.CharSize) + (SeparatorLength * StringHelper.CharSize);
	_CurrentStringLength := _CurrentStringLength - separatorPosition + 1 - SeparatorLength;
ELSE	
	_CurrentEntrySize := _CurrentStringLength + StringHelper.CharSize;	
	_CurrentEntry := __NEW(BYTE, _CurrentEntrySize);
	
	Tc2_System.MEMCPY(_CurrentEntry, _CurrentString, _CurrentStringLength + StringHelper.CharSize);
	
	_CurrentString := 0;
	_CurrentStringLength := 0;
END_IF

IF TrimEntries THEN
	StringHelper.TrimChar(_CurrentEntry^);
END_IF

IF RemoveEmptyEntries AND_THEN _CurrentEntry^ = '' THEN
	JMP START;
END_IF

_EntryCount := _EntryCount + 1;

MoveNext := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{eac5bc76-1c0c-415a-b31e-3c5597f64aa3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{2b679829-e2da-4785-aab9-24372420e1f5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{0c911c06-568e-4235-8bc3-600486eb4862}">
      <Declaration><![CDATA[METHOD Reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Tc2_System.MEMCPY(_CurrentString, SourceString, SourceStringSize);
_CurrentStringLength := SourceStringLength;
_CurrentEntry := 0;
_CurrentEntrySize := 0;
_EntryCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{07711580-08e7-4949-b5a3-b486d7b73972}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{80ff0b12-faeb-4d39-a7b6-5a5f5617c0d6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>