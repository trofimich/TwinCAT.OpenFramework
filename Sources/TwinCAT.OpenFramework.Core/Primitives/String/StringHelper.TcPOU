<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StringHelper" Id="{7aa7463a-7b84-4807-b00e-cbaa6fc59270}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'Direct call is not allowed'} 
PROGRAM StringHelper
VAR_INPUT CONSTANT
	CharSize : BYTE := 1;
	NewLine : STRING(1) := F_ToChr(10);
	Empty : STRING(0) := '';
END_VAR
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Any" Id="{8688dfc3-2927-467c-9f5b-91ce2217a978}" />
    <Folder Name="Append" Id="{7e7c80a5-b2b3-4398-aeb3-fcbeeedb95b0}" />
    <Folder Name="Replace" Id="{a7f2f348-7292-464d-8aaa-84a00bdb1d6c}" />
    <Folder Name="Service members" Id="{6eebbe56-ba8f-4c4e-a22c-3fcf35f9aa27}" />
    <Folder Name="Split" Id="{abd107b6-e51f-460b-baa2-99a9483990d2}" />
    <Folder Name="Trim" Id="{f20b62c4-34de-4080-969d-424865288d4e}" />
    <Method Name="AnyToString" Id="{b226cb15-ac0d-48f7-98b9-48ee0196d1ce}" FolderPath="Any\">
      <Declaration><![CDATA[METHOD AnyToString : STRING(255)
VAR_INPUT
	value : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AnyToString := InternalAnyToString(value);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendToTarget" Id="{7d3432ad-7058-4ce7-80d2-01c9d35ec6fb}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD AppendToTarget
VAR_INPUT
	targetString : ANY_STRING;
END_VAR
VAR_IN_OUT CONSTANT
	sourceString : STRING;
END_VAR
VAR
	stringTypeNotSupportedException : NotSupportedException;
	targetStringMemoryOverflowExcepton : TargetVariableMemoryOwerflowException;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(targetString.TypeClass)), TRUE);
END_IF

IF NOT InternalTryAppendToTarget(targetString, ADR(sourceString), 0, 0, 0, 0, 0, 0, 0, 0, 0) THEN
	targetStringMemoryOverflowExcepton.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'targetString', TO_ULINT(targetString.diSize)); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendToTarget255" Id="{b845707e-9f67-4676-b647-f64266f03b85}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD AppendToTarget255
VAR_INPUT
	targetString : ANY_STRING;
	sourceString1 : STRING(255);
	sourceString2 : STRING(255) := '';
	sourceString3 : STRING(255) := '';
	sourceString4 : STRING(255) := '';
	sourceString5 : STRING(255) := '';
	sourceString6 : STRING(255) := '';
	sourceString7 : STRING(255) := '';
	sourceString8 : STRING(255) := '';
	sourceString9 : STRING(255) := '';
	sourceString10 : STRING(255) := '';
END_VAR
VAR
	stringTypeNotSupportedException : NotSupportedException;
	targetStringMemoryOverflowExcepton : TargetVariableMemoryOwerflowException;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(targetString.TypeClass)), TRUE);
END_IF

IF NOT InternalTryAppendToTarget(targetString, ADR(sourceString1), ADR(sourceString2), ADR(sourceString3), ADR(sourceString4), ADR(sourceString5), ADR(sourceString6), ADR(sourceString7), ADR(sourceString8), ADR(sourceString9), ADR(sourceString10)) THEN
	targetStringMemoryOverflowExcepton.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'targetString', TO_ULINT(targetString.diSize)); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{81cda6c2-0106-408d-bf8b-7dd5b920c809}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{566edcc0-aa57-4ecd-95d3-18653d40dc60}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ConcatStrings255" Id="{833ffcb1-3f77-4b1a-908f-282a178d2bc7}">
      <Declaration><![CDATA[METHOD ConcatStrings255 : STRING(255)
VAR_INPUT
	string1 : STRING(255);
	string2 : STRING(255);
	string3 : STRING(255) := '';
	string4 : STRING(255) := '';
	string5 : STRING(255) := '';
	string6 : STRING(255) := '';
	string7 : STRING(255) := '';
	string8 : STRING(255) := '';
	string9 : STRING(255) := '';
	string10 : STRING(255) := '';
	string11 : STRING(255) := '';
	string12 : STRING(255) := '';
	string13 : STRING(255) := '';
	string14 : STRING(255) := '';
	string15 : STRING(255) := '';
	string16 : STRING(255) := '';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ConcatStrings255 := Tc2_Standard.CONCAT(string1, string2);

IF Tc2_Standard.LEN(string3) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string3);
END_IF

IF Tc2_Standard.LEN(string4) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string4);
END_IF

IF Tc2_Standard.LEN(string5) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string5);
END_IF

IF Tc2_Standard.LEN(string6) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string6);
END_IF

IF Tc2_Standard.LEN(string7) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string7);
END_IF

IF Tc2_Standard.LEN(string8) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string8);
END_IF

IF Tc2_Standard.LEN(string9) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string9);
END_IF

IF Tc2_Standard.LEN(string10) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string10);
END_IF

IF Tc2_Standard.LEN(string11) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string11);
END_IF

IF Tc2_Standard.LEN(string12) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string12);
END_IF

IF Tc2_Standard.LEN(string13) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string13);
END_IF

IF Tc2_Standard.LEN(string14) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string14);
END_IF

IF Tc2_Standard.LEN(string15) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string15);
END_IF

IF Tc2_Standard.LEN(string16) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.CONCAT(ConcatStrings255, string16);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateSplitter" Id="{74505d39-c9b2-47f5-a8a1-80fe0e3aaae8}" FolderPath="Split\">
      <Declaration><![CDATA[METHOD CreateSplitter : StringSplitter
VAR_INPUT
	sourceString : ANY_STRING;
	separator : STRING(255);
	maxCount : UDINT := 0;
	trimEntries : BOOL := FALSE;
	removeEmptyEntries : BOOL := FALSE;
END_VAR
VAR
	stringTypeNotSupportedException : NotSupportedException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sourceString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(sourceString.TypeClass)), TRUE);
END_IF

CreateSplitter.Initialize(sourceString.pValue, separator, maxCount, trimEntries, removeEmptyEntries);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{0c61da8f-b806-465e-b4f1-5bdbe54f1092}">
      <Declaration><![CDATA[METHOD Find : BOOL
VAR_IN_OUT CONSTANT
	stringToSearchIn : STRING;
	stringToFind : STRING;
END_VAR
VAR_OUTPUT
	position : UDINT;
END_VAR
VAR
	searchInStringLength : UDINT;
	stringToFindLength : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Find := InternalFind(ADR(stringToSearchIn), InternalGetLength(ADR(stringToSearchIn)), ADR(stringToFind), InternalGetLength(ADR(stringToFindLength)), position => position);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetActualSize" Id="{e8e8416f-8e42-44ac-ac9b-ab76e4a16eec}">
      <Declaration><![CDATA[METHOD GetActualSize : UDINT
VAR_IN_OUT CONSTANT
	value : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetActualSize := InternalGetLength(ADR(value)) + CharSize;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLength" Id="{a3dc2c45-cc1a-482d-b619-dbbdf1878690}">
      <Declaration><![CDATA[METHOD GetLength : UDINT
VAR_IN_OUT CONSTANT
	value : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetLength := InternalGetLength(ADR(value));]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalAnyToString" Id="{dbd6569e-fd5b-4765-a843-fc6bef815e68}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalAnyToString : STRING(255)
VAR_INPUT
	value : __System.AnyType;
END_VAR
VAR
	anyBool : POINTER TO BOOL;

	anyByte : POINTER TO BYTE;
	anyWord : POINTER TO WORD;
	anyDWord : POINTER TO LWORD;
	anyLWord : POINTER TO LWORD;
	
	anySInt : POINTER TO SINT;
	anyInt : POINTER TO INT;
	anyDInt : POINTER TO DINT;
	anyLInt : POINTER TO LINT;
	
	anyUSInt : POINTER TO USINT;
	anyUInt : POINTER TO UINT;
	anyUDInt : POINTER TO UDINT;
	anyULInt : POINTER TO ULINT;
	
	anyReal : POINTER TO REAL;
	anyLReal : POINTER TO LREAL;

	anyString : POINTER TO STRING(255);
	anyWString : POINTER TO WSTRING(255);
	
	anyTime : POINTER TO TIME;
	anyLTime : POINTER TO LTIME;
	anyDate : POINTER TO DATE;
	anyDateAndTime : POINTER TO DATE_AND_TIME;
	anyTimeOfDay : POINTER TO TOD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE value.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		anyBool := value.pValue;
		InternalAnyToString := TO_STRING(anyBool^);		
	
	__SYSTEM.TYPE_CLASS.TYPE_BIT:
		anyByte := value.pValue;
		IF anyByte^ > 0 THEN
			InternalAnyToString := '1';		
		ELSE
			InternalAnyToString := '0';		
		END_IF
	
	__SYSTEM.TYPE_CLASS.TYPE_BYTE:
		anyByte := value.pValue;
		InternalAnyToString := TO_STRING(anyByte^);		
	__SYSTEM.TYPE_CLASS.TYPE_WORD:
		anyWord := value.pValue;
		InternalAnyToString := TO_STRING(anyWord^);
	__SYSTEM.TYPE_CLASS.TYPE_DWORD:
		anyDWord := value.pValue;
		InternalAnyToString := TO_STRING(anyDWord^);
	__SYSTEM.TYPE_CLASS.TYPE_LWORD:
		anyLWord := value.pValue;
		InternalAnyToString := TO_STRING(anyLWord^);
		
	__SYSTEM.TYPE_CLASS.TYPE_SINT:
		anySInt := value.pValue;
		InternalAnyToString := TO_STRING(anySInt^);
	__SYSTEM.TYPE_CLASS.TYPE_INT:
		anyInt := value.pValue;
		InternalAnyToString := TO_STRING(anyInt^);		
	__SYSTEM.TYPE_CLASS.TYPE_DINT:
		anyDInt := value.pValue;
		InternalAnyToString := TO_STRING(anyDInt^);
	__SYSTEM.TYPE_CLASS.TYPE_LINT:
		anyLInt := value.pValue;
		InternalAnyToString := TO_STRING(anyLInt^);
		
	__SYSTEM.TYPE_CLASS.TYPE_USINT:
		anyUSInt := value.pValue;
		InternalAnyToString := TO_STRING(anyUSInt^);
	__SYSTEM.TYPE_CLASS.TYPE_UINT:
		anyUInt := value.pValue;
		InternalAnyToString := TO_STRING(anyUInt^);		
	__SYSTEM.TYPE_CLASS.TYPE_UDINT:
		anyUDInt := value.pValue;
		InternalAnyToString := TO_STRING(anyUDInt^);
	__SYSTEM.TYPE_CLASS.TYPE_ULINT:
		anyULInt := value.pValue;
		InternalAnyToString := TO_STRING(anyULInt^);

	__SYSTEM.TYPE_CLASS.TYPE_REAL:
		anyReal := value.pValue;
		InternalAnyToString := TO_STRING(anyReal^);
	__SYSTEM.TYPE_CLASS.TYPE_LREAL:
		anyLReal := value.pValue;
		InternalAnyToString := TO_STRING(anyLReal^);
	
	__SYSTEM.TYPE_CLASS.TYPE_STRING:
		anyString := value.pValue;
		InternalAnyToString := anyString^;
	__SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		anyWString := value.pValue;
		InternalAnyToString := TO_STRING(anyWString^);
	
	__SYSTEM.TYPE_CLASS.TYPE_TIME:
		anyTime := value.pValue;
		InternalAnyToString := TO_STRING(anyTime^);
	__SYSTEM.TYPE_CLASS.TYPE_LTIME:
		anyLTime := value.pValue;
		InternalAnyToString := TO_STRING(anyLTime^);
	__SYSTEM.TYPE_CLASS.TYPE_DATE:
		anyDate := value.pValue;
		InternalAnyToString := TO_STRING(anyDate^);
	__SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		anyDateAndTime := value.pValue;
		InternalAnyToString := TO_STRING(anyDateAndTime^);  
	__SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:
		anyTimeOfDay := value.pValue;
		InternalAnyToString := TO_STRING(anyTimeOfDay^);
	
	__SYSTEM.TYPE_CLASS.TYPE_POINTER, __SYSTEM.TYPE_CLASS.TYPE_REFERENCE:
		InternalAnyToString := Tc2_Utilities.PVOID_TO_HEXSTR(anyDate, 8, FALSE);		
	
	(*__SYSTEM.TYPE_CLASS.TYPE_SUBRANGE:
	__SYSTEM.TYPE_CLASS.TYPE_ENUM:
	__SYSTEM.TYPE_CLASS.TYPE_ARRAY:
	__SYSTEM.TYPE_CLASS.TYPE_PARAMS:
	__SYSTEM.TYPE_CLASS.TYPE_USERDEF:
	__SYSTEM.TYPE_CLASS.TYPE_NONE:
	__SYSTEM.TYPE_CLASS.TYPE_ANY:
	__SYSTEM.TYPE_CLASS.TYPE_ANYBIT:
	__SYSTEM.TYPE_CLASS.TYPE_ANYDATE:
	__SYSTEM.TYPE_CLASS.TYPE_ANYINT:
	__SYSTEM.TYPE_CLASS.TYPE_ANYNUM:
	__SYSTEM.TYPE_CLASS.TYPE_ANYREAL:
	__SYSTEM.TYPE_CLASS.TYPE_LAZY:
	__SYSTEM.TYPE_CLASS.TYPE_BITCONST:*)
	ELSE
		IF value.pValue <> 0 THEN
			InternalAnyToString := TO_STRING(value.pValue^); 
		ELSE
			InternalAnyToString := 'NULL';
		END_IF
END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalFind" Id="{5b6aff61-016c-4db4-94ed-cfbbb336515e}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalFind : BOOL
VAR_INPUT
	stringToSearchIn : POINTER TO STRING;
	stringToSearchInLength : UDINT;
	stringToFind : POINTER TO STRING;
	stringToFindLength : UDINT;
END_VAR
VAR_OUTPUT
	position : UDINT;
END_VAR
VAR	
	i : UDINT;
	memCoparisionResult : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stringToSearchInLength < stringToFindLength THEN
	RETURN;
END_IF

FOR i := 0 TO stringToSearchInLength - stringToFindLength DO
	IF Tc2_System.MEMCMP(stringToSearchIn + i, stringToFind, stringToFindLength * CharSize) = 0 THEN
		position := i + 1;
		InternalFind := TRUE;
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalGetLength" Id="{06d76460-e6eb-42be-8f6b-fb87a2b574a4}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalGetLength : UDINT
VAR_INPUT
	value : POINTER TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InternalGetLength := SEL(value = 0, Tc2_Utilities.LEN2(value), 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalReplaceInSource" Id="{0ac24766-5e3a-42f7-a2a0-58aa460f844f}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalReplaceInSource : BOOL
VAR_INPUT
	sourceString : __SYSTEM.AnyType;
	oldSubstring : POINTER TO STRING;
	newSubstring : POINTER TO STRING;
	maxReplacements : UINT;
	skipReplacements : UINT;
END_VAR
VAR_OUTPUT
	replacementCount : UINT;
END_VAR
VAR
	sourceStringMemorySize : UDINT;
	sourceStringLength : UDINT;

	handledString : POINTER TO STRING;
	handledStringLength : UDINT;
		
	oldSubstringLength : UDINT;
	newSubstringLength : UDINT;
	checkMemorySize : BOOL;	
	
	substringPosition : UDINT;

	skipCount : UINT;
	
	memFunctionResult : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sourceStringMemorySize := TO_UDINT(sourceString.diSize);
sourceStringLength := InternalGetLength(sourceString.pValue);

handledString := sourceString.pValue;
handledStringLength := sourceStringLength;

oldSubstringLength := InternalGetLength(oldSubstring);
newSubstringLength := InternalGetLength(newSubstring);
checkMemorySize := oldSubstringLength < newSubstringLength;

WHILE handledStringLength >= oldSubstringLength DO
	IF NOT InternalFind(handledString, handledStringLength / CharSize, oldSubstring, oldSubstringLength / CharSize, position => substringPosition) THEN
		EXIT;
	END_IF
	
	IF skipReplacements > 0 AND_THEN skipCount < skipReplacements THEN
		skipCount := skipCount + 1;

		handledString := handledString + oldSubstringLength + (substringPosition * CharSize) - CharSize;	
		handledStringLength := handledStringLength - oldSubstringLength - (substringPosition * CharSize) + CharSize;
		
		CONTINUE;		
	END_IF
	
	handledString := handledString + (substringPosition * CharSize) - CharSize;
	handledStringLength := handledStringLength - (substringPosition * CharSize) + CharSize;

	sourceStringLength := sourceStringLength + newSubstringLength - oldSubstringLength;
	
	IF checkMemorySize AND_THEN sourceStringLength + CharSize > sourceStringMemorySize THEN
		RETURN;
	END_IF
	
	IF oldSubstringLength <> newSubstringLength THEN
		memFunctionResult := Tc2_System.MEMMOVE(handledString + newSubstringLength, handledString + oldSubstringLength, handledStringLength - oldSubstringLength + CharSize);
		
		IF memFunctionResult < 1 THEN
			RETURN;			
		END_IF
		
		handledStringLength := handledStringLength + newSubstringLength - oldSubstringLength;
	END_IF
	
	memFunctionResult := Tc2_System.MEMCPY(handledString, newSubstring, newSubstringLength);

	IF memFunctionResult < 1 THEN
		RETURN;			
	END_IF
	
	replacementCount := replacementCount + 1;
	
	IF maxReplacements > 0 AND_THEN replacementCount>= maxReplacements THEN
		EXIT;
	END_IF

	handledString := handledString + newSubstringLength;	
	handledStringLength := handledStringLength - newSubstringLength;
END_WHILE

InternalReplaceInSource := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalTryAppendToTarget" Id="{96f09b6b-a3b9-4899-b746-36fdcd4d9236}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalTryAppendToTarget : BOOL
VAR_INPUT
	targetString : __SYSTEM.AnyType;
	sourceString1 : POINTER TO STRING;
	sourceString2 : POINTER TO STRING;
	sourceString3 : POINTER TO STRING;
	sourceString4 : POINTER TO STRING;
	sourceString5 : POINTER TO STRING;
	sourceString6 : POINTER TO STRING;
	sourceString7 : POINTER TO STRING;
	sourceString8 : POINTER TO STRING;
	sourceString9 : POINTER TO STRING;
	sourceString10 : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	RETURN;
END_IF

IF sourceString1 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString1) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString1, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString2 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString2) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString2, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString3 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString3) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString3, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString4 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString4) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString4, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString5 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString5) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString5, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString6 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString6) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString6, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString7 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString7) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString7, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString8 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString8) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString8, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString9 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString9) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString9, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE sourceString10 = 0 OR_ELSE Tc2_Utilities.LEN2(sourceString10) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.CONCAT2(targetString.pValue, sourceString10, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{475cd351-78e5-4557-baf1-9d5933c3fa2e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{2b015e66-fd97-4ebe-8516-bd91f7e0b822}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReplaceInSource" Id="{f06898de-32ea-4f51-b053-1b282cb73a8a}" FolderPath="Replace\">
      <Declaration><![CDATA[METHOD ReplaceInSource
VAR_INPUT
	sourceString : ANY_STRING;
END_VAR
VAR_IN_OUT CONSTANT
	oldSubstring : STRING;
	newSubstring : STRING;
END_VAR
VAR_INPUT
	maxReplacements : UINT := 0;
	skipReplacements : UINT := 0;
END_VAR
VAR_OUTPUT
	replacementCount : UINT;
END_VAR
VAR	
	stringTypeNotSupportedException : NotSupportedException;
	sourceStringMemoryOverflowExcepton : TargetVariableMemoryOwerflowException;
	
	replaceResult : BOOL; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sourceString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(sourceString.TypeClass)), TRUE);
END_IF

IF NOT InternalReplaceInSource(sourceString, ADR(oldSubstring), ADR(newSubstring), maxReplacements, skipReplacements, replacementCount => replacementCount) THEN
	sourceStringMemoryOverflowExcepton.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'sourceString', TO_UDINT(sourceString.diSize));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReplaceInSource255" Id="{f41fa253-7b57-4bb9-a052-ea59a6eb6bff}" FolderPath="Replace\">
      <Declaration><![CDATA[METHOD ReplaceInSource255
VAR_INPUT
	sourceString : ANY_STRING;
	oldSubstring : STRING(255);
	newSubstring : STRING(255);
	maxReplacements : UINT := 0;
	skipReplacements : UINT := 0;
END_VAR
VAR_OUTPUT
	replacementCount : UINT;
END_VAR
VAR	
	stringTypeNotSupportedException : NotSupportedException;
	sourceStringMemoryOverflowExcepton : TargetVariableMemoryOwerflowException;
	
	replaceResult : BOOL; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sourceString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(sourceString.TypeClass)), TRUE);
END_IF

IF NOT InternalReplaceInSource(sourceString, ADR(oldSubstring), ADR(newSubstring), maxReplacements, skipReplacements, replacementCount => replacementCount) THEN
	sourceStringMemoryOverflowExcepton.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'sourceString', TO_UDINT(sourceString.diSize));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StringPointerToAnyType" Id="{a10ef46f-9469-4b72-b2c7-fdc82174f321}">
      <Declaration><![CDATA[METHOD StringPointerToAnyType : __System.AnyType
VAR_INPUT
	value : POINTER TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringPointerToAnyType.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_STRING;
StringPointerToAnyType.pValue := value;
StringPointerToAnyType.diSize := TO_DINT(GetActualSize(value^));]]></ST>
      </Implementation>
    </Method>
    <Method Name="StringReferenceToAnyType" Id="{06b7793c-cb19-41ed-b05e-889daf02c80f}">
      <Declaration><![CDATA[METHOD StringReferenceToAnyType : __System.AnyType
VAR_INPUT
	value : REFERENCE TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringReferenceToAnyType.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_STRING;
StringReferenceToAnyType.pValue := ADR(value);
StringReferenceToAnyType.diSize := TO_DINT(GetActualSize(value));]]></ST>
      </Implementation>
    </Method>
    <Method Name="StringToAnyType" Id="{ad63b85b-ddb5-45f3-baef-6d6cd1517473}" FolderPath="Any\">
      <Declaration><![CDATA[METHOD StringToAnyType : __SYSTEM.AnyType
VAR_IN_OUT CONSTANT
	value : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringToAnyType.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_STRING;
StringToAnyType.pValue := ADR(value);
StringToAnyType.diSize := TO_DINT(GetActualSize(value));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrimChar" Id="{62b24a6d-bbc4-486f-b32e-31180d926835}" FolderPath="Trim\">
      <Declaration><![CDATA[METHOD TrimChar
VAR_IN_OUT
	stringToTrim : STRING;
END_VAR
VAR_INPUT
	trimMode : TRIM_MODE := TRIM_MODE.LEFT_AND_RIGHT;
	trimChar : STRING(1) := ' ';
END_VAR
VAR
	trimCharArray : ARRAY [0..0] OF STRING(1);	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[trimCharArray[0] := trimChar;

TrimChars(stringToTrim, trimMode, trimCharArray);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrimChars" Id="{f8f9620e-29b0-4754-aeb8-6e676ec3c2d0}" FolderPath="Trim\">
      <Declaration><![CDATA[METHOD TrimChars
VAR_IN_OUT
	stringToTrim : STRING;
END_VAR
VAR_INPUT
	trimMode : TRIM_MODE := TRIM_MODE.LEFT_AND_RIGHT;
END_VAR
VAR_IN_OUT CONSTANT
	trimChars : ARRAY [*] OF STRING(1);	
END_VAR
VAR
	stringLength : UDINT;
	stringData : POINTER TO BYTE;
	trimCharData : POINTER TO BYTE;
	
	originalCharIndex : UDINT;
	trimCharIndex : UDINT;
	trimCharCount : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stringData := ADR(stringToTrim);
stringLength := InternalGetLength(stringData);

IF stringLength < 1 THEN
	RETURN;
END_IF

IF trimMode = TRIM_MODE.LEFT_AND_RIGHT OR_ELSE trimMode = TRIM_MODE.LEFT THEN
	trimCharCount := 0;
	
	FOR originalCharIndex := 0 TO stringLength - 1 BY 1 DO
		FOR trimCharIndex := TO_UDINT(LOWER_BOUND(trimChars, 1)) TO TO_UDINT(UPPER_BOUND(trimChars, 1)) DO
			trimCharData := ADR(trimChars[trimCharIndex]);
			
			IF stringData[originalCharIndex] = trimCharData^ THEN
				trimCharCount := trimCharCount + 1;
				EXIT;
			END_IF
		END_FOR
		
		IF trimCharCount <> originalCharIndex + 1 THEN
			EXIT;
		END_IF
	END_FOR

	IF trimCharCount > 0 THEN
		stringLength := stringLength - trimCharCount;
		
		Tc2_System.MEMCPY(stringData, stringData + (trimCharCount * CharSize), (stringLength * CharSize) + CharSize);		
	END_IF
END_IF

IF stringLength < 1 THEN
	RETURN;
END_IF

IF trimMode = TRIM_MODE.LEFT_AND_RIGHT OR_ELSE trimMode = TRIM_MODE.RIGHT THEN
	trimCharCount := 0;
	
	FOR originalCharIndex := stringLength - 1 TO 0 BY -1 DO
		FOR trimCharIndex := TO_UDINT(LOWER_BOUND(trimChars, 1)) TO TO_UDINT(UPPER_BOUND(trimChars, 1)) DO
			trimCharData := ADR(trimChars[trimCharIndex]);
			
			IF stringData[originalCharIndex] = trimCharData^ THEN
				trimCharCount := trimCharCount + 1;
				EXIT;
			END_IF
		END_FOR
		
		IF trimCharCount <> stringLength - originalCharIndex THEN
			EXIT;
		END_IF
	END_FOR

	IF trimCharCount > 0 THEN
		stringLength := stringLength - trimCharCount;
		
		Tc2_System.MEMSET(stringData + (stringLength * CharSize), 0, CharSize);		
	END_IF	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAppendToTarget" Id="{bf1d041e-2745-49ca-b076-368f2e842cc8}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD TryAppendToTarget : BOOL
VAR_INPUT
	targetString : ANY_STRING;
END_VAR
VAR_IN_OUT CONSTANT
	sourceString : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryAppendToTarget := InternalTryAppendToTarget(targetString, ADR(sourceString), 0, 0, 0, 0, 0, 0, 0, 0, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAppendToTarget255" Id="{9c82266a-bb32-451c-9763-5118bd999fda}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD TryAppendToTarget255 : BOOL
VAR_INPUT
	targetString : ANY_STRING;
	sourceString1 : STRING(255);
	sourceString2 : STRING(255) := '';
	sourceString3 : STRING(255) := '';
	sourceString4 : STRING(255) := '';
	sourceString5 : STRING(255) := '';
	sourceString6 : STRING(255) := '';
	sourceString7 : STRING(255) := '';
	sourceString8 : STRING(255) := '';
	sourceString9 : STRING(255) := '';
	sourceString10 : STRING(255) := '';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryAppendToTarget255 := InternalTryAppendToTarget(targetString, ADR(sourceString1), ADR(sourceString2), ADR(sourceString3), ADR(sourceString4), ADR(sourceString5), ADR(sourceString6), ADR(sourceString7), ADR(sourceString8), ADR(sourceString9), ADR(sourceString10));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCreateSplitter" Id="{34df4a0d-a862-4e0c-8436-c7e6b40e8278}" FolderPath="Split\">
      <Declaration><![CDATA[METHOD TryCreateSplitter : BOOL
VAR_INPUT
	sourceString : ANY_STRING;
	separator : STRING(255);
	maxCount : UDINT := 0;
	trimEntries : BOOL := FALSE;
	removeEmptyEntries : BOOL := FALSE;
END_VAR
VAR_OUTPUT
	splitter : StringSplitter;
END_VAR
VAR
	stringTypeNotSupportedException : NotSupportedException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sourceString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	RETURN;
END_IF

splitter.Initialize(sourceString.pValue, separator, maxCount, trimEntries, removeEmptyEntries);

TryCreateSplitter := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryReplaceInSource" Id="{6cd9fde4-681b-4169-adb0-283364fff827}" FolderPath="Replace\">
      <Declaration><![CDATA[METHOD TryReplaceInSource : BOOL
VAR_INPUT
	sourceString : ANY_STRING;
END_VAR
VAR_IN_OUT CONSTANT
	oldSubstring : STRING;
	newSubstring : STRING;
END_VAR
VAR_INPUT
	maxReplacements : UINT := 0;
	skipReplacements : UINT := 0;
END_VAR
VAR_OUTPUT
	replacementCount : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sourceString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	RETURN;
END_IF

TryReplaceInSource := InternalReplaceInSource(sourceString, ADR(oldSubstring), ADR(newSubstring), maxReplacements, skipReplacements, replacementCount => replacementCount);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryReplaceInSource255" Id="{9f1f7515-63df-42e0-8ebb-d9a7a98ddbf5}" FolderPath="Replace\">
      <Declaration><![CDATA[METHOD TryReplaceInSource255 : BOOL
VAR_INPUT
	sourceString : ANY_STRING;
	oldSubstring : STRING(255);
	newSubstring : STRING(255);
	maxReplacements : UINT := 0;
	skipReplacements : UINT := 0;
END_VAR
VAR_OUTPUT
	replacementCount : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sourceString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	RETURN;
END_IF

TryReplaceInSource255 := InternalReplaceInSource(sourceString, ADR(oldSubstring), ADR(newSubstring), maxReplacements, skipReplacements, replacementCount => replacementCount);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>