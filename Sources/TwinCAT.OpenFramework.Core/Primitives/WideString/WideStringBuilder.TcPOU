<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="WideStringBuilder" Id="{c7a1cf62-255a-4525-ad36-b824beb130eb}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'Direct call is not allowed'} 
FUNCTION_BLOCK WideStringBuilder EXTENDS Object
VAR CONSTANT
	STRING_CHAR_SIZE : BYTE := 2;
END_VAR
VAR
	_ClassName : STRING := __POUNAME();

	_String : POINTER TO WSTRING;
	_Length : UDINT;
	_Capacity : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service members" Id="{9857c13e-06aa-4399-9488-6a58a1b6e6a8}" />
    <Method Name="Append" Id="{6f3cbb3e-fb01-46b8-b89e-0f2b1d1d3fe5}">
      <Declaration><![CDATA[METHOD Append : REFERENCE TO WideStringBuilder
VAR_INPUT
	value : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[InternalAppend(value);

Append REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendIf" Id="{1027bfdc-7c63-46bc-8795-3097e5694098}">
      <Declaration><![CDATA[METHOD AppendIf : REFERENCE TO WideStringBuilder
VAR_INPUT
	value : ANY;
	condition : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF condition THEN
	InternalAppend(value);
END_IF

AppendIf REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendString" Id="{05b18936-609a-4892-bda6-5361d77d0a41}">
      <Declaration><![CDATA[METHOD AppendString : REFERENCE TO WideStringBuilder
VAR_IN_OUT CONSTANT
	value : WSTRING;
END_VAR
VAR
	valueDescriptor : __SYSTEM.AnyType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[valueDescriptor.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_WSTRING;
valueDescriptor.pValue := ADR(value);
valueDescriptor.diSize := 2 * TO_DINT(Tc2_Utilities.WLEN2(ADR(value))) + 2;

InternalAppend(valueDescriptor);

AppendString REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendStringIf" Id="{0373130c-990c-40b3-b6a5-31b35f0c79b7}">
      <Declaration><![CDATA[METHOD AppendStringIf : REFERENCE TO WideStringBuilder
VAR_IN_OUT CONSTANT
	value : WSTRING;
END_VAR
VAR_INPUT
	condition : BOOL;
END_VAR
VAR
	valueDescriptor : __SYSTEM.AnyType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF condition THEN
	valueDescriptor.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_WSTRING;
	valueDescriptor.pValue := ADR(value);
	valueDescriptor.diSize := 2 * TO_DINT(Tc2_Utilities.WLEN2(ADR(value))) + 2;
	
	InternalAppend(valueDescriptor);
END_IF

AppendStringIf REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssignToString" Id="{4e181416-d833-48b8-b605-97d9ed4518a3}">
      <Declaration><![CDATA[METHOD AssignToString : BOOL
VAR_INPUT
	targetString : ANY_STRING;
END_VAR
VAR
	//exceptionFactory : ExceptionFactory(__POUNAME(), ClassName, CurrentNamespace.Name);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_WSTRING THEN
	//exceptionFactory.ThrowException(__POSITION(), "Invalid string type, should be WSTRING");
END_IF

IF targetString.diSize < TO_DINT(_Length + STRING_CHAR_SIZE) THEN
	//exceptionFactory.ThrowException(__POSITION(), WStringHelper.Concat5("Target string size is ", TO_WSTRING(targetString.diSize), " bytes, but built string is ", TO_WSTRING(_Length + STRING_CHAR_SIZE), " bytes"));
END_IF

AssignToString := Tc2_Utilities.WSTRNCPY(targetString.pValue, _String, TO_UDINT(targetString.diSize));]]></ST>
      </Implementation>
    </Method>
    <Property Name="Capacity" Id="{566ddd93-32fa-48ab-976d-1e9fdb82325e}">
      <Declaration><![CDATA[PROPERTY Capacity : UDINT]]></Declaration>
      <Get Name="Get" Id="{66b8ca6d-f87a-416b-ac7a-3b57e4e78287}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Capacity := _Capacity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ClassName" Id="{20db3583-02f9-493d-96b4-447b8007a2cd}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING
]]></Declaration>
      <Get Name="Get" Id="{df1a47fe-9ca7-4256-ad0f-1c4235f9f5d3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{1277440b-361c-4cfe-b957-700fa5da93d9}">
      <Declaration><![CDATA[METHOD Clear : REFERENCE TO WideStringBuilder
VAR_INPUT
	releaseMemory : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Length := 0;

IF _Capacity > 0 THEN
	IF releaseMemory THEN
		__DELETE(_String);	
		_Capacity := 0;	
	ELSE
		Tc2_System.MEMSET(_String, 0, StringMaxSize);
	END_IF	
END_IF

Clear REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearIf" Id="{c57c2045-0bf2-4101-bf48-28fb50ecc9b2}">
      <Declaration><![CDATA[METHOD ClearIf : REFERENCE TO WideStringBuilder
VAR_INPUT
	condition : BOOL;
	releaseMemory : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF condition THEN
	Clear(releaseMemory);
END_IF

ClearIf REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{1c72be94-5d9c-4cd8-b16c-b46c483f30d8}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Clear(TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalAppend" Id="{1fbc2ca2-a0a0-454f-989f-7506cc4419b4}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PROTECTED InternalAppend 
VAR_INPUT
	value : REFERENCE TO __System.AnyType;
END_VAR
VAR
	stringToAppend : WSTRING(255);	
	stringToAppendLength : UDINT;
	newString : POINTER TO BYTE;
	newCapacity : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stringToAppend := WideStringHelper.InternalAnyToString(value);

stringToAppendLength := TO_UDINT(Tc2_Standard.WLEN(stringToAppend));

IF _Capacity = 0 OR_ELSE _Length + stringToAppendLength > _Capacity THEN
	IF _Length + stringToAppendLength - _Capacity > 80 THEN
		newCapacity := _Length + stringToAppendLength;
	ELSE
		newCapacity := _Length + 80;
	END_IF
	
	newString := __NEW(BYTE, (STRING_CHAR_SIZE + (newCapacity * STRING_CHAR_SIZE)));
	
	IF _String <> 0 THEN
		Tc2_Utilities.WSTRNCPY(newString, _String, STRING_CHAR_SIZE + (newCapacity * STRING_CHAR_SIZE));
		
		__DELETE(_String);
	END_IF
	
	_String := newString;
	_Capacity := newCapacity;
END_IF

Tc2_Utilities.WCONCAT2(_String, ADR(stringToAppend), _String, StringMaxSize);
_Length := _Length + stringToAppendLength;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{f44e042f-8f29-471a-9ef9-ab3e33854f0d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{73fa001e-d1b4-468f-a5a5-d3c56f655251}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StringAddress" Id="{858dcd75-d244-48e4-980b-ff3fd4b3facf}">
      <Declaration><![CDATA[PROPERTY StringAddress : POINTER TO WSTRING]]></Declaration>
      <Get Name="Get" Id="{9c81bde3-a19a-4234-8bbe-e8481d4a7fa7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StringAddress := _String;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StringLength" Id="{3686e099-7543-4358-b6da-3e471edb0757}">
      <Declaration><![CDATA[PROPERTY StringLength : UDINT]]></Declaration>
      <Get Name="Get" Id="{c7782d42-74b2-444f-aa16-52cfc1307ef4}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StringLength := _Length;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StringMaxSize" Id="{3377ac1d-7c20-45ab-8c1c-39e9c22c997d}">
      <Declaration><![CDATA[PROPERTY StringMaxSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{2b34575e-c81e-4c2a-bcf3-09b30a9d7fc4}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StringMaxSize := STRING_CHAR_SIZE + (STRING_CHAR_SIZE * _Capacity);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StringRealSize" Id="{e918c498-f1c8-4b40-b6fb-8d6cb3be2fcd}">
      <Declaration><![CDATA[PROPERTY StringRealSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{1dbe53b6-53fd-40e7-8d22-919ac376dfee}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StringRealSize := STRING_CHAR_SIZE + (STRING_CHAR_SIZE * _Length);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ToString255" Id="{cc09b713-f90b-4407-898c-2b9cb264aafe}">
      <Declaration><![CDATA[METHOD ToString255 : WSTRING(255)]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Length > 0 THEN
	Tc2_Utilities.WSTRNCPY(ADR(ToString255), _String, SIZEOF(ToString255));
END_IF ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>