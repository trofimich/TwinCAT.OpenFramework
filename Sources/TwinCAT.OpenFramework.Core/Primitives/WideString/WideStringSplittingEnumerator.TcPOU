<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="WideStringSplittingEnumerator" Id="{cd3c3f30-cd38-4659-b9c4-859e877b4baf}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK WideStringSplittingEnumerator EXTENDS Object IMPLEMENTS IEnumerator
VAR_OUTPUT
	SourceString : POINTER TO WSTRING;
	SourceStringLength : UDINT;
	SourceStringSize : UDINT;
	Separator : WSTRING(255);
	SeparatorLength : UDINT;
	MaxCount : UDINT := 0;
	TrimEntries : BOOL := FALSE;
	RemoveEmptyEntries : BOOL := FALSE;	
END_VAR
VAR
	_ClassName : STRING := __POUNAME();
	_CurrentString : POINTER TO WSTRING;
	_CurrentStringLength : UDINT;
	_CurrentEntry : POINTER TO WSTRING;
	_CurrentEntrySize : UDINT;
	_EntryCount : UDINT; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{eb782797-fea3-47ac-a8db-cbfc72d737be}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{b0de37f0-477e-4092-a2e4-1e3cd48b7e08}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Current" Id="{a33a22ac-5669-4623-936f-19fdd6a797a9}">
      <Declaration><![CDATA[// Shows curent collection element
PROPERTY Current : REFERENCE TO GENERIC_VALUE]]></Declaration>
      <Get Name="Get" Id="{b343fd78-0841-4c7a-bd2d-6b447815e0a9}">
        <Declaration><![CDATA[VAR_INST
	genericValue : GENERIC_VALUE;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _CurrentEntry <> 0 AND_THEN _CurrentEntrySize > 0 THEN
	genericValue := GenericValueFactory.FromParts(GENERIC_TYPE_CLASS.TYPE_STRING, _CurrentEntry, _CurrentEntrySize, GENERIC_MEMORY_MANAGEMENT_BEHAVIOR.STORE_ORIGINAL_REFERENCE_AND_NOT_OWNS_MEMORY);
ELSE
	genericValue.Reset();
END_IF

Current REF= genericValue;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentEntry" Id="{f4b2ce05-56f1-4a2a-ab8a-2d63ad7de743}">
      <Declaration><![CDATA[PROPERTY CurrentEntry : REFERENCE TO WSTRING
]]></Declaration>
      <Get Name="Get" Id="{859e54d6-429d-47fd-a753-3e8e965a0bc3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _CurrentEntry <> 0 THEN
	CurrentEntry REF= _CurrentEntry^;	
END_IF ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{d23faa7c-5379-472c-b75f-ff9aa468fe1d}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	(* if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _CurrentEntry <> 0 THEN
	__DELETE(_CurrentEntry);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{efd8c83e-84af-4552-92cf-49864ca5b37a}">
      <Declaration><![CDATA[METHOD INTERNAL Initialize
VAR_INPUT
	sourceString : POINTER TO WSTRING;
	separator : WSTRING(255);
	maxCount : UDINT;
	trimEntries : BOOL;
	removeEmptyEntries : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.SourceString := sourceString;
THIS^.SourceStringLength := WideStringHelper.InternalGetLength(sourceString);
THIS^.SourceStringSize := THIS^.SourceStringLength + StringHelper.CharSize; 
THIS^.Separator := separator;
THIS^.SeparatorLength := WideStringHelper.InternalGetLength(ADR(separator));
THIS^.MaxCount := maxCount;
THIS^.TrimEntries := trimEntries;
THIS^.RemoveEmptyEntries := removeEmptyEntries;

_CurrentString := THIS^.SourceString;

Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveNext" Id="{6f4c66bb-70e6-443d-b741-5ac7aedc0a0c}">
      <Declaration><![CDATA[METHOD MoveNext : BOOL
VAR
	separatorPosition : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[START:

IF _CurrentString = 0 OR_ELSE _CurrentStringLength = 0 OR_ELSE Separator = "" OR_ELSE (MaxCount > 0 AND_THEN _EntryCount >= MaxCount) THEN
	RETURN;
END_IF

IF _CurrentEntry <> 0 THEN
	_CurrentEntrySize := 0;
	
	__DELETE(_CurrentEntry);
END_IF

IF WideStringHelper.InternalFind(_CurrentString, _CurrentStringLength, ADR(Separator), SeparatorLength, position => separatorPosition) THEN
	_CurrentEntrySize := separatorPosition * WideStringHelper.CharSize;
	_CurrentEntry := __NEW(BYTE, _CurrentEntrySize);

	Tc2_System.MEMCPY(_CurrentEntry, _CurrentString, (separatorPosition - 1) * WideStringHelper.CharSize);
	Tc2_System.MEMSET(_CurrentEntry + ((separatorPosition - 1) * WideStringHelper.CharSize), 0, WideStringHelper.CharSize);

	_CurrentString := _CurrentString + ((separatorPosition - 1) * WideStringHelper.CharSize) + (SeparatorLength * WideStringHelper.CharSize);
	_CurrentStringLength := _CurrentStringLength - separatorPosition + 1 - SeparatorLength;
ELSE	
	_CurrentEntrySize := _CurrentStringLength + WideStringHelper.CharSize;	
	_CurrentEntry := __NEW(BYTE, _CurrentEntrySize);
	
	Tc2_System.MEMCPY(_CurrentEntry, _CurrentString, _CurrentStringLength + WideStringHelper.CharSize);
	
	_CurrentString := 0;
	_CurrentStringLength := 0;
END_IF

IF TrimEntries THEN
	WideStringHelper.TrimChar(_CurrentEntry^);
END_IF

IF RemoveEmptyEntries AND_THEN _CurrentEntry^ = "" THEN
	JMP START;
END_IF

_EntryCount := _EntryCount + 1;

MoveNext := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{606a15c2-aeca-432d-8e3c-a9852072d07e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{8d26a153-dac4-4ce7-b323-94027a2445d2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{6ff5f895-f51d-4f1c-b79b-00ce34e370cc}">
      <Declaration><![CDATA[METHOD Reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Tc2_System.MEMCPY(_CurrentString, SourceString, SourceStringSize);
_CurrentStringLength := SourceStringLength;
_CurrentEntry := 0;
_CurrentEntrySize := 0;
_EntryCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{e6e7cb18-6bbe-4fa5-8b86-e60c4005ed50}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{6cd74453-76de-45a9-9aff-7d3ec88a250f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>