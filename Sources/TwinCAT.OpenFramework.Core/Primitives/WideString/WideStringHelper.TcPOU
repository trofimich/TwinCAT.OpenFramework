<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="WideStringHelper" Id="{a08ca29b-58ac-448f-9daf-cbacb656ba72}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'Direct call is not allowed'} 
PROGRAM WideStringHelper
VAR_INPUT CONSTANT
	NewLine : WSTRING(1) := TO_WSTRING(Tc2_System.F_ToCHR(10)); 
	Empty : WSTRING(0) := "";
END_VAR
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Append" Id="{0bb8b256-f491-4a2d-9a6b-2432088dbd33}" />
    <Folder Name="Service members" Id="{9fab643e-bbff-4a9b-947d-8a7d558c89e1}" />
    <Method Name="AnyToString" Id="{5eddfbb1-a4c4-4bf3-95de-4ec7342266cd}">
      <Declaration><![CDATA[METHOD AnyToString : WSTRING(255)
VAR_INPUT
	value : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//WideStringHelper.AppendToTarget(AnyToString, CurrentNamespace.);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendToTarget" Id="{ed2085a1-77d7-4a38-8551-436ba13822e3}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD AppendToTarget
VAR_INPUT
	targetString : ANY_STRING;
END_VAR
VAR_IN_OUT CONSTANT
	sourceString : WSTRING;
END_VAR
VAR
	stringTypeNotSupportedException : NotSupportedException;
	targetStringMemoryOverflowExcepton : TargetVariableMemoryOwerflowException;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_WSTRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(targetString.TypeClass)), TRUE);
END_IF

IF NOT InternalTryAppendToTarget(targetString, ADR(sourceString), 0, 0, 0, 0, 0, 0, 0, 0, 0) THEN
	targetStringMemoryOverflowExcepton.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'targetString', TO_ULINT(targetString.diSize)); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendToTarget255" Id="{ccf916ac-f329-40a8-9de1-90c04294dea5}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD AppendToTarget255
VAR_INPUT
	targetString : ANY_STRING;
	sourceString1 : WSTRING(255);
	sourceString2 : WSTRING(255) := "";
	sourceString3 : WSTRING(255) := "";
	sourceString4 : WSTRING(255) := "";
	sourceString5 : WSTRING(255) := "";
	sourceString6 : WSTRING(255) := "";
	sourceString7 : WSTRING(255) := "";
	sourceString8 : WSTRING(255) := "";
	sourceString9 : WSTRING(255) := "";
	sourceString10 : WSTRING(255) := "";
END_VAR
VAR
	stringTypeNotSupportedException : NotSupportedException;
	targetStringMemoryOverflowExcepton : TargetVariableMemoryOwerflowException;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_WSTRING THEN
	stringTypeNotSupportedException.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), Tc2_Utilities.WCONCAT("Not supported type ", TO_WSTRING(targetString.TypeClass)), TRUE);
END_IF

IF NOT InternalTryAppendToTarget(targetString, ADR(sourceString1), ADR(sourceString2), ADR(sourceString3), ADR(sourceString4), ADR(sourceString5), ADR(sourceString6), ADR(sourceString7), ADR(sourceString8), ADR(sourceString9), ADR(sourceString10)) THEN
	targetStringMemoryOverflowExcepton.Throw(NamespaceName, ClassName, __POUNAME(), __POSITION(), 'targetString', TO_ULINT(targetString.diSize)); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{1a6c82de-d589-49d7-9c77-f4f624ad8685}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{9690cba0-2d05-4c7a-ad00-db2bf2465f2d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ConcatStrings255" Id="{8dba526b-4d55-4f06-81f2-ed0ad34ce538}">
      <Declaration><![CDATA[METHOD ConcatStrings255 : WSTRING(255)
VAR_INPUT
	string1 : WSTRING(255);
	string2 : WSTRING(255);
	string3 : WSTRING(255) := "";
	string4 : WSTRING(255) := "";
	string5 : WSTRING(255) := "";
	string6 : WSTRING(255) := "";
	string7 : WSTRING(255) := "";
	string8 : WSTRING(255) := "";
	string9 : WSTRING(255) := "";
	string10 : WSTRING(255) := "";
	string11 : WSTRING(255) := "";
	string12 : WSTRING(255) := "";
	string13 : WSTRING(255) := "";
	string14 : WSTRING(255) := "";
	string15 : WSTRING(255) := "";
	string16 : WSTRING(255) := "";
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ConcatStrings255 := Tc2_Standard.WCONCAT(string1, string2);

IF Tc2_Standard.WLEN(string3) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string3);
END_IF

IF Tc2_Standard.WLEN(string4) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string4);
END_IF

IF Tc2_Standard.WLEN(string5) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string5);
END_IF

IF Tc2_Standard.WLEN(string6) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string6);
END_IF

IF Tc2_Standard.WLEN(string7) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string7);
END_IF

IF Tc2_Standard.WLEN(string8) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string8);
END_IF

IF Tc2_Standard.WLEN(string9) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string9);
END_IF

IF Tc2_Standard.WLEN(string10) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string10);
END_IF

IF Tc2_Standard.WLEN(string11) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string11);
END_IF

IF Tc2_Standard.WLEN(string12) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string12);
END_IF

IF Tc2_Standard.WLEN(string13) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string13);
END_IF

IF Tc2_Standard.WLEN(string14) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string14);
END_IF

IF Tc2_Standard.WLEN(string15) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string15);
END_IF

IF Tc2_Standard.WLEN(string16) = 0 THEN
	RETURN;
ELSE
	ConcatStrings255 := Tc2_Standard.WCONCAT(ConcatStrings255, string16);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DateAndTimeToString" Id="{7498afc1-9ae1-4986-8ff2-63e14a92dea2}">
      <Declaration><![CDATA[METHOD DateAndTimeToString : WSTRING
VAR_INPUT
	value : DATE_AND_TIME;
	dateValuesSeparator : STRING(1) := '_';
	dateAndTimeSeparator : STRING(1) := '-';
	timeValuesSeparator : STRING(1) := '_';
END_VAR
VAR
	result : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[result := TO_STRING(value);

result := Tc2_Standard.DELETE(result, 3, 1);

result := Tc2_Standard.REPLACE(result, dateValuesSeparator, 1, 5);
result := Tc2_Standard.REPLACE(result, dateValuesSeparator, 1, 8);
result := Tc2_Standard.REPLACE(result, dateAndTimeSeparator, 1, 11);
result := Tc2_Standard.REPLACE(result, timeValuesSeparator, 1, 14);
result := Tc2_Standard.REPLACE(result, timeValuesSeparator, 1, 17);

DateAndTimeToString := TO_WSTRING(result);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetActualSize" Id="{f88efc62-cf38-4f16-a4e6-1677f1ebb799}">
      <Declaration><![CDATA[METHOD GetActualSize : ULINT
VAR_IN_OUT CONSTANT
	value : WSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetActualSize := (Tc2_Utilities.WLEN2(ADR(value)) * 2) + 2;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLength" Id="{92cb56d9-db9c-4638-bd53-1d463d8daa4a}">
      <Declaration><![CDATA[METHOD GetLength : ULINT
VAR_IN_OUT CONSTANT
	value : WSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetLength := Tc2_Utilities.WLEN2(ADR(value));]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalAnyToString" Id="{b35c56b7-7d8f-4737-8cea-d0ecbebe9e7f}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalAnyToString : WSTRING(255)
VAR_INPUT
	value : __System.AnyType;
END_VAR
VAR
	anyBool : POINTER TO BOOL;

	anyByte : POINTER TO BYTE;
	anyWord : POINTER TO WORD;
	anyDWord : POINTER TO LWORD;
	anyLWord : POINTER TO LWORD;
	
	anySInt : POINTER TO SINT;
	anyInt : POINTER TO INT;
	anyDInt : POINTER TO DINT;
	anyLInt : POINTER TO LINT;
	
	anyUSInt : POINTER TO USINT;
	anyUInt : POINTER TO UINT;
	anyUDInt : POINTER TO UDINT;
	anyULInt : POINTER TO ULINT;
	
	anyReal : POINTER TO REAL;
	anyLReal : POINTER TO LREAL;

	anyString : POINTER TO STRING(255);
	anyWString : POINTER TO WSTRING(255);
	
	anyTime : POINTER TO TIME;
	anyLTime : POINTER TO LTIME;
	anyDate : POINTER TO DATE;
	anyDateAndTime : POINTER TO DATE_AND_TIME;
	anyTimeOfDay : POINTER TO TOD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE value.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		anyBool := value.pValue;
		InternalAnyToString := TO_WSTRING(anyBool^);		
	
	__SYSTEM.TYPE_CLASS.TYPE_BIT:
		anyByte := value.pValue;
		IF anyByte^ > 0 THEN
			InternalAnyToString := "1";		
		ELSE
			InternalAnyToString := "0";		
		END_IF
	
	__SYSTEM.TYPE_CLASS.TYPE_BYTE:
		anyByte := value.pValue;
		InternalAnyToString := TO_WSTRING(anyByte^);		
	__SYSTEM.TYPE_CLASS.TYPE_WORD:
		anyWord := value.pValue;
		InternalAnyToString := TO_WSTRING(anyWord^);
	__SYSTEM.TYPE_CLASS.TYPE_DWORD:
		anyDWord := value.pValue;
		InternalAnyToString := TO_WSTRING(anyDWord^);
	__SYSTEM.TYPE_CLASS.TYPE_LWORD:
		anyLWord := value.pValue;
		InternalAnyToString := TO_WSTRING(anyLWord^);
		
	__SYSTEM.TYPE_CLASS.TYPE_SINT:
		anySInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anySInt^);
	__SYSTEM.TYPE_CLASS.TYPE_INT:
		anyInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyInt^);		
	__SYSTEM.TYPE_CLASS.TYPE_DINT:
		anyDInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyDInt^);
	__SYSTEM.TYPE_CLASS.TYPE_LINT:
		anyLInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyLInt^);
		
	__SYSTEM.TYPE_CLASS.TYPE_USINT:
		anyUSInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyUSInt^);
	__SYSTEM.TYPE_CLASS.TYPE_UINT:
		anyUInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyUInt^);		
	__SYSTEM.TYPE_CLASS.TYPE_UDINT:
		anyUDInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyUDInt^);
	__SYSTEM.TYPE_CLASS.TYPE_ULINT:
		anyULInt := value.pValue;
		InternalAnyToString := TO_WSTRING(anyULInt^);

	__SYSTEM.TYPE_CLASS.TYPE_REAL:
		anyReal := value.pValue;
		InternalAnyToString := TO_WSTRING(anyReal^);
	__SYSTEM.TYPE_CLASS.TYPE_LREAL:
		anyLReal := value.pValue;
		InternalAnyToString := TO_WSTRING(anyLReal^);
	
	__SYSTEM.TYPE_CLASS.TYPE_STRING:
		anyString := value.pValue;
		InternalAnyToString := TO_WSTRING(anyString^);
	__SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		anyWString := value.pValue;
		InternalAnyToString := anyWString^;
	
	__SYSTEM.TYPE_CLASS.TYPE_TIME:
		anyTime := value.pValue;
		InternalAnyToString := TO_WSTRING(anyTime^);
	__SYSTEM.TYPE_CLASS.TYPE_LTIME:
		anyLTime := value.pValue;
		InternalAnyToString := TO_WSTRING(anyLTime^);
	__SYSTEM.TYPE_CLASS.TYPE_DATE:
		anyDate := value.pValue;
		InternalAnyToString := TO_WSTRING(anyDate^);
	__SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		anyDateAndTime := value.pValue;
		InternalAnyToString := TO_WSTRING(anyDateAndTime^);  
	__SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:
		anyTimeOfDay := value.pValue;
		InternalAnyToString := TO_WSTRING(anyTimeOfDay^);
	
	__SYSTEM.TYPE_CLASS.TYPE_POINTER, __SYSTEM.TYPE_CLASS.TYPE_REFERENCE:
		InternalAnyToString := TO_WSTRING(Tc2_Utilities.PVOID_TO_HEXSTR(anyDate, 8, FALSE));		
	
	(*__SYSTEM.TYPE_CLASS.TYPE_SUBRANGE:
	__SYSTEM.TYPE_CLASS.TYPE_ENUM:
	__SYSTEM.TYPE_CLASS.TYPE_ARRAY:
	__SYSTEM.TYPE_CLASS.TYPE_PARAMS:
	__SYSTEM.TYPE_CLASS.TYPE_USERDEF:
	__SYSTEM.TYPE_CLASS.TYPE_NONE:
	__SYSTEM.TYPE_CLASS.TYPE_ANY:
	__SYSTEM.TYPE_CLASS.TYPE_ANYBIT:
	__SYSTEM.TYPE_CLASS.TYPE_ANYDATE:
	__SYSTEM.TYPE_CLASS.TYPE_ANYINT:
	__SYSTEM.TYPE_CLASS.TYPE_ANYNUM:
	__SYSTEM.TYPE_CLASS.TYPE_ANYREAL:
	__SYSTEM.TYPE_CLASS.TYPE_LAZY:
	__SYSTEM.TYPE_CLASS.TYPE_BITCONST:*)
	ELSE
		IF value.pValue <> 0 THEN
			InternalAnyToString := TO_WSTRING(value.pValue^); 
		ELSE
			InternalAnyToString := "NULL";
		END_IF
END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalTryAppendToTarget" Id="{0fda8c2e-c85d-41ae-b5cc-9b9c596ab7fb}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD INTERNAL InternalTryAppendToTarget : BOOL
VAR_INPUT
	targetString : __SYSTEM.AnyType;
	sourceString1 : POINTER TO WSTRING;
	sourceString2 : POINTER TO WSTRING;
	sourceString3 : POINTER TO WSTRING;
	sourceString4 : POINTER TO WSTRING;
	sourceString5 : POINTER TO WSTRING;
	sourceString6 : POINTER TO WSTRING;
	sourceString7 : POINTER TO WSTRING;
	sourceString8 : POINTER TO WSTRING;
	sourceString9 : POINTER TO WSTRING;
	sourceString10 : POINTER TO WSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF targetString.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_WSTRING THEN
	RETURN;
END_IF

InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString1, targetString.pValue, TO_UDINT(targetString.diSize));

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString2) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString2, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString3) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString3, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString4) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString4, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString5) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString5, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString6) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString6, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString7) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString7, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString8) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString8, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString9) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString9, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF

IF NOT InternalTryAppendToTarget OR_ELSE Tc2_Utilities.WLEN2(sourceString10) = 0 THEN
	RETURN;
ELSE
	InternalTryAppendToTarget := Tc2_Utilities.WCONCAT2(targetString.pValue, sourceString10, targetString.pValue, TO_UDINT(targetString.diSize));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{06787fa4-fd31-454c-be97-5c26e13d97fa}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{404a412b-96d2-4c44-ae43-0c154ea517e4}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StringPointerToAnyType" Id="{e7b7eb9d-23fd-4387-8408-e33d707c6233}">
      <Declaration><![CDATA[METHOD StringPointerToAnyType : __System.AnyType
VAR_INPUT
	value : POINTER TO WSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringPointerToAnyType.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_WSTRING;
StringPointerToAnyType.pValue := value;
StringPointerToAnyType.diSize := TO_DINT(GetActualSize(value^));]]></ST>
      </Implementation>
    </Method>
    <Method Name="StringReferenceToAnyType" Id="{8467a0c9-fba0-4e3d-9b58-fb51783bbdec}">
      <Declaration><![CDATA[METHOD StringReferenceToAnyType : __System.AnyType
VAR_INPUT
	value : REFERENCE TO WSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringReferenceToAnyType.TypeClass := __SYSTEM.TYPE_CLASS.TYPE_WSTRING;
StringReferenceToAnyType.pValue := ADR(value);
StringReferenceToAnyType.diSize := TO_DINT(GetActualSize(value));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAppendToTarget" Id="{4de57109-f456-48e2-92b9-7ccc4d2d48fb}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD TryAppendToTarget : BOOL
VAR_INPUT
	targetString : ANY_STRING;
END_VAR
VAR_IN_OUT CONSTANT
	sourceString : WSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryAppendToTarget := InternalTryAppendToTarget(targetString, ADR(sourceString), 0, 0, 0, 0, 0, 0, 0, 0, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAppendToTarget255" Id="{85ee2c53-41c4-4f11-9049-314aaf814c0e}" FolderPath="Append\">
      <Declaration><![CDATA[METHOD TryAppendToTarget255 : BOOL
VAR_INPUT
	targetString : ANY_STRING;
	sourceString1 : WSTRING(255);
	sourceString2 : WSTRING(255) := "";
	sourceString3 : WSTRING(255) := "";
	sourceString4 : WSTRING(255) := "";
	sourceString5 : WSTRING(255) := "";
	sourceString6 : WSTRING(255) := "";
	sourceString7 : WSTRING(255) := "";
	sourceString8 : WSTRING(255) := "";
	sourceString9 : WSTRING(255) := "";
	sourceString10 : WSTRING(255) := "";
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryAppendToTarget255 := InternalTryAppendToTarget(targetString, ADR(sourceString1), ADR(sourceString2), ADR(sourceString3), ADR(sourceString4), ADR(sourceString5), ADR(sourceString6), ADR(sourceString7), ADR(sourceString8), ADR(sourceString9), ADR(sourceString10));]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>