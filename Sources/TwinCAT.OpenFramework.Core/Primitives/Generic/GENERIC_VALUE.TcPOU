<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="GENERIC_VALUE" Id="{4ec776d3-51b8-42d3-97bb-5e4d1a102b1f}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK GENERIC_VALUE
VAR_OUTPUT
	TypeClass : GENERIC_TYPE_CLASS;
	Address : POINTER TO BYTE;
	Size : ULINT;
	IsMemoryOwner : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="AsTyped" Id="{e96a41ac-e3cd-4eee-9bfa-b62dba0c2d0e}">
      <Folder Name="Date and time" Id="{0e8135f9-c7a8-41d0-996d-4e135d2a2366}" />
      <Folder Name="Floating point" Id="{8039a744-40ce-4546-beea-78a288e45706}" />
      <Folder Name="Integer" Id="{e3759741-5c8c-482f-93b9-6ae90a2f6296}">
        <Folder Name="Signed" Id="{fb335c0b-7655-449f-bc46-48fb10ad905c}" />
        <Folder Name="Unsugned" Id="{bab4b970-dedd-4b75-8710-280ec540561b}" />
      </Folder>
      <Folder Name="Strings" Id="{f6373c83-d47f-4dab-9f39-83ae4e8a3796}" />
    </Folder>
    <Folder Name="ChangeValue" Id="{ff6ec9ec-7e82-4906-a7b3-4f1a0bbc2daf}" />
    <Folder Name="CleanupMethods" Id="{6633f1de-b2f9-411c-a1ba-5eaade50e25e}" />
    <Folder Name="Service methods" Id="{f60d642b-cec1-4cae-991f-d82121762e9d}" />
    <Method Name="AsAnyType" Id="{59db7a53-29a2-4c5e-a06f-b2b343ab8f25}">
      <Declaration><![CDATA[METHOD AsAnyType : __SYSTEM.AnyType]]></Declaration>
      <Implementation>
        <ST><![CDATA[AsAnyType := SystemAnyTypeFactory.CreateAnyTypeByGenericValue(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsBool" Id="{1aaa60f7-a8aa-48fc-a4c3-f53925263a40}" FolderPath="AsTyped\">
      <Declaration><![CDATA[METHOD AsBool : BOOL
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, 
	GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_LWORD,
    GENERIC_TYPE_CLASS.TYPE_SINT, GENERIC_TYPE_CLASS.TYPE_INT, GENERIC_TYPE_CLASS.TYPE_DINT, GENERIC_TYPE_CLASS.TYPE_LINT,
    GENERIC_TYPE_CLASS.TYPE_USINT, GENERIC_TYPE_CLASS.TYPE_UINT, GENERIC_TYPE_CLASS.TYPE_UDINT, GENERIC_TYPE_CLASS.TYPE_ULINT:
		AsBool := universalPointer.AsBool^;
		RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_BOOL);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsByte" Id="{936f9e9f-e35c-461b-a5b6-c2e02b118baf}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsByte : BYTE
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsByte := universalPointer.AsByte^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF
		GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
			 AsByte := TO_BYTE(universalPointer.AsWord^);
			 RETURN;
	 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsByte := TO_BYTE(universalPointer.AsDWord^);
			 RETURN;
	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsByte := TO_BYTE(universalPointer.AsLWord^);
			 RETURN;
		
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsByte := TO_BYTE(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsByte := TO_BYTE(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsByte := TO_BYTE(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsByte := TO_BYTE(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_BYTE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsDate" Id="{db320a05-493c-45cf-92f8-51bf496ee511}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsDate : DATE
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_DATE: 
		 AsDate := universalPointer.AsDate^;
		 RETURN;		 

	GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsDate := TO_DATE(universalPointer.AsDateAndTime^);
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_DATE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsDateAndTime" Id="{ba931761-c96e-42e2-9fa4-d1882172beda}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsDateAndTime : DATE_AND_TIME
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsDateAndTime := universalPointer.AsDateAndTime^;
		 RETURN;
		
	GENERIC_TYPE_CLASS.TYPE_DATE:
		 AsDateAndTime := TO_DT(universalPointer.AsDate^);
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsDInt" Id="{4fea0b7d-fe5e-4808-9a02-b0a72b1114c9}" FolderPath="AsTyped\Integer\Signed\">
      <Declaration><![CDATA[METHOD AsDInt : DINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsDInt := TO_DINT(universalPointer.AsByte^);
		 RETURN;
		
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsDInt := TO_DINT(universalPointer.AsWord^);
		 RETURN;

	GENERIC_TYPE_CLASS.TYPE_SINT: 
		 AsDInt := TO_DINT(universalPointer.AsSInt^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_INT: 
		 AsDInt := TO_DINT(universalPointer.AsInt^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_DINT: 
		 AsDInt := universalPointer.AsDInt^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF		 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsDInt := TO_DINT(universalPointer.AsDWord^);
			 RETURN;

		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsDInt := TO_DINT(universalPointer.AsLWord^);
			 RETURN;
			 			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsDInt := TO_DINT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_DINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsDWord" Id="{1ee84003-88d5-466d-8c56-9b5d650c16eb}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsDWord : DWORD
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsDWord := TO_DWORD(universalPointer.AsByte^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsDWord := TO_DWORD(universalPointer.AsWord^);
		 RETURN;
 
	GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
		 AsDWord := universalPointer.AsDWord^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsDWord := TO_DWORD(universalPointer.AsLWord^);
			 RETURN;
		
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsDWord := TO_DWORD(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsDWord := TO_DWORD(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsDWord := TO_DWORD(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsDWord := TO_DWORD(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_DWORD);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsInt" Id="{fbd81b42-6af9-470c-9770-5641903fbac8}" FolderPath="AsTyped\Integer\Signed\">
      <Declaration><![CDATA[METHOD AsInt : INT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsInt := TO_INT(universalPointer.AsByte^);
		 RETURN;

	GENERIC_TYPE_CLASS.TYPE_SINT: 
		 AsInt := TO_INT(universalPointer.AsSInt^);
		 RETURN;
			 
	GENERIC_TYPE_CLASS.TYPE_INT: 
		 AsInt := universalPointer.AsInt^;
		 RETURN;		 
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF	 
		GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
			 AsInt := TO_INT(universalPointer.AsWord^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsInt := TO_INT(universalPointer.AsDWord^);
			 RETURN;
	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsInt := TO_INT(universalPointer.AsLWord^);
			 RETURN;
					 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsInt := TO_INT(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsInt := TO_INT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_INT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLDate" Id="{a43023c1-e686-4d4d-82c6-573f5b54a6de}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsLDate : LDATE
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_ULINT: 
		 AsLDate := TO_LDATE(universalPointer.AsULInt^);
		 RETURN;		 

	GENERIC_TYPE_CLASS.TYPE_DATE: 
		 AsLDate := TO_LDATE(universalPointer.AsDate^);
		 RETURN;		 

	GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME: 
		 AsLDate := TO_LDATE(universalPointer.AsDateAndTime^);
		 RETURN;		 
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_DATE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLDateAndTime" Id="{36a42bba-09cd-44d2-9d6f-f83ecf955631}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsLDateAndTime : LDATE_AND_TIME
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_ULINT: 
		 AsLDateAndTime := TO_LDT(universalPointer.AsULInt^);
		 RETURN;		 

	GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsLDateAndTime := TO_LDT(universalPointer.AsDateAndTime^);
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLInt" Id="{557ab87e-2262-4a71-b53a-324d552cca35}" FolderPath="AsTyped\Integer\Signed\">
      <Declaration><![CDATA[METHOD AsLInt : LINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsLInt := TO_LINT(universalPointer.AsByte^);
		 RETURN;
		
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsLInt := TO_LINT(universalPointer.AsWord^);
		 RETURN;

	GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
		 AsLInt := TO_LINT(universalPointer.AsDWord^);
		 RETURN;

	GENERIC_TYPE_CLASS.TYPE_SINT: 
		 AsLInt := TO_LINT(universalPointer.AsSInt^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_INT: 
		 AsLInt := TO_LINT(universalPointer.AsInt^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_DINT: 
		 AsLInt := TO_LINT(universalPointer.AsDInt^);
		 RETURN;
			 			 
	GENERIC_TYPE_CLASS.TYPE_LINT:
		 AsLInt := universalPointer.AsLInt^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF		 
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsLInt := TO_LINT(universalPointer.AsLWord^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_LINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLReal" Id="{6ff6d2d4-05a2-4a88-8dfa-3efa48fa159c}" FolderPath="AsTyped\Floating point\">
      <Declaration><![CDATA[METHOD AsLReal : LREAL
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_REAL:
		 AsLReal := TO_LREAL(universalPointer.AsReal^);
		 RETURN;
	 
	GENERIC_TYPE_CLASS.TYPE_LREAL:	
		 AsLReal := universalPointer.AsLReal^;
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_LREAL);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLTime" Id="{312f2003-0852-4cfd-8313-e6043e172de5}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsLTime : LTIME
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsLTime := TO_LTIME(universalPointer.AsDateAndTime^);
		 RETURN;
		
	GENERIC_TYPE_CLASS.TYPE_LTIME:
		 AsLTime := universalPointer.AsLTime^;
		 RETURN;

	GENERIC_TYPE_CLASS.TYPE_TIME: 
		 AsLTime := TO_LTIME(universalPointer.AsTime^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY: 
		 AsLTime := TO_LTIME(universalPointer.AsTimeOfDay^);
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_LTIME);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLTimeOfDay" Id="{3746ef26-79d9-476c-ba8d-9d1fb97744ec}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsLTimeOfDay : LTIME_OF_DAY
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_ULINT: 
		 AsLTimeOfDay := TO_LTOD(universalPointer.AsULInt^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY:
		 AsLTimeOfDay := TO_LTOD(universalPointer.AsTimeOfDay^);
		 RETURN;		 
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF			 
		GENERIC_TYPE_CLASS.TYPE_TIME:
			 AsLTimeOfDay := TO_LTOD(universalPointer.AsTime^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LTIME:
			 AsLTimeOfDay := TO_LTOD(universalPointer.AsLTime^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsLWord" Id="{329d366e-53cb-444a-baae-0e3cbf144975}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsLWord : LWORD
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsLWord := TO_LWORD(universalPointer.AsByte^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsLWord := TO_LWORD(universalPointer.AsWord^);
		 RETURN;
 
	GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
		 AsLWord := TO_LWORD(universalPointer.AsDWord^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
		 AsLWord := universalPointer.AsLWord^;
		 RETURN;		 
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF			
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsLWord := TO_LWORD(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsLWord := TO_LWORD(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsLWord := TO_LWORD(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsLWord := TO_LWORD(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_LWORD);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsObject" Id="{996e8fad-fcc2-4f05-b582-9a439f872e26}" FolderPath="AsTyped\">
      <Declaration><![CDATA[METHOD AsObject : IObject
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_OBJECT:
		IF universalPointer.AsObject <> 0 THEN
			AsObject := universalPointer.AsObject^;			
		END_IF
		
		RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_OBJECT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsReal" Id="{45160cf2-6e60-4035-806b-879e84f1bb89}" FolderPath="AsTyped\Floating point\">
      <Declaration><![CDATA[METHOD AsReal : REAL
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_REAL:
		 AsReal := universalPointer.AsReal^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF		 
		GENERIC_TYPE_CLASS.TYPE_LREAL:	
			 AsReal := TO_REAL(universalPointer.AsLWord^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_REAL);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Assign" Id="{862ebf60-dfb4-45d8-a755-cbc5dc31a2cb}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD INTERNAL Assign
VAR_INPUT
	genericTypeClass : GENERIC_TYPE_CLASS;
	address : POINTER TO BYTE;
	size : ULINT;
	isMemoryOwner : BOOL;
END_VAR
VAR
	addressNullException : ArgumentNullException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF address = 0 THEN
	addressNullException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'address');
END_IF

THIS^.TypeClass := genericTypeClass;
THIS^.Address := address;
THIS^.Size := size;
THIS^.IsMemoryOwner := isMemoryOwner;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsSInt" Id="{17b44680-9119-41da-9958-f566e80539b5}" FolderPath="AsTyped\Integer\Signed\">
      <Declaration><![CDATA[METHOD AsSInt : SINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_SINT: 
		 AsSInt := universalPointer.AsSInt^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF
		GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
			 AsSInt := TO_SINT(universalPointer.AsUSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
			 AsSInt := TO_SINT(universalPointer.AsWord^);
			 RETURN;
	 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsSInt := TO_SINT(universalPointer.AsDWord^);
			 RETURN;
	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsSInt := TO_SINT(universalPointer.AsLWord^);
			 RETURN;
					 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsSInt := TO_SINT(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsSInt := TO_SINT(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsSInt := TO_SINT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_SINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsString255" Id="{34520551-01e7-4ae7-9a34-54ba8a2cf3c1}" FolderPath="AsTyped\Strings\">
      <Declaration><![CDATA[METHOD AsString255 : STRING(255)
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL:
		 AsString255 := TO_STRING(universalPointer.AsBool^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_BYTE:
		 AsString255 := TO_STRING(universalPointer.AsByte^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_WORD:
		 AsString255 := TO_STRING(universalPointer.AsWord^);
		 RETURN;
	GENERIC_TYPE_CLASS.TYPE_DWORD:
		 AsString255 := TO_STRING(universalPointer.AsDWord^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LWORD:
		 AsString255 := TO_STRING(universalPointer.AsLWord^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_SINT:
		 AsString255 := TO_STRING(universalPointer.AsSInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_INT:
		 AsString255 := TO_STRING(universalPointer.AsInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_DINT:
		 AsString255 := TO_STRING(universalPointer.AsDInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LINT:
		 AsString255 := TO_STRING(universalPointer.AsLInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsString255 := TO_STRING(universalPointer.AsUSInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsString255 := TO_STRING(universalPointer.AsUInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_UDINT:
		 AsString255 := TO_STRING(universalPointer.AsUDInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_ULINT:
		 AsString255 := TO_STRING(universalPointer.AsULInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_REAL:
		 AsString255 := TO_STRING(universalPointer.AsReal^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LREAL:
		 AsString255 := TO_STRING(universalPointer.AsLReal^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_STRING:
		 AsString255 := universalPointer.AsString^;
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_TIME:
		 AsString255 := TO_STRING(universalPointer.AsTime^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LTIME:
		 AsString255 := TO_STRING(universalPointer.AsLTime^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_DATE:
		 AsString255 := TO_STRING(universalPointer.AsDate^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsString255 := TO_STRING(universalPointer.AsDateAndTime^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY:
		 AsString255 := TO_STRING(universalPointer.AsTimeOfDay^);
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF	 			 
		GENERIC_TYPE_CLASS.TYPE_WSTRING:
			 AsString255 := TO_STRING(universalPointer.AsWString^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_STRING);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsStringReference" Id="{5ecee28b-da1c-4264-92ee-6c69f4328ec9}" FolderPath="AsTyped\Strings\">
      <Declaration><![CDATA[METHOD AsStringReference : REFERENCE TO STRING
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
    GENERIC_TYPE_CLASS.TYPE_STRING:
		 AsStringReference REF= universalPointer.AsString^;
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_STRING);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsTime" Id="{b0c8a8a8-d7c2-483f-b215-128f7d04ba16}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsTime : TIME
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsTime := TO_TIME(universalPointer.AsDateAndTime^);
		 RETURN;
		
	GENERIC_TYPE_CLASS.TYPE_TIME: 
		 AsTime := universalPointer.AsTime^;
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY: 
		 AsTime := TO_TIME(universalPointer.AsTimeOfDay^);
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF		 
		GENERIC_TYPE_CLASS.TYPE_LTIME:
			 AsTime := TO_TIME(universalPointer.AsLTime^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_TIME);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsTimeOfDay" Id="{83f725a7-471b-4136-801c-36fbe6098098}" FolderPath="AsTyped\Date and time\">
      <Declaration><![CDATA[METHOD AsTimeOfDay : TIME_OF_DAY
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY: 
		 AsTimeOfDay := universalPointer.AsTimeOfDay^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF
		GENERIC_TYPE_CLASS.TYPE_TIME:
			 AsTimeOfDay := TO_TOD(universalPointer.AsTime^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LTIME:
			 AsTimeOfDay := TO_TOD(universalPointer.AsLTime^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsUDInt" Id="{90863b55-b5cf-4472-b2f4-3d7e5196f54f}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsUDInt : UDINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsUDInt := TO_UDINT(universalPointer.AsByte^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsUDInt := TO_UDINT(universalPointer.AsWord^);
		 RETURN;
 
	GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
		 AsUDInt := universalPointer.AsDWord^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsUDInt := TO_UDINT(universalPointer.AsLWord^);
			 RETURN;
		
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsUDInt := TO_UDINT(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsUDInt := TO_UDINT(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsUDInt := TO_UDINT(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsUDInt := TO_UDINT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_UDINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsUInt" Id="{0cb7d9b1-a26c-4d44-8107-5807eda8eaa5}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsUInt : UINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsUInt := TO_UINT(universalPointer.AsByte^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsUInt := universalPointer.AsWord^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF	 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsUInt := TO_UINT(universalPointer.AsDWord^);
			 RETURN;
	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsUInt := TO_UINT(universalPointer.AsLWord^);
			 RETURN;
		
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsUInt := TO_UINT(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsUInt := TO_UINT(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsUInt := TO_UINT(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsUInt := TO_UINT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_UINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsULInt" Id="{ddfdd7f6-ff0f-4202-a7b9-d1b08069f76c}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsULInt : ULINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsULInt := TO_ULINT(universalPointer.AsByte^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsULInt := TO_ULINT(universalPointer.AsWord^);
		 RETURN;
 
	GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
		 AsULInt := TO_ULINT(universalPointer.AsDWord^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
		 AsULInt := universalPointer.AsLWord^;
		 RETURN;		 
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF			
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsULInt := TO_ULINT(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsULInt := TO_ULINT(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsULInt := TO_ULINT(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsULInt := TO_ULINT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_ULINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsUSInt" Id="{7f2825bd-7342-487e-96ac-27ff3bcc2e3c}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsUSInt : USINT
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsUSInt := universalPointer.AsUSInt^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF
		GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
			 AsUSInt := TO_USINT(universalPointer.AsWord^);
			 RETURN;
	 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsUSInt := TO_USINT(universalPointer.AsDWord^);
			 RETURN;
	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsUSInt := TO_USINT(universalPointer.AsLWord^);
			 RETURN;
		
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsUSInt := TO_USINT(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsUSInt := TO_USINT(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsUSInt := TO_USINT(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsUSInt := TO_USINT(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_USINT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsWord" Id="{5e995462-8574-4174-bafd-d9d8e8e626c5}" FolderPath="AsTyped\Integer\Unsugned\">
      <Declaration><![CDATA[METHOD AsWord : WORD
VAR_INPUT
	allowTypeCastWithDataLoss : BOOL := FALSE;
END_VAR
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL, GENERIC_TYPE_CLASS.TYPE_BYTE, GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsWord := TO_WORD(universalPointer.AsByte^);
		 RETURN;
		 
	GENERIC_TYPE_CLASS.TYPE_WORD, GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsWord := universalPointer.AsWord^;
		 RETURN;
END_CASE

IF allowTypeCastWithDataLoss THEN
	CASE TypeClass OF	 
		GENERIC_TYPE_CLASS.TYPE_DWORD, GENERIC_TYPE_CLASS.TYPE_UDINT: 
			 AsWord := TO_WORD(universalPointer.AsDWord^);
			 RETURN;
	
		GENERIC_TYPE_CLASS.TYPE_LWORD, GENERIC_TYPE_CLASS.TYPE_ULINT:	
			 AsWord := TO_WORD(universalPointer.AsLWord^);
			 RETURN;
		
		GENERIC_TYPE_CLASS.TYPE_SINT: 
			 AsWord := TO_WORD(universalPointer.AsSInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_INT: 
			 AsWord := TO_WORD(universalPointer.AsInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_DINT: 
			 AsWord := TO_WORD(universalPointer.AsDInt^);
			 RETURN;
			 
		GENERIC_TYPE_CLASS.TYPE_LINT:
			 AsWord := TO_WORD(universalPointer.AsLInt^);
			 RETURN;
	END_CASE
END_IF

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_WORD);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsWString255" Id="{02ab723a-3f42-4d36-a0f6-c0e9871bfd09}" FolderPath="AsTyped\Strings\">
      <Declaration><![CDATA[METHOD AsWString255 : WSTRING(255)
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_BOOL:
		 AsWString255 := TO_WSTRING(universalPointer.AsBool^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_BYTE:
		 AsWString255 := TO_WSTRING(universalPointer.AsByte^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_WORD:
		 AsWString255 := TO_WSTRING(universalPointer.AsWord^);
		 RETURN;
	GENERIC_TYPE_CLASS.TYPE_DWORD:
		 AsWString255 := TO_WSTRING(universalPointer.AsDWord^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LWORD:
		 AsWString255 := TO_WSTRING(universalPointer.AsLWord^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_SINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsSInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_INT:
		 AsWString255 := TO_WSTRING(universalPointer.AsInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_DINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsDInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsLInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_USINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsUSInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_UINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsUInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_UDINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsUDInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_ULINT:
		 AsWString255 := TO_WSTRING(universalPointer.AsULInt^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_REAL:
		 AsWString255 := TO_WSTRING(universalPointer.AsReal^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LREAL:
		 AsWString255 := TO_WSTRING(universalPointer.AsLReal^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_STRING:
		 AsWString255 := TO_WSTRING(universalPointer.AsString^);
		 RETURN;
	GENERIC_TYPE_CLASS.TYPE_WSTRING:
		 AsWString255 := universalPointer.AsWString^;
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_TIME:
		 AsWString255 := TO_WSTRING(universalPointer.AsTime^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_LTIME:
		 AsWString255 := TO_WSTRING(universalPointer.AsLTime^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_DATE:
		 AsWString255 := TO_WSTRING(universalPointer.AsDate^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_DATE_AND_TIME:
		 AsWString255 := TO_WSTRING(universalPointer.AsDateAndTime^);
		 RETURN;
    GENERIC_TYPE_CLASS.TYPE_TIME_OF_DAY:
		 AsWString255 := TO_WSTRING(universalPointer.AsTimeOfDay^);
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_WSTRING);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AsWStringReference" Id="{31493745-1b4b-4427-a5e6-18639dd644fb}" FolderPath="AsTyped\Strings\">
      <Declaration><![CDATA[METHOD AsWStringReference : REFERENCE TO WSTRING
VAR
	conversionException : GenericConversionNotSupportedException;
	universalPointer : UNIVERSAL_POINTER;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[universalPointer.AsByte := Address;

CASE TypeClass OF
	GENERIC_TYPE_CLASS.TYPE_WSTRING:
		 AsWStringReference REF= universalPointer.AsWString^;
		 RETURN;
END_CASE

conversionException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), TypeClass, GENERIC_TYPE_CLASS.TYPE_WSTRING);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ChangeValueByAny" Id="{f7c7dd69-068a-47f7-bb61-709a535f4d37}" FolderPath="ChangeValue\">
      <Declaration><![CDATA[METHOD ChangeValueByAny
VAR_INPUT
	value : ANY;
	isObject : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ChangeValueByAnyType(value, isObject);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ChangeValueByAnyType" Id="{1e16a561-f4aa-4df6-80a7-92686d04f493}" FolderPath="ChangeValue\">
      <Declaration><![CDATA[METHOD ChangeValueByAnyType
VAR_INPUT
	value : __SYSTEM.AnyType;
	isObject : BOOL := FALSE;
END_VAR
VAR
	argumentDataType : GENERIC_TYPE_CLASS;
	
	exception : StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[argumentDataType := GenericTypeClassConvertor.GetGenericTypeClassBySystemAnyType(value, isObject);

IF argumentDataType <> TypeClass THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Incompatible argument type '", TO_WSTRING(argumentDataType), "' and generic  type '", TO_WSTRING(TypeClass), "'")); 
END_IF

IF Size < TO_ULINT(value.diSize) THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Insufficient memory size: avaliable - ", TO_WSTRING(Size), ", required - ", TO_WSTRING(value.diSize))); 	
END_IF

IF Tc2_System.MEMCPY(Address, value.pValue, TO_UDINT(value.diSize)) = 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Tc2_System.MEMCPY returned error (value 0)"); 		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{a1f78ed3-d25a-4e81-8b88-934a58828338}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{9652d94e-8909-435e-98b2-6d0f00f73d32}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := 'GENERIC_VALUE';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CopyTo" Id="{a9e28a3d-762a-4fcd-99e6-4d377c8be6f0}">
      <Declaration><![CDATA[METHOD CopyTo
VAR_INPUT
	target : ANY;
END_VAR
VAR
	argumentNullException : ArgumentNullException;
	invalidTargetMemorySizeException : StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF target.pValue = 0 THEN
	argumentNullException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'target'); 
END_IF

IF TO_ULINT(target.diSize) <> Size THEN
	invalidTargetMemorySizeException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Target variable size ", TO_WSTRING(target.diSize), " is not equals to generic variable size ", TO_WSTRING(Size)));
END_IF

internalCopyTo(target.pValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Equals" Id="{165ded56-3861-403f-9838-406d75321178}">
      <Declaration><![CDATA[METHOD Equals : BOOL
VAR_INPUT
	otherValue : GENERIC_VALUE;
END_VAR
VAR
	stringPointer : POINTER TO STRING;
	wideStringPointer : POINTER TO WSTRING;
	referenceDataSize : ULINT;
	valueToComapreDataSize : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Address = 0 OR_ELSE Size = 0 OR_ELSE otherValue.Address = 0 OR_ELSE otherValue.Size = 0 THEN
	Equals := (Address = 0 OR_ELSE Size = 0) AND_THEN (otherValue.Address = 0 OR_ELSE otherValue.Size = 0);
ELSE
	IF TypeClass = GENERIC_TYPE_CLASS.TYPE_STRING AND_THEN otherValue.TypeClass = GENERIC_TYPE_CLASS.TYPE_STRING THEN
		stringPointer := Address;
		referenceDataSize := StringHelper.GetActualSize(stringPointer^);
		
		stringPointer := otherValue.Address;		
		valueToComapreDataSize := StringHelper.GetActualSize(stringPointer^);
	ELSIF TypeClass = GENERIC_TYPE_CLASS.TYPE_WSTRING AND_THEN otherValue.TypeClass = GENERIC_TYPE_CLASS.TYPE_WSTRING THEN
		wideStringPointer := Address;
		referenceDataSize := WideStringHelper.GetActualSize(wideStringPointer^);
		
		wideStringPointer := otherValue.Address;		
		valueToComapreDataSize := WideStringHelper.GetActualSize(wideStringPointer^);
	ELSE
		referenceDataSize := Size;
		valueToComapreDataSize := otherValue.Size;		
	END_IF
 
	Equals := referenceDataSize = valueToComapreDataSize AND_THEN Tc2_System.MEMCMP(Address, otherValue.Address, TO_UDINT(referenceDataSize)) = 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="internalCopyTo" Id="{dffcbd59-ee39-4c74-bc12-2c951ca57eee}" FolderPath="Service methods\">
      <Declaration><![CDATA[METHOD PRIVATE internalCopyTo
VAR_INPUT
	targetAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Address = 0 THEN
	Tc2_System.MEMSET(targetAddress, 0, TO_UDINT(Size));
ELSE
	Tc2_System.MEMCPY(targetAddress, Address, TO_UDINT(Size));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release" Id="{9937fc92-8120-434b-ac91-5b20bd6f7de6}" FolderPath="CleanupMethods\">
      <Declaration><![CDATA[METHOD Release]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsMemoryOwner THEN
	MemoryHelper.TryReleaseDynamicMemory(Address, TypeClass = GENERIC_TYPE_CLASS.TYPE_OBJECT);
END_IF

Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{7b456980-e70d-4684-918f-f6fc89768f34}" FolderPath="CleanupMethods\">
      <Declaration><![CDATA[METHOD Reset]]></Declaration>
      <Implementation>
        <ST><![CDATA[TypeClass := GENERIC_TYPE_CLASS.TYPE_UNSPECIFIED;
Address := 0;
Size := 0;
IsMemoryOwner := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryChangeValueByAny" Id="{27b8e08e-2fa6-41be-af60-419256c2188b}" FolderPath="ChangeValue\">
      <Declaration><![CDATA[METHOD TryChangeValueByAny : BOOL
VAR_INPUT
	value : ANY;
	isObject : BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	ChangeValueByAnyType(value, isObject);
	TryChangeValueByAny := TRUE;
__CATCH
__ENDTRY]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryChangeValueByAnyType" Id="{4ed65d07-87f2-4259-80eb-13281b15e53c}" FolderPath="ChangeValue\">
      <Declaration><![CDATA[METHOD TryChangeValueByAnyType : BOOL
VAR_INPUT
	value : __SYSTEM.AnyType;
	isObject : BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	ChangeValueByAnyType(value, isObject);
	TryChangeValueByAnyType := TRUE;
__CATCH
__ENDTRY]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCopyTo" Id="{ce4998f1-fc8d-443b-ab31-7fcdb66ae168}">
      <Declaration><![CDATA[METHOD TryCopyTo : BOOL
VAR_INPUT
	target : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF target.pValue = 0 THEN
	RETURN; 
END_IF

IF TO_ULINT(target.diSize) <> Size THEN
	RETURN; 
END_IF

internalCopyTo(target.pValue);

TryCopyTo := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>