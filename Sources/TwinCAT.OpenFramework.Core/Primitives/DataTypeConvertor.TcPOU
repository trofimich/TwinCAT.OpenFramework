<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="DataTypeConvertor" Id="{3926d7cc-d133-4c1c-820a-65e2a022d573}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

PROGRAM DataTypeConvertor
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{2bc98fce-998e-4726-842b-4d1bf26e3a6b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{6394651d-dedc-4a8d-a7dc-57009b08f65a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetDataTypeBySystemAnyType" Id="{6fc44820-979c-4059-a13e-3c96b638aa44}">
      <Declaration><![CDATA[METHOD GetDataTypeBySystemAnyType : DATA_TYPE
VAR_INPUT
	systemAnyType : __SYSTEM.AnyType;	
	isObject : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF systemAnyType.TypeClass = __SYSTEM.TYPE_CLASS.TYPE_USERDEF AND_THEN isObject THEN
	GetDataTypeBySystemAnyType := DATA_TYPE.TYPE_OBJECT;
ELSE
	GetDataTypeBySystemAnyType := GetDataTypeBySysyemTypeClass(systemAnyType.TypeClass, systemAnyType.diSize);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetDataTypeBySysyemTypeClass" Id="{74554218-289c-4bce-8cf6-fcb344d5e350}">
      <Declaration><![CDATA[METHOD GetDataTypeBySysyemTypeClass : DATA_TYPE
VAR_INPUT
	typeClass : __SYSTEM.TYPE_CLASS;	
	dataSize : DINT := 0; // needed for TYPE_ENUM and TYPE_SUBRANGE  
END_VAR
VAR 
	invalidEnumTypeSizeException : NotSupportedException;
	typeClassNotSupportedException : ArgumentValueNotSupportedException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE typeClass OF
    __SYSTEM.TYPE_CLASS.TYPE_NONE:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_UNSPECIFIED;
    __SYSTEM.TYPE_CLASS.TYPE_BOOL:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_BOOL;
    __SYSTEM.TYPE_CLASS.TYPE_BYTE:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_BYTE;
    __SYSTEM.TYPE_CLASS.TYPE_WORD:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_WORD;
    __SYSTEM.TYPE_CLASS.TYPE_DWORD:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_DWORD;
    __SYSTEM.TYPE_CLASS.TYPE_LWORD:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_LWORD;
    __SYSTEM.TYPE_CLASS.TYPE_SINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_SINT;
    __SYSTEM.TYPE_CLASS.TYPE_INT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_INT;
    __SYSTEM.TYPE_CLASS.TYPE_DINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_DINT;
    __SYSTEM.TYPE_CLASS.TYPE_LINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_LINT;
    __SYSTEM.TYPE_CLASS.TYPE_USINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_USINT;
    __SYSTEM.TYPE_CLASS.TYPE_UINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_UINT;
    __SYSTEM.TYPE_CLASS.TYPE_UDINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_UDINT;
    __SYSTEM.TYPE_CLASS.TYPE_ULINT:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_ULINT;
    __SYSTEM.TYPE_CLASS.TYPE_REAL:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_REAL;
    __SYSTEM.TYPE_CLASS.TYPE_LREAL:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_LREAL;
    __SYSTEM.TYPE_CLASS.TYPE_STRING:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_STRING;
    __SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_WSTRING;
    __SYSTEM.TYPE_CLASS.TYPE_TIME:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_TIME;
    __SYSTEM.TYPE_CLASS.TYPE_LTIME:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_LTIME;
    __SYSTEM.TYPE_CLASS.TYPE_DATE:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_DATE;
    __SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_DATE_AND_TIME;
    __SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_TIME_OF_DAY;
    __SYSTEM.TYPE_CLASS.TYPE_POINTER:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_POINTER;
    __SYSTEM.TYPE_CLASS.TYPE_SUBRANGE, __SYSTEM.TYPE_CLASS.TYPE_ENUM:
		CASE dataSize OF
			1:
				GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_BYTE;
			2:
				GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_WORD;
			4:
				GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_DWORD;
			8:
				GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_LWORD;			
			ELSE
				invalidEnumTypeSizeException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), WideStringHelper.ConcatStrings255("Enum has invalid data size ", TO_WSTRING(dataSize)));
		END_CASE
    __SYSTEM.TYPE_CLASS.TYPE_ARRAY:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_ARRAY;
    __SYSTEM.TYPE_CLASS.TYPE_USERDEF:
		GetDataTypeBySysyemTypeClass := DATA_TYPE.TYPE_USER_DEFINED;

	ELSE
		typeClassNotSupportedException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), 'typeClass', typeClass);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDataTypeBySystemAnyType" Id="{55a1f39a-2f1b-46da-b162-f7d95a55b732}">
      <Declaration><![CDATA[METHOD TryGetDataTypeBySystemAnyType : BOOL
VAR_INPUT
	systemAnyType : __SYSTEM.AnyType;	
	isObject : BOOL := FALSE;
END_VAR
VAR_OUTPUT
	dataType : DATA_TYPE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF systemAnyType.TypeClass = __SYSTEM.TYPE_CLASS.TYPE_USERDEF AND_THEN isObject THEN
	dataType := DATA_TYPE.TYPE_OBJECT;
	TryGetDataTypeBySystemAnyType := TRUE;
ELSE
	TryGetDataTypeBySystemAnyType := TryGetDataTypeBySysyemTypeClass(systemAnyType.TypeClass, systemAnyType.diSize, dataType => dataType);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDataTypeBySysyemTypeClass" Id="{24ab732c-9169-4331-883f-5b4e80e0363a}">
      <Declaration><![CDATA[METHOD TryGetDataTypeBySysyemTypeClass : BOOL;
VAR_INPUT
	typeClass : __SYSTEM.TYPE_CLASS;	
	dataSize : DINT := 0; // needed for TYPE_ENUM and TYPE_SUBRANGE  
END_VAR
VAR_OUTPUT
	dataType : DATA_TYPE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetDataTypeBySysyemTypeClass := TRUE;

CASE typeClass OF
    __SYSTEM.TYPE_CLASS.TYPE_NONE:
		dataType := DATA_TYPE.TYPE_UNSPECIFIED;
    __SYSTEM.TYPE_CLASS.TYPE_BOOL:
		dataType := DATA_TYPE.TYPE_BOOL;
    __SYSTEM.TYPE_CLASS.TYPE_BYTE:
		dataType := DATA_TYPE.TYPE_BYTE;
    __SYSTEM.TYPE_CLASS.TYPE_WORD:
		dataType := DATA_TYPE.TYPE_WORD;
    __SYSTEM.TYPE_CLASS.TYPE_DWORD:
		dataType := DATA_TYPE.TYPE_DWORD;
    __SYSTEM.TYPE_CLASS.TYPE_LWORD:
		dataType := DATA_TYPE.TYPE_LWORD;
    __SYSTEM.TYPE_CLASS.TYPE_SINT:
		dataType := DATA_TYPE.TYPE_SINT;
    __SYSTEM.TYPE_CLASS.TYPE_INT:
		dataType := DATA_TYPE.TYPE_INT;
    __SYSTEM.TYPE_CLASS.TYPE_DINT:
		dataType := DATA_TYPE.TYPE_DINT;
    __SYSTEM.TYPE_CLASS.TYPE_LINT:
		dataType := DATA_TYPE.TYPE_LINT;
    __SYSTEM.TYPE_CLASS.TYPE_USINT:
		dataType := DATA_TYPE.TYPE_USINT;
    __SYSTEM.TYPE_CLASS.TYPE_UINT:
		dataType := DATA_TYPE.TYPE_UINT;
    __SYSTEM.TYPE_CLASS.TYPE_UDINT:
		dataType := DATA_TYPE.TYPE_UDINT;
    __SYSTEM.TYPE_CLASS.TYPE_ULINT:
		dataType := DATA_TYPE.TYPE_ULINT;
    __SYSTEM.TYPE_CLASS.TYPE_REAL:
		dataType := DATA_TYPE.TYPE_REAL;
    __SYSTEM.TYPE_CLASS.TYPE_LREAL:
		dataType := DATA_TYPE.TYPE_LREAL;
    __SYSTEM.TYPE_CLASS.TYPE_STRING:
		dataType := DATA_TYPE.TYPE_STRING;
    __SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		dataType := DATA_TYPE.TYPE_WSTRING;
    __SYSTEM.TYPE_CLASS.TYPE_TIME:
		dataType := DATA_TYPE.TYPE_TIME;
    __SYSTEM.TYPE_CLASS.TYPE_LTIME:
		dataType := DATA_TYPE.TYPE_LTIME;
    __SYSTEM.TYPE_CLASS.TYPE_DATE:
		dataType := DATA_TYPE.TYPE_DATE;
    __SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		dataType := DATA_TYPE.TYPE_DATE_AND_TIME;
    __SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:
		dataType := DATA_TYPE.TYPE_TIME_OF_DAY;
    __SYSTEM.TYPE_CLASS.TYPE_POINTER:
		dataType := DATA_TYPE.TYPE_POINTER;
    __SYSTEM.TYPE_CLASS.TYPE_SUBRANGE, __SYSTEM.TYPE_CLASS.TYPE_ENUM:
		CASE dataSize OF
			1:
				dataType := DATA_TYPE.TYPE_BYTE;
			2:
				dataType := DATA_TYPE.TYPE_WORD;
			4:
				dataType := DATA_TYPE.TYPE_DWORD;
			8:
				dataType := DATA_TYPE.TYPE_LWORD;			
			ELSE
				TryGetDataTypeBySysyemTypeClass := FALSE;
		END_CASE
    __SYSTEM.TYPE_CLASS.TYPE_ARRAY:
		dataType := DATA_TYPE.TYPE_ARRAY;
    __SYSTEM.TYPE_CLASS.TYPE_USERDEF:
		dataType := DATA_TYPE.TYPE_USER_DEFINED;

	ELSE
		TryGetDataTypeBySysyemTypeClass := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>