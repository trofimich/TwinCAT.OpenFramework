<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AdsLogger" Id="{c95de8ac-0505-4250-b81e-2b0cbe2bb2ed}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK AdsLogger EXTENDS Object IMPLEMENTS ILogger
VAR
	_ClassName : STRING := __POUNAME();
	
	_HintMessageCounter : ULINT;
	_WarningMessageCounter : ULINT;
	_ErrorMessageCounter : ULINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{c900fbb9-86d0-4a3f-9595-f30e1df1d1f1}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{910140d1-6146-4f27-82a4-105ab45c7077}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NamespaceName" Id="{c38469fc-4ff8-41a9-b499-75e413a00bb3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{bcccda69-31bf-4d44-868c-2415428102e1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Size" Id="{c266c68f-d111-413c-997b-ce427475c7b9}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{368ffd0e-de98-47d3-99fe-4d83a0af5f22}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryLogException" Id="{52444f42-e6c7-4828-baa7-3f12fe45268b}">
      <Declaration><![CDATA[METHOD TryLogException : BOOL
VAR_INPUT
	exception : IException;
END_VAR
VAR
	message : ERROR_MESSAGE;
	aggregateException : IAggregateException;
	innerException : IException;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF exception = 0 THEN
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(exception, aggregateException) OR_ELSE aggregateException.InnerExceptionCount = 0 THEN
	message := exception.GetMessage(TRUE, FALSE, TRUE);
	TryLogException := TryLogMessage(LOG_CATEGORY.ERROR, message);
ELSE
	IF aggregateException.InnerExceptionCount > 1 THEN
		// reverce order
		TryLogException := TryLogMessage(LOG_CATEGORY.ERROR, "<<< aggregate exception end <<<");
		
		FOR i := TO_DINT(aggregateException.InnerExceptionCount) - 1 TO 0 BY -1 DO
			innerException := aggregateException.GetInnerException(i);
			
			message := WideStringHelper.ConcatStrings255("  ", innerException.GetMessage(TRUE, FALSE, TRUE));
			
			TryLogException := TryLogException AND TryLogMessage(LOG_CATEGORY.ERROR, message);		
		END_FOR
		
		TryLogException := TryLogException AND TryLogMessage(LOG_CATEGORY.ERROR, ">>> aggregate exception start >>>");
	ELSE		
		innerException := aggregateException.GetInnerException(0);
		
		message := innerException.GetMessage(TRUE, FALSE, TRUE);
		
		TryLogException := TryLogMessage(LOG_CATEGORY.ERROR, message);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryLogMessage" Id="{936430cf-8fdd-47d1-875f-690550891879}">
      <Declaration><![CDATA[METHOD TryLogMessage : BOOL
VAR_INPUT
	category : LOG_CATEGORY;	
END_VAR
VAR_IN_OUT CONSTANT
	message : ERROR_MESSAGE;
END_VAR
VAR
	number : STRING(10) := '';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE category OF
	LOG_CATEGORY.INFORMATION, LOG_CATEGORY.SUCCESS:
		IF LogManager.AddNumberToMessage THEN
			_HintMessageCounter := _HintMessageCounter + 1;
			number := StringHelper.ConcatStrings255('#', TO_STRING(_HintMessageCounter), ': '); 
		END_IF
		
		TryLogMessage := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.Global_Variables.ADSLOG_MSGTYPE_LOG, msgFmtStr := StringHelper.ConcatStrings255(number, TO_STRING(message)), strArg := '') = 0;

	LOG_CATEGORY.WARNING:
		IF LogManager.AddNumberToMessage THEN
			_WarningMessageCounter := _WarningMessageCounter + 1;
			number := StringHelper.ConcatStrings255('#', TO_STRING(_WarningMessageCounter), ': '); 
		END_IF
		
		TryLogMessage := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.Global_Variables.ADSLOG_MSGTYPE_WARN, msgFmtStr := StringHelper.ConcatStrings255(number, TO_STRING(message)), strArg := '') = 0;
	
	LOG_CATEGORY.ERROR, LOG_CATEGORY.FATAL_ERROR:
		IF LogManager.AddNumberToMessage THEN
			_ErrorMessageCounter := _ErrorMessageCounter + 1;
			number := StringHelper.ConcatStrings255('#', TO_STRING(_ErrorMessageCounter), ': '); 
		END_IF
		
		TryLogMessage := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.Global_Variables.ADSLOG_MSGTYPE_ERROR, msgFmtStr := StringHelper.ConcatStrings255(number, TO_STRING(message)), strArg := '') = 0;
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>