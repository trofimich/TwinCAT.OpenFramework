<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="LogManager" Id="{5168e535-223e-4560-9821-bca21a9b8561}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM LogManager
VAR
	_DefaultLogger : AdsLogger;
	_Logger : ILogger;	
	_Filter : ILogFilter;  
	
	_MessageCounter : ULINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Filter" Id="{b6f1f4aa-92b0-409e-ad33-af6c50416e83}">
      <Declaration><![CDATA[PROPERTY Filter : ILogFilter]]></Declaration>
      <Get Name="Get" Id="{31e6a597-f4cb-45a7-bcf1-c6f162ef07f2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Filter := _Filter;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3a6b37ff-c92d-4d4c-a4cf-30b8093e5043}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Filter := Filter;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Logger" Id="{8f399577-3e03-44ae-a287-168cdae9d0ec}">
      <Declaration><![CDATA[PROPERTY Logger : ILogger]]></Declaration>
      <Get Name="Get" Id="{c9c1cefb-1091-483c-b6a3-ca70a961903f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _Logger = 0 THEN
	Logger := _DefaultLogger;
ELSE
	Logger := _Logger;
END_IF]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{82c82d05-b526-431e-b338-c69fda2bdd1a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Logger := Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TryLogException" Id="{bd7d75b2-118d-460f-87a2-4f124e9232ba}">
      <Declaration><![CDATA[METHOD TryLogException : BOOL
VAR_INPUT
	exception : IException;
	topic1 : WSTRING := "";	
	topic2 : WSTRING := "";	
	topic3 : WSTRING := "";	
	topic4 : WSTRING := "";	
END_VAR
VAR
	message : ERROR_MESSAGE;
	aggregateException : IAggregateException;
	innerException : IException;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF exception = 0 THEN
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(exception, aggregateException) OR_ELSE aggregateException.InnerExceptionCount = 0 THEN
	message := exception.GetMessage(TRUE, FALSE, TRUE);
	TryLogException := TryLogMessage(message, LOG_CATEGORY.ERROR, TO_WSTRING(exception.ClassName), topic1, topic2, topic3, topic4);
ELSE
	IF aggregateException.InnerExceptionCount > 1 THEN
		// reverce order
		TryLogException := TryLogMessage("<<< aggregate exception end <<<", LOG_CATEGORY.ERROR, TO_WSTRING(exception.ClassName), topic1, topic2, topic3, topic4);
		
		FOR i := TO_DINT(aggregateException.InnerExceptionCount) - 1 TO 0 BY -1 DO
			innerException := aggregateException.GetInnerException(i);
			
			message := WideStringHelper.ConcatStrings255("  ", innerException.GetMessage(TRUE, FALSE, TRUE));
			
			TryLogException := TryLogException AND TryLogMessage(message, LOG_CATEGORY.ERROR, TO_WSTRING(exception.ClassName), topic1, topic2, topic3, topic4);		
		END_FOR
		
		TryLogException := TryLogException AND TryLogMessage(">>> aggregate exception start >>>", LOG_CATEGORY.ERROR, TO_WSTRING(exception.ClassName), topic1, topic2, topic3, topic4);
	ELSE		
		innerException := aggregateException.GetInnerException(0);
		
		message := innerException.GetMessage(TRUE, FALSE, TRUE);
		
		TryLogException := TryLogMessage(message, LOG_CATEGORY.ERROR, TO_WSTRING(exception.ClassName), topic1, topic2, topic3, topic4);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryLogMessage" Id="{1b41c149-f4d6-4a68-875a-675fa3954ac9}">
      <Declaration><![CDATA[METHOD TryLogMessage : BOOL
VAR_INPUT
	message : ERROR_MESSAGE;
	category : LOG_CATEGORY;
	topic1 : WSTRING := "";	
	topic2 : WSTRING := "";	
	topic3 : WSTRING := "";	
	topic4 : WSTRING := "";	
	topic5 : WSTRING := "";	
END_VAR
VAR
	messageWithNumber : ERROR_MESSAGE;
	topics : ARRAY [0..4] OF WSTRING; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[topics[0] := topic1;
topics[1] := topic2;
topics[2] := topic3;
topics[3] := topic4;
topics[4] := topic5;

IF Filter <> 0 AND_THEN NOT Filter.ShouldLog(category, topics) THEN
	RETURN;
END_IF

_MessageCounter := _MessageCounter + 1;

WideStringHelper.AppendToTarget(messageWithNumber, "#", TO_WSTRING(_MessageCounter), ": ", message);

TryLogMessage := Logger.TryLogMessage(category, messageWithNumber);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>