<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="SequentialTaskExecutor" Id="{5f2d9604-eb7b-45e3-84bc-b901136bbe0b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
// The wrapper around Tc2_Standard.TON
FUNCTION_BLOCK FINAL SequentialTaskExecutor EXTENDS Core.AbortableProcess
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}
	_Tasks : Collections.List;
	
	{attribute 'OPC.UA.DA' := '0'}
	_ContinueOnError : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Overriden" Id="{1b1c5863-9f32-4a15-87e0-d0e2df5c3f78}" />
    <Property Name="ClassName" Id="{ba95610f-5219-47c9-8c57-311d9e60e72f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{013b3af7-a06d-4fbf-a280-1144598a7235}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ContinueOnError" Id="{46940bfd-6bf9-4e6a-8051-ecad3e387b69}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ContinueOnError : BOOL]]></Declaration>
      <Get Name="Get" Id="{3f04ff4a-f44d-4d07-bfe1-9565fe1e2fca}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ContinueOnError := _ContinueOnError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentTask" Id="{c0d02002-6e75-4b84-a496-ad82ebf3d647}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrentTask : IAbortableTask]]></Declaration>
      <Get Name="Get" Id="{28df5953-696c-4fdc-b8d7-69723340165e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _Tasks.Count > 0 THEN
	__QUERYINTERFACE(_Tasks.Get(0).AsObject(), CurrentTask);
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Name" Id="{877e85fd-25b7-42c3-b3a5-1da824b3a170}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY Name : WSTRING
]]></Declaration>
      <Get Name="Get" Id="{5d3ae67f-607f-4e82-af9f-014cbc19ee29}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := TO_WSTRING(ClassName);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAbort" Id="{3a5ab894-6d0b-4ec0-b72f-2b4254f65f95}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnAbort 
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
VAR
	task : Core.IAbortableTask;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Tasks.Count < 1 THEN
	done := TRUE;
	RETURN;
END_IF

task := CurrentTask;

IF start THEN
	task.Abort();
ELSE
	task.Execute();
END_IF

IF NOT task.Busy THEN
	_Tasks.RemoveAt(0);
	done := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{0dfd917b-90b9-4474-922f-c97034ea4f0c}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnError 
VAR_OUTPUT
	errorHandled : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Tasks.Count > 0 THEN
	_Tasks.RemoveAt(0);
END_IF

errorHandled := ContinueOnError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRun" Id="{2c7c0cfd-db41-4ccf-92fc-38a7fc6a065c}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnRun 
VAR_INPUT
	start : BOOL;
END_VAR
VAR
	task : Core.IAbortableTask;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Tasks.Count < 1 THEN
	RETURN;
END_IF

task := CurrentTask;

IF start OR_ELSE NOT task.Busy THEN
	task.Start();
ELSE
	task.Execute();
END_IF

IF NOT task.Busy THEN
	_Tasks.RemoveAt(0);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScheduleTask" Id="{25e72a79-e8be-4012-84f7-5da4f4f9148b}">
      <Declaration><![CDATA[METHOD ScheduleTask
VAR_INPUT
	task : Core.IAbortableTask;
	releseAfterHandling : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Tasks.AppendGeneric(Core.GenericValueFactory.FromParts(DATA_TYPE.TYPE_OBJECT, task.Address, task.Size, releseAfterHandling));]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{b289e881-1f3e-4abc-9a70-4494d509b71b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{40179bbc-4746-4890-bbcf-233fb2a96bdf}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>