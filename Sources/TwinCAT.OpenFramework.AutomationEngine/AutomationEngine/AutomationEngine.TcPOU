<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AutomationEngine" Id="{142225ba-ead8-4c1c-a7bd-6f13f6bbc05e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK FINAL AutomationEngine EXTENDS TwinCAT_OpenFramework_Core.Object
VAR_OUTPUT
	{attribute 'OPC.UA.DA' := '0'}
	CodeExecutionPhase : BOOL;
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	CycleCounter : LWORD;
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	State : AUTOMATION_ENGINE_STATE;
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	Diagnostics : AUTOMATION_ENGINE_DIAGNOSTICS;
END_VAR
VAR
	_ClassName : STRING := __POUNAME();
	
	_AdsLogger : AutomationEngineAdsLogger(THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service members" Id="{136ed185-96f6-42da-bd14-292cf8568f8a}" />
    <Property Name="ClassName" Id="{45e17d81-1043-4231-bd85-90f34397c6bb}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{f0f490d4-8600-4ae1-a5ee-744086bccb2f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName; ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="fillErrorLog" Id="{d055dd31-f097-4bbe-8c3e-fd4d4c6e2672}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE fillErrorLog
VAR_IN_OUT
	targetErrorLog : AUTOMATION_ENGINE_ERROR_LOG;
	sourceException : IException;  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetErrorLog.ShortMessage := sourceException.GetMessage(FALSE, FALSE);
targetErrorLog.FullMessage := sourceException.GetMessage(TRUE, TRUE);
targetErrorLog.Source := sourceException.GetSourceDescription();
targetErrorLog.LocalTimestamp := sourceException.LocalTimestamp;
targetErrorLog.UtcTimestamp := sourceException.UtcTimestamp;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{cddfd6b6-d698-4df7-b955-3cc076d37dea}">
      <Declaration><![CDATA[METHOD Run
VAR_IN_OUT CONSTANT
	automationUnits : ARRAY [*] OF IAutomationUnit;
END_VAR
VAR
	i : DINT;
	
	totalUnitCount : DINT;
	initializedUnitCount : DINT;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CodeExecutionPhase := TRUE;

TwinCAT_OpenFramework_Core.SystemDateTimeManager.Execute();		
_AdsLogger.Execute(CodeExecutionPhase);

IF TwinCAT_OpenFramework_Core.SystemDateTimeManager.SystemTimeValid THEN
	CASE State OF
		AUTOMATION_ENGINE_STATE.INITIALIZING:
			__TRY
				FOR i := LOWER_BOUND(automationUnits, 1) TO UPPER_BOUND(automationUnits, 1) DO
					IF automationUnits[i].Initialize() THEN
						initializedUnitCount := initializedUnitCount + 1;
					END_IF
				END_FOR
				
				totalUnitCount := UPPER_BOUND(automationUnits, 1) - LOWER_BOUND(automationUnits, 1) + 1; 
	
				IF initializedUnitCount = totalUnitCount THEN
					State := AUTOMATION_ENGINE_STATE.RUNNING;
				END_IF						
			__CATCH(exceptionCode)
				exception := ExceptionManager.GetLastException(exceptionCode);

				State := AUTOMATION_ENGINE_STATE.FAULT;
													
				fillErrorLog(Diagnostics.InitializationError, exception);
				
				exception.WriteToSystemLog();				
			__ENDTRY
						
		AUTOMATION_ENGINE_STATE.RUNNING, AUTOMATION_ENGINE_STATE.EMERGENCY:		
			FOR i := LOWER_BOUND(automationUnits, 1) TO UPPER_BOUND(automationUnits, 1) DO
				__TRY
					IF automationUnits[i].EmergencyStopRequest THEN					
						State := AUTOMATION_ENGINE_STATE.EMERGENCY;					
						automationUnits[i].EmergncyStop();
					ELSE			
						State := AUTOMATION_ENGINE_STATE.RUNNING;					
						automationUnits[i].Run();			
					END_IF
				__CATCH(exceptionCode)
					exception := ExceptionManager.GetLastException(exceptionCode);
					
					IF exception.Fatal THEN
						State := AUTOMATION_ENGINE_STATE.FAULT;					
						fillErrorLog(Diagnostics.CriticalError, exception);
					ELSIF NOT exception.Empty THEN
						fillErrorLog(Diagnostics.LastNonCriticalError, exception);
					END_IF
					
					exception.WriteToSystemLog();				
				__ENDTRY
				
				IF exception <> 0 AND_THEN exception.Fatal THEN
					EXIT;
				END_IF
			END_FOR
						
		AUTOMATION_ENGINE_STATE.FAULT:		
			FOR i := LOWER_BOUND(automationUnits, 1) TO UPPER_BOUND(automationUnits, 1) DO
				__TRY
					automationUnits[i].HandleFault();			
				__CATCH
					exception := ExceptionManager.GetLastException(exceptionCode);
					
					fillErrorLog(Diagnostics.HandleFaultError, exception);
					
					exception.WriteToSystemLog();				
				__ENDTRY
			END_FOR
	END_CASE
	
	TwinCAT_OpenFramework_Core.ExceptionManager.Cleanup();
END_IF

CycleCounter := CycleCounter + 1;
CodeExecutionPhase := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{a27aa6e5-c889-4bcd-9a9a-1a312fc7b20e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{515c24f7-c31f-4315-a0f6-ba012cb92d16}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>