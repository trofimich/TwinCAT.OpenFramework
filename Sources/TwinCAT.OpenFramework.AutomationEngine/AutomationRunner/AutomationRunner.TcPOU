<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AutomationRunner" Id="{142225ba-ead8-4c1c-a7bd-6f13f6bbc05e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ABSTRACT AutomationRunner
VAR_GENERIC CONSTANT
    _AutomationUnitCount : BYTE := 1;
END_VAR
EXTENDS Core.Object IMPLEMENTS IAutomationRunner
VAR
	_ExecutionContext : AUTOMATION_EXECUTION_CONTEXT;

	_SimulationMode : BOOL;

	_Diagnostics : AUTOMATION_RUNNER_DIAGNOSTICS;
	
	_AdsLogger : AutomationRunnerAdsLogger;
END_VAR
VAR_STAT
    _InstanceCounter : BYTE := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service members" Id="{136ed185-96f6-42da-bd14-292cf8568f8a}" />
    <Property Name="AutomationUnitCount" Id="{b763fe3e-ac45-40f7-8e0a-80bac18bc801}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY AutomationUnitCount : BYTE]]></Declaration>
      <Get Name="Get" Id="{41fb60e1-30ec-4999-8fd3-d29a9cdfc0bd}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AutomationUnitCount := _AutomationUnitCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AutomationUnits" Id="{d916e7c7-2f82-41ab-b518-da33d8b6a0ac}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ABSTRACT AutomationUnits : REFERENCE TO ARRAY [0.._AutomationUnitCount - 1] OF IAutomationUnit]]></Declaration>
      <Get Name="Get" Id="{bbac70c1-0c12-4a6e-b63c-959272410e00}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CodeExecutionPhase" Id="{c4f37de1-c494-4e98-bff8-e5a29ee70657}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '0'}
PROPERTY FINAL CodeExecutionPhase : BOOL]]></Declaration>
      <Get Name="Get" Id="{cca78e62-5e2b-457e-91fc-ec64208d7a39}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CodeExecutionPhase := GlobalState.CodeExecutionPhase;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CycleCounter" Id="{b44e2d41-8633-4c1c-ad38-18becdb27866}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL CycleCounter : LWORD]]></Declaration>
      <Get Name="Get" Id="{3b2c949f-bedb-4db8-bff6-1b934597b8a9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CycleCounter := GlobalState.CycleCounter;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Diagnostics" Id="{8d5d1cb6-fbf7-445b-bf3b-946f6e4d2f7d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL Diagnostics : REFERENCE TO AUTOMATION_RUNNER_DIAGNOSTICS]]></Declaration>
      <Get Name="Get" Id="{ff612338-7273-4025-bfe7-69ef45fb7440}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Diagnostics REF= _Diagnostics;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{d9dc6fd8-04ec-4586-b655-20027fb1c3eb}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_InstanceCounter := _InstanceCounter + 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="fillErrorLog" Id="{d055dd31-f097-4bbe-8c3e-fd4d4c6e2672}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE fillErrorLog
VAR_IN_OUT
	targetErrorLog : AUTOMATION_RUNNER_ERROR_LOG;
	sourceException : IException;  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetErrorLog.ShortMessage := sourceException.GetMessage(FALSE, FALSE);
targetErrorLog.FullMessage := sourceException.GetMessage(TRUE, TRUE);
targetErrorLog.Source := sourceException.GetSourceDescription();
targetErrorLog.LocalTimestamp := sourceException.LocalTimestamp;
targetErrorLog.UtcTimestamp := sourceException.UtcTimestamp;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{cddfd6b6-d698-4df7-b955-3cc076d37dea}">
      <Declaration><![CDATA[METHOD Run
VAR
	i : DINT;
	
	totalUnitCount : DINT;
	initializedUnitCount : DINT;
	
	singletonCheck : Core.StandardException;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GlobalState.CodeExecutionPhase := TRUE;

Core.SystemDateTimeManager.Execute();		

IF Core.SystemDateTimeManager.SystemTimeValid THEN
	_ExecutionContext.CycleLocalStartTime := Core.SystemDateTimeManager.SystemLocalDateTime;
	_ExecutionContext.CycleUtcStartTime := Core.SystemDateTimeManager.SystemUtcDateTime;
	
	CASE _ExecutionContext.AutomationRunnerState OF
		Automation.AUTOMATION_RUNNING_STATE.INITIALIZING:
			__TRY
				IF _InstanceCounter > 1 THEN
					singletonCheck.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "More then one AutomationRunner instance is not allowed", 0, TRUE);
				END_IF
				
				//FOR i := LOWER_BOUND(AutomationUnits, 1) TO UPPER_BOUND(AutomationUnits, 1) DO
				FOR i := 0 TO _AutomationUnitCount - 1 DO
					IF AutomationUnits[i].Initialize(_ExecutionContext) THEN
						initializedUnitCount := initializedUnitCount + 1;
					END_IF
				END_FOR
				
				//totalUnitCount := UPPER_BOUND(AutomationUnits, 1) - LOWER_BOUND(AutomationUnits, 1) + 1; 
				totalUnitCount := TO_DINT(_AutomationUnitCount); 
	
				IF initializedUnitCount = totalUnitCount THEN
					_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNING_STATE.RUNNING;
				END_IF						
			__CATCH(exceptionCode)
				exception := ExceptionManager.GetLastException(exceptionCode);

				_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNING_STATE.FAULT;
													
				fillErrorLog(Diagnostics.InitializationError, exception);
				
				_AdsLogger.TryLogException(exception);				
			__ENDTRY
						
		Automation.AUTOMATION_RUNNING_STATE.RUNNING, Automation.AUTOMATION_RUNNING_STATE.EMERGENCY:		
			//FOR i := LOWER_BOUND(AutomationUnits, 1) TO UPPER_BOUND(AutomationUnits, 1) DO
			FOR i := 0 TO _AutomationUnitCount - 1 DO
				__TRY
					IF AutomationUnits[i].EmergencyStopRequest THEN					
						_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNING_STATE.EMERGENCY;					
						AutomationUnits[i].EmergencyStop(_ExecutionContext);
					ELSE			
						_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNING_STATE.RUNNING;					
						AutomationUnits[i].Run(_ExecutionContext);			
					END_IF
				__CATCH(exceptionCode)
					exception := ExceptionManager.GetLastException(exceptionCode);
					
					IF exception.Fatal THEN
						_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNING_STATE.FAULT;					
						fillErrorLog(Diagnostics.CriticalError, exception);
					ELSIF NOT exception.Empty THEN
						fillErrorLog(Diagnostics.LastNonCriticalError, exception);
					END_IF
					
					_AdsLogger.TryLogException(exception);					
				__ENDTRY
				
				IF exception <> 0 AND_THEN exception.Fatal THEN
					EXIT;
				END_IF
			END_FOR
						
		Automation.AUTOMATION_RUNNING_STATE.FAULT:		
			//FOR i := LOWER_BOUND(AutomationUnits, 1) TO UPPER_BOUND(AutomationUnits, 1) DO
			FOR i := 0 TO _AutomationUnitCount - 1 DO
				__TRY
					AutomationUnits[i].HandleFault(_ExecutionContext);			
				__CATCH
					exception := ExceptionManager.GetLastException(exceptionCode);
					
					fillErrorLog(Diagnostics.HandleFaultError, exception);
					
					_AdsLogger.TryLogException(exception);		
				__ENDTRY
			END_FOR
	END_CASE
	
	Core.ExceptionManager.Cleanup();
END_IF

_AdsLogger.Execute();

GlobalState.CycleCounter := GlobalState.CycleCounter + 1;
GlobalState.CodeExecutionPhase := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="SimulationMode" Id="{7d432578-acb4-4dd3-acc6-8dd7c5d8c6c5}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL SimulationMode : BOOL]]></Declaration>
      <Get Name="Get" Id="{5238d38e-a178-4a48-817f-b0e7b9afc466}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[SimulationMode := _SimulationMode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Size" Id="{a27aa6e5-c889-4bcd-9a9a-1a312fc7b20e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{515c24f7-c31f-4315-a0f6-ba012cb92d16}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{f2dce25c-3e10-4ca3-baf9-9dc113064c6d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL State : Automation.AUTOMATION_RUNNING_STATE]]></Declaration>
      <Get Name="Get" Id="{62ee6d12-cc93-4e49-aed3-a8cc7d8a5a22}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := _ExecutionContext.AutomationRunnerState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryGetAutomationUnitByIndex" Id="{24622356-d6c8-4a30-a975-e7a7aa358d86}">
      <Declaration><![CDATA[METHOD FINAL TryGetAutomationUnitByIndex : IAutomationUnit
VAR_INPUT
	index : BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index < 0 OR_ELSE index >= _AutomationUnitCount OR_ELSE NOT __ISVALIDREF(AutomationUnits) THEN
	RETURN;
END_IF

TryGetAutomationUnitByIndex := AutomationUnits[index];]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrySetSimulationMode" Id="{de36a7a4-4bd3-4af6-8a6f-716c0a8b3ec9}">
      <Declaration><![CDATA[METHOD TrySetSimulationMode : BOOL
VAR_INPUT
	value : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_SimulationMode := value; 

TrySetSimulationMode := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>