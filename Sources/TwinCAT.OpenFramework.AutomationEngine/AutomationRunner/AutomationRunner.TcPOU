<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AutomationRunner" Id="{142225ba-ead8-4c1c-a7bd-6f13f6bbc05e}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ABSTRACT AutomationRunner
VAR_GENERIC CONSTANT
    _AutomationControllerCount : BYTE := 1;
END_VAR
EXTENDS Core.Object IMPLEMENTS IAutomationRunner
VAR
	_ExecutionContext : Automation.AUTOMATION_EXECUTION_CONTEXT;

	_SimulationMode : BOOL;

	_Diagnostics : AUTOMATION_RUNNER_DIAGNOSTICS;
END_VAR
VAR_STAT
    _InstanceCounter : BYTE := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service members" Id="{136ed185-96f6-42da-bd14-292cf8568f8a}" />
    <Property Name="AutomationControllerCount" Id="{b763fe3e-ac45-40f7-8e0a-80bac18bc801}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY AutomationControllerCount : BYTE]]></Declaration>
      <Get Name="Get" Id="{41fb60e1-30ec-4999-8fd3-d29a9cdfc0bd}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AutomationControllerCount := _AutomationControllerCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AutomationControllers" Id="{d916e7c7-2f82-41ab-b518-da33d8b6a0ac}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ABSTRACT AutomationControllers : REFERENCE TO ARRAY [0.._AutomationControllerCount - 1] OF IAutomationController]]></Declaration>
      <Get Name="Get" Id="{bbac70c1-0c12-4a6e-b63c-959272410e00}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CodeExecutionPhase" Id="{c4f37de1-c494-4e98-bff8-e5a29ee70657}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '0'}
PROPERTY FINAL CodeExecutionPhase : BOOL]]></Declaration>
      <Get Name="Get" Id="{cca78e62-5e2b-457e-91fc-ec64208d7a39}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CodeExecutionPhase := GlobalState.CodeExecutionPhase;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CycleCounter" Id="{b44e2d41-8633-4c1c-ad38-18becdb27866}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL CycleCounter : LWORD]]></Declaration>
      <Get Name="Get" Id="{3b2c949f-bedb-4db8-bff6-1b934597b8a9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CycleCounter := GlobalState.CycleCounter;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Diagnostics" Id="{8d5d1cb6-fbf7-445b-bf3b-946f6e4d2f7d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL Diagnostics : REFERENCE TO AUTOMATION_RUNNER_DIAGNOSTICS]]></Declaration>
      <Get Name="Get" Id="{ff612338-7273-4025-bfe7-69ef45fb7440}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Diagnostics REF= _Diagnostics;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{d9dc6fd8-04ec-4586-b655-20027fb1c3eb}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_InstanceCounter := _InstanceCounter + 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="fillErrorLog" Id="{d055dd31-f097-4bbe-8c3e-fd4d4c6e2672}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE fillErrorLog
VAR_IN_OUT
	targetErrorLog : AUTOMATION_ERROR_LOG;
	sourceException : IException;  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetErrorLog.ShortMessage := sourceException.GetMessage(FALSE, FALSE);
targetErrorLog.FullMessage := sourceException.GetMessage(TRUE, TRUE);
targetErrorLog.Source := sourceException.GetSourceDescription();
targetErrorLog.LocalTimestamp := sourceException.LocalTimestamp;
targetErrorLog.UtcTimestamp := sourceException.UtcTimestamp;]]></ST>
      </Implementation>
    </Method>
    <Method Name="handleRunning" Id="{485a79cd-7b23-4bb2-9ba1-baa8dc5453b5}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE handleRunning
VAR
	i : INT;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
	fatalError : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _AutomationControllerCount - 1 DO
	__TRY
		AutomationControllers[i].Run(_ExecutionContext);			
	__CATCH(exceptionCode)
		exception := ExceptionManager.GetLastException(exceptionCode);
		
		fatalError := fatalError OR exception.Fatal;
		
		CASE State OF
			Automation.AUTOMATION_RUNNER_STATE.INITIALIZING:
				_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNER_STATE.FAULT;					
				fillErrorLog(Diagnostics.InitializationError, exception);
			
			Automation.AUTOMATION_RUNNER_STATE.RUNNING:
				IF exception.Fatal THEN
					_ExecutionContext.AutomationRunnerState := Automation.AUTOMATION_RUNNER_STATE.FAULT;					
					fillErrorLog(Diagnostics.RunningFatalError, exception);
				ELSE
					fillErrorLog(Diagnostics.LastRunningNonFatalError, exception);					
				END_IF

			Automation.AUTOMATION_RUNNER_STATE.FAULT:
				fillErrorLog(Diagnostics.LastRunningNonFatalError, exception);					
		END_CASE
	__ENDTRY
END_FOR

IF State = AUTOMATION_RUNNER_STATE.INITIALIZING THEN
	FOR i := 0 TO _AutomationControllerCount - 1 DO
		IF AutomationControllers[i].State = Automation.AUTOMATION_CONTROLLER_STATE.INITIALIZING THEN
			RETURN;
		END_IF
	END_FOR
	
	_ExecutionContext.AutomationRunnerState := AUTOMATION_RUNNER_STATE.RUNNING;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{cddfd6b6-d698-4df7-b955-3cc076d37dea}">
      <Declaration><![CDATA[METHOD Run
VAR
	i : INT;
			
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GlobalState.CodeExecutionPhase := TRUE;

Core.SystemDateTimeManager.Execute();		

IF Core.SystemDateTimeManager.SystemTimeValid THEN
	_ExecutionContext.CycleLocalStartTime := Core.SystemDateTimeManager.SystemLocalDateTime;
	_ExecutionContext.CycleUtcStartTime := Core.SystemDateTimeManager.SystemUtcDateTime;
	_ExecutionContext.PreviousAutomationRunnerState := _ExecutionContext.AutomationRunnerState;
	
	handleRunning();
END_IF

Core.ExceptionManager.Cleanup();
Core.DynamicMemoryManager.CleanupMemory();

GlobalState.CycleCounter := GlobalState.CycleCounter + 1;
GlobalState.CodeExecutionPhase := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="SimulationMode" Id="{7d432578-acb4-4dd3-acc6-8dd7c5d8c6c5}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL SimulationMode : BOOL]]></Declaration>
      <Get Name="Get" Id="{5238d38e-a178-4a48-817f-b0e7b9afc466}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[SimulationMode := _SimulationMode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{f2dce25c-3e10-4ca3-baf9-9dc113064c6d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL State : Automation.AUTOMATION_RUNNER_STATE]]></Declaration>
      <Get Name="Get" Id="{62ee6d12-cc93-4e49-aed3-a8cc7d8a5a22}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := _ExecutionContext.AutomationRunnerState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StateName" Id="{58b8e5b1-72bd-47bf-97d3-37a11efb695b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY StateName : STRING]]></Declaration>
      <Get Name="Get" Id="{b78f5aab-7d64-4910-9ee4-7e1a78e3105f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StateName := TO_STRING(_ExecutionContext.AutomationRunnerState);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryGetAutomationControllerByIndex" Id="{24622356-d6c8-4a30-a975-e7a7aa358d86}">
      <Declaration><![CDATA[METHOD FINAL TryGetAutomationControllerByIndex : IAutomationController
VAR_INPUT
	index : BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index < 0 OR_ELSE index >= _AutomationControllerCount OR_ELSE NOT __ISVALIDREF(AutomationControllers) THEN
	RETURN;
END_IF

TryGetAutomationControllerByIndex := AutomationControllers[index];]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrySetSimulationMode" Id="{de36a7a4-4bd3-4af6-8a6f-716c0a8b3ec9}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD TrySetSimulationMode : BOOL
VAR_INPUT
	value : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_SimulationMode := value; 

TrySetSimulationMode := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>