<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AutomationRunnerAdsLogger" Id="{8a52fac2-0a5d-426b-84b1-4be3d24ef859}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK AutomationRunnerAdsLogger EXTENDS Core.Object
VAR
	_ClassName : STRING := __POUNAME();

	_DeferredLoggingRecords : Collections.List();
	_LastMessage : ERROR_MESSAGE;
	_NextMessageDelay : Timers.Timer;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{a303aabd-1131-4065-8bf6-69d62a2ea9a2}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{8fa6fd96-da3c-4d4f-9036-392ae9e00cc9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{4ca73342-3129-4db1-bfe8-ce9f31717da5}">
      <Declaration><![CDATA[METHOD Execute : BOOL
VAR
	_Record : DeferredLoggingRecord;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_NextMessageDelay.Execute();

IF NOT _NextMessageDelay.Busy AND_THEN _DeferredLoggingRecords.Count > 0 THEN
	_DeferredLoggingRecords.Get(0).CopyTo(_Record);

	// check for message flood
	IF _LastMessage <> _Record.Message THEN
		CASE _Record.Level OF
			LOGGING_LEVEL.INFORMATION:
				IF _Record.Level >= LoggingSettings.MinLoggingLevel THEN
					Tc2_System.ADSLOGSTR(Tc2_System.Global_Variables.ADSLOG_MSGTYPE_HINT, WSTRING_TO_STRING(_Record.Message), '');					
				END_IF
				
			LOGGING_LEVEL.WARNING:
				IF _Record.Level >= LoggingSettings.MinLoggingLevel THEN
					Tc2_System.ADSLOGSTR(Tc2_System.Global_Variables.ADSLOG_MSGTYPE_WARN, WSTRING_TO_STRING(_Record.Message), '');					
				END_IF
				
			LOGGING_LEVEL.ERROR:
				IF _Record.Level >= LoggingSettings.MinLoggingLevel THEN
					Tc2_System.ADSLOGSTR(Tc2_System.Global_Variables.ADSLOG_MSGTYPE_ERROR, WSTRING_TO_STRING(_Record.Message), '');
				END_IF
	
			LOGGING_LEVEL.FATAL_ERROR:
				Tc2_System.ADSLOGSTR(Tc2_System.Global_Variables.ADSLOG_MSGTYPE_ERROR, WSTRING_TO_STRING(_Record.Message), '');
		END_CASE
		
		_LastMessage := _Record.Message;
	END_IF
		
	_DeferredLoggingRecords.RemoveAt(0);
	
	_NextMessageDelay.TryStart();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{65b9e85b-cb70-4901-bf73-3fd94ecc6145}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_DeferredLoggingRecords.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{dedeb601-bba1-4edc-94d8-db9da6c7da29}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_NextMessageDelay.Interval := T#100MS;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{695541b8-e73b-4c08-b887-91a6e80a6878}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{85961c4e-4a8a-487a-a478-61fc48b9a371}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryLogException" Id="{faf433b2-0e52-4cd4-a411-728b0125685c}">
      <Declaration><![CDATA[METHOD TryLogException : BOOL
VAR_IN_OUT CONSTANT
	exception : IException;
END_VAR
VAR
	loggingLevel : LOGGING_LEVEL;
	aggregateException : Core.IAggregateException;
	innerException : Core.IException;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF exception = 0 THEN
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(exception, aggregateException) OR_ELSE aggregateException.InnerExceptionCount = 0 THEN
	TryLogException := TryLogMessage(LOGGING_LEVEL.ERROR, exception.GetMessage(TRUE, FALSE, TRUE));
ELSE
	IF aggregateException.InnerExceptionCount > 1 THEN
		// reverce order
		TryLogException := TryLogMessage(LOGGING_LEVEL.ERROR, "<<< aggregate exception end <<<");
		
		FOR i := TO_DINT(aggregateException.InnerExceptionCount) - 1 TO 0 BY -1 DO
			innerException := aggregateException.GetInnerException(i);
			
			TryLogException := TryLogException AND TryLogMessage(LOGGING_LEVEL.ERROR, WideStringHelper.ConcatStrings255("  ", innerException.GetMessage(TRUE, FALSE, TRUE)));		
		END_FOR
		
		TryLogException := TryLogException AND TryLogMessage(LOGGING_LEVEL.ERROR, ">>> aggregate exception start >>>");
	ELSE		
		innerException := aggregateException.GetInnerException(0);
		
		TryLogException := TryLogMessage(LOGGING_LEVEL.ERROR, innerException.GetMessage(TRUE, FALSE, TRUE));
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryLogMessage" Id="{0709925d-8c1e-4a16-8695-6c58268bf6fc}">
      <Declaration><![CDATA[METHOD TryLogMessage : BOOL
VAR_INPUT
	level : LOGGING_LEVEL;	
	message : ERROR_MESSAGE;
END_VAR
VAR
	loggingRecord : DeferredLoggingRecord;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// prevent memory leaking
IF _DeferredLoggingRecords.Count < 100 THEN	
	loggingRecord.Level := level;
	loggingRecord.Message := message;
	
	_DeferredLoggingRecords.Append(loggingRecord);		
	
	TryLogMessage := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>