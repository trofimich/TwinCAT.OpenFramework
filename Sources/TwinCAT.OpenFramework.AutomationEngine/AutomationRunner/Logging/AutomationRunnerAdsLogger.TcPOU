<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AutomationRunnerAdsLogger" Id="{8a52fac2-0a5d-426b-84b1-4be3d24ef859}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK AutomationRunnerAdsLogger EXTENDS Core.Object
VAR
	_ClassName : STRING := __POUNAME();
	
	_AutomationEngine : REFERENCE TO AutomationRunner;

	_DeferredLoggingRecords : Collections.List();
	_LastMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{a303aabd-1131-4065-8bf6-69d62a2ea9a2}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{8fa6fd96-da3c-4d4f-9036-392ae9e00cc9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{4ca73342-3129-4db1-bfe8-ce9f31717da5}">
      <Declaration><![CDATA[METHOD Execute : BOOL
VAR_INPUT
	codeExecutionPhase : BOOL;
END_VAR
VAR
	_Record : DeferredLoggingRecord;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE _DeferredLoggingRecords.Count > 0 DO
	_DeferredLoggingRecords.Get(0).CopyTo(_Record);

	IF codeExecutionPhase THEN
		LogMessage(_Record.Level, WideStringHelper.ConcatStrings255("~", _Record.Message));		
	END_IF
		
	_DeferredLoggingRecords.RemoveAt(0);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{65b9e85b-cb70-4901-bf73-3fd94ecc6145}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_DeferredLoggingRecords.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{20b723fe-fcfc-43ed-88ec-de7d067f4fc1}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
	automationRunner : REFERENCE TO AutomationRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_AutomationEngine REF= automationRunner;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogException" Id="{faf433b2-0e52-4cd4-a411-728b0125685c}">
      <Declaration><![CDATA[METHOD LogException
VAR_IN_OUT CONSTANT
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF exception.Fatal THEN
	LogMessage(LOGGING_LEVEL.FATAL_ERROR, exception.GetMessage(TRUE, TRUE));
ELSE
	LogMessage(LOGGING_LEVEL.ERROR, exception.GetMessage(TRUE, TRUE));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogMessage" Id="{0709925d-8c1e-4a16-8695-6c58268bf6fc}">
      <Declaration><![CDATA[METHOD LogMessage
VAR_INPUT
	level : LOGGING_LEVEL;	
	message : ERROR_MESSAGE;
END_VAR
VAR
	loggingRecord : DeferredLoggingRecord;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _AutomationEngine.CodeExecutionPhase THEN
	// check for message flood
	IF _LastMessage = message THEN
		RETURN;
	END_IF

	CASE level OF
		LOGGING_LEVEL.INFORMATION:
			IF level >= LoggingSettings.MinLoggingLevel THEN
				Tc2_System.ADSLOGSTR(ADSLOG_MSGTYPE_HINT AND ADSLOG_MSGTYPE_LOG, WSTRING_TO_STRING(message), '');					
			END_IF
			
		LOGGING_LEVEL.WARNING:
			IF level >= LoggingSettings.MinLoggingLevel THEN
				Tc2_System.ADSLOGSTR(ADSLOG_MSGTYPE_WARN AND ADSLOG_MSGTYPE_LOG, WSTRING_TO_STRING(message), '');					
			END_IF
			
		LOGGING_LEVEL.ERROR:
			IF level >= LoggingSettings.MinLoggingLevel THEN
				Tc2_System.ADSLOGSTR(ADSLOG_MSGTYPE_ERROR AND ADSLOG_MSGTYPE_LOG, WSTRING_TO_STRING(message), '');
			END_IF

		LOGGING_LEVEL.FATAL_ERROR:
			Tc2_System.ADSLOGSTR(ADSLOG_MSGTYPE_ERROR AND ADSLOG_MSGTYPE_LOG, WSTRING_TO_STRING(message), '');
	END_CASE
	
	_LastMessage := message;
ELSE
	// prevent memory leaking
	IF _DeferredLoggingRecords.Count < 100 THEN	
		loggingRecord.Level := level;
		loggingRecord.Message := message;
		
		_DeferredLoggingRecords.Append(loggingRecord);		
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{695541b8-e73b-4c08-b887-91a6e80a6878}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{85961c4e-4a8a-487a-a478-61fc48b9a371}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>