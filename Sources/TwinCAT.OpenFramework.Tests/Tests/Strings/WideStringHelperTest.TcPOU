<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="WideStringHelperTest" Id="{e08217c0-d613-42f5-a56c-21332ab5cf57}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK WideStringHelperTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AppendToTargetTest();]]></ST>
    </Implementation>
    <Method Name="AppendToTargetTest" Id="{88a48147-6775-40ec-9463-87ab1f92288c}">
      <Declaration><![CDATA[METHOD AppendToTargetTest
VAR
	testString : WSTRING;

	expectedString : WSTRING := "Original string + first appended string + second appended string";
	
	stringToAppend_1 : WSTRING := "first appended string";
	stringToAppend_2 : WSTRING := "second appended string";
	plusString : WSTRING := " + ";
	
	result : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

testString := "Original string";
WideStringHelper.AppendToTarget255(testString, " + ", stringToAppend_1, " + ", stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid StringHelper.AppendToTarget255 method result');

testString := "Original string";
result := WideStringHelper.TryAppendToTarget255(testString, " + ", stringToAppend_1, " + ", stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid StringHelper.TryAppendToTarget255 method result');
AssertEquals_BOOL(result, TRUE, 'Invalid StringHelper.TryAppendToTarget255 method returned result');

result := WideStringHelper.TryAppendToTarget255(testString, " + ", stringToAppend_1);
AssertEquals_BOOL(result, FALSE, 'Invalid StringHelper.TryAppendToTarget255 method returned result');

testString := "Original string";
WideStringHelper.AppendToTarget(testString, plusString);
WideStringHelper.AppendToTarget(testString, stringToAppend_1);
WideStringHelper.AppendToTarget(testString, plusString);
WideStringHelper.AppendToTarget(testString, stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid StringHelper.AppendToTarget method result');

testString := "Original string";
result := WideStringHelper.TryAppendToTarget(testString, plusString)
	AND WideStringHelper.TryAppendToTarget(testString, stringToAppend_1)
	AND WideStringHelper.TryAppendToTarget(testString, plusString)
	AND WideStringHelper.TryAppendToTarget(testString, stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid StringHelper.TryAppendToTarget method result');
AssertEquals_BOOL(result, TRUE, 'Invalid StringHelper.TryAppendToTarget METHOD returned result');

result := WideStringHelper.TryAppendToTarget(testString, plusString)
	AND WideStringHelper.TryAppendToTarget(testString, stringToAppend_1);
AssertEquals_BOOL(result, FALSE, 'Invalid StringHelper.TryAppendToTarget method returned result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{ca9a18e7-b919-42af-ba70-cb910ef15d65}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{7a3410a5-d4d1-4f4d-a0ce-381442be6d8a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NamespaceName" Id="{9c8b0f25-66d7-4588-bb70-1d74d6dd88d1}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{1bee5dd9-8800-4f7c-af30-ffe904db655f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>