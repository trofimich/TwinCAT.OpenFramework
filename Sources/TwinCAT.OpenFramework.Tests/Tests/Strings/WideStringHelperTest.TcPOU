<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="WideStringHelperTest" Id="{e08217c0-d613-42f5-a56c-21332ab5cf57}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK WideStringHelperTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AppendToTargetTest();
ReplaceInSourceTest();
SplitTest();
TrimTest();]]></ST>
    </Implementation>
    <Method Name="AppendToTargetTest" Id="{88a48147-6775-40ec-9463-87ab1f92288c}">
      <Declaration><![CDATA[METHOD AppendToTargetTest
VAR
	testString : WSTRING;

	expectedString : WSTRING := "Original string + first appended string + second appended string";
	
	stringToAppend_1 : WSTRING := "first appended string";
	stringToAppend_2 : WSTRING := "second appended string";
	plusString : WSTRING := " + ";
	
	result : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

testString := "Original string";
WideStringHelper.AppendToTarget255(testString, " + ", stringToAppend_1, " + ", stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid WideStringHelper.AppendToTarget255 method result');

testString := "Original string";
result := WideStringHelper.TryAppendToTarget255(testString, " + ", stringToAppend_1, " + ", stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid WideStringHelper.TryAppendToTarget255 method result');
AssertEquals_BOOL(result, TRUE, 'Invalid WideStringHelper.TryAppendToTarget255 method returned result');

result := WideStringHelper.TryAppendToTarget255(testString, " + ", stringToAppend_1);
AssertEquals_BOOL(result, FALSE, 'Invalid WideStringHelper.TryAppendToTarget255 method returned result');

testString := "Original string";
WideStringHelper.AppendToTarget(testString, plusString);
WideStringHelper.AppendToTarget(testString, stringToAppend_1);
WideStringHelper.AppendToTarget(testString, plusString);
WideStringHelper.AppendToTarget(testString, stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid WideStringHelper.AppendToTarget method result');

testString := "Original string";
result := WideStringHelper.TryAppendToTarget(testString, plusString)
	AND WideStringHelper.TryAppendToTarget(testString, stringToAppend_1)
	AND WideStringHelper.TryAppendToTarget(testString, plusString)
	AND WideStringHelper.TryAppendToTarget(testString, stringToAppend_2);
AssertEquals_WSTRING(expectedString, testString, 'Invalid WideStringHelper.TryAppendToTarget method result');
AssertEquals_BOOL(result, TRUE, 'Invalid WideStringHelper.TryAppendToTarget METHOD returned result');

result := WideStringHelper.TryAppendToTarget(testString, plusString)
	AND WideStringHelper.TryAppendToTarget(testString, stringToAppend_1);
AssertEquals_BOOL(result, FALSE, 'Invalid WideStringHelper.TryAppendToTarget method returned result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{ca9a18e7-b919-42af-ba70-cb910ef15d65}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{7a3410a5-d4d1-4f4d-a0ce-381442be6d8a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NamespaceName" Id="{9c8b0f25-66d7-4588-bb70-1d74d6dd88d1}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{1bee5dd9-8800-4f7c-af30-ffe904db655f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReplaceInSourceTest" Id="{c1fd0c57-57d3-4910-a593-eb3ffa46d556}">
      <Declaration><![CDATA[METHOD ReplaceInSourceTest
VAR
	testString : WSTRING(18);
	
	replacementCount : UINT;
	result : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

testString := "abcd_abcd_abcd";
WideStringHelper.ReplaceInSource(testString, "bc", "0", replacementCount => replacementCount);
AssertEquals_WSTRING("a0d_a0d_a0d", testString, 'Invalid WideStringHelper.ReplaceInSource result string');
AssertEquals_UINT(3, replacementCount, 'Invalid WideStringHelper.ReplaceInSource replacingCount count');

testString := "abcd_abcd_abcd";
WideStringHelper.ReplaceInSource(testString, "bc", "123", replacementCount => replacementCount);
AssertEquals_WSTRING("a123d_a123d_a123d", testString, 'Invalid WideStringHelper.ReplaceInSource result string');
AssertEquals_UINT(3, replacementCount, 'Invalid WideStringHelper.ReplaceInSource replacingCount count');

testString := "abcd_abcd_abcd";
result := WideStringHelper.TryReplaceInSource(testString, "bc", "0", replacementCount => replacementCount);
AssertEquals_BOOL(TRUE, result, 'Invalid WideStringHelper.TryReplaceInSource result');
AssertEquals_WSTRING("a0d_a0d_a0d", testString, 'Invalid WideStringHelper.TryReplaceInSource result string');
AssertEquals_UINT(3, replacementCount, 'Invalid WideStringHelper.TryReplaceInSource replacingCount count');

testString := "abcd_abcd_abcd";
result := WideStringHelper.TryReplaceInSource(testString, "bc", "123", 1, 1, replacementCount => replacementCount);
AssertEquals_BOOL(TRUE, result, 'Invalid WideStringHelper.TryReplaceInSource result');
AssertEquals_WSTRING("abcd_a123d_abcd", testString, 'Invalid WideStringHelper.TryReplaceInSource result string');
AssertEquals_UINT(1, replacementCount, 'Invalid WideStringHelper.TryReplaceInSource replacingCount count');

testString := "abcd_abcd_abcd";
result := WideStringHelper.TryReplaceInSource(testString, "bc", "1234", replacementCount => replacementCount);
AssertEquals_BOOL(FALSE, result, 'Invalid WideStringHelper.TryReplaceInSource memory handling');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SplitTest" Id="{71d1bd73-69e5-47d2-9c99-6ebd1c10e55b}">
      <Declaration><![CDATA[METHOD SplitTest
VAR
	stringToSplit : WSTRING := "123 , 456, 789 ,,0";
	separator : WSTRING := ",";
	
	splitter : Core.WideStringSplittingEnumerator;
	currentEntry : WSTRING;
	i : BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

// simple splitting
splitter := Core.WideStringHelper.CreateSplitter(stringToSplit, separator);

i := 0;

WHILE splitter.MoveNext() DO
	currentEntry := splitter.CurrentEntry;
	
	CASE i OF
		0:
			AssertEquals_WSTRING("123 ", currentEntry, 'Invalid WideStringSplitter entry #0');			
		1:
			AssertEquals_WSTRING(" 456", currentEntry, 'Invalid WideStringSplitter entry #1');
		2:
			AssertEquals_WSTRING(" 789 ", currentEntry, 'Invalid WideStringSplitter entry #2');
		3:
			AssertEquals_WSTRING("", currentEntry, 'Invalid WideStringSplitter entry #3');
		4:
			AssertEquals_WSTRING("0", currentEntry, 'Invalid WideStringSplitter entry #4');
	END_CASE	
	
	i := i + 1;
END_WHILE

// splitting with MaxCount, trimming and empty string removing 
splitter := Core.WideStringHelper.CreateSplitter(stringToSplit, separator, 3, TRUE, TRUE);

i := 0;

WHILE splitter.MoveNext() DO
	currentEntry := splitter.CurrentEntry;
	
	CASE i OF
		0:
			AssertEquals_WSTRING("123", currentEntry, 'Invalid WideStringSplitter entry #0');			
		1:
			AssertEquals_WSTRING("456", currentEntry, 'Invalid WideStringSplitter entry #1');
		2:
			AssertEquals_WSTRING("789", currentEntry, 'Invalid WideStringSplitter entry #2');
		ELSE
			AssertFalse(i > 3, 'Invalid WideStringSplitter MaxCount handling');
	END_CASE	
	
	i := i + 1;
END_WHILE

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrimTest" Id="{a9bd8a2b-d5f3-4fc9-867e-a9c2e4a29101}">
      <Declaration><![CDATA[METHOD TrimTest
VAR
	trimString : WSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

trimString := "  123   ";
Core.WideStringHelper.TrimChar(trimString, trimMode := TRIM_MODE.LEFT_AND_RIGHT);
AssertEquals_WSTRING("123", trimString, 'Invalid wide string trimming result (TRIM_MODE = LEFT_AND_RIGHT)');			

trimString := "  123   ";
Core.WideStringHelper.TrimChar(trimString, trimMode := TRIM_MODE.LEFT);
AssertEquals_WSTRING("123   ", trimString, 'Invalid wide string trimming result (TRIM_MODE = LEFT)');			

trimString := "  123   ";
Core.WideStringHelper.TrimChar(trimString, trimMode := TRIM_MODE.RIGHT);
AssertEquals_WSTRING("  123", trimString, 'Invalid wide string trimming result (TRIM_MODE = RIGHT)');			

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>