<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="StringHelperTest" Id="{c2b9cac4-73fd-4d3d-8df7-b5beb6b26c4c}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK StringHelperTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AppendToTargetTest();]]></ST>
    </Implementation>
    <Method Name="AppendToTargetTest" Id="{dfc63422-169c-4318-97d7-f4972908ec69}">
      <Declaration><![CDATA[METHOD AppendToTargetTest
VAR
	testString : STRING;

	expectedString : STRING := 'Original string + first appended string + second appended string';
	
	stringToAppend_1 : STRING := 'first appended string';
	stringToAppend_2 : STRING := 'second appended string';
	plusString : STRING := ' + ';
	
	result : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

testString := 'Original string';
StringHelper.AppendToTarget255(testString, ' + ', stringToAppend_1, ' + ', stringToAppend_2);
AssertEquals_STRING(expectedString, testString, 'Invalid StringHelper.AppendToTarget255 method result');

testString := 'Original string';
result := StringHelper.TryAppendToTarget255(testString, ' + ', stringToAppend_1, ' + ', stringToAppend_2);
AssertEquals_STRING(expectedString, testString, 'Invalid StringHelper.TryAppendToTarget255 method result');
AssertEquals_BOOL(result, TRUE, 'Invalid StringHelper.TryAppendToTarget255 method returned result');

result := StringHelper.TryAppendToTarget255(testString, ' + ', stringToAppend_1);
AssertEquals_BOOL(result, FALSE, 'Invalid StringHelper.TryAppendToTarget255 method returned result');

testString := 'Original string';
StringHelper.AppendToTarget(testString, plusString);
StringHelper.AppendToTarget(testString, stringToAppend_1);
StringHelper.AppendToTarget(testString, plusString);
StringHelper.AppendToTarget(testString, stringToAppend_2);
AssertEquals_STRING(expectedString, testString, 'Invalid StringHelper.AppendToTarget method result');

testString := 'Original string';
result := StringHelper.TryAppendToTarget(testString, plusString)
	AND StringHelper.TryAppendToTarget(testString, stringToAppend_1)
	AND StringHelper.TryAppendToTarget(testString, plusString)
	AND StringHelper.TryAppendToTarget(testString, stringToAppend_2);
AssertEquals_STRING(expectedString, testString, 'Invalid StringHelper.TryAppendToTarget method result');
AssertEquals_BOOL(result, TRUE, 'Invalid StringHelper.TryAppendToTarget method returned result');

result := StringHelper.TryAppendToTarget(testString, plusString)
	AND StringHelper.TryAppendToTarget(testString, stringToAppend_1);
AssertEquals_BOOL(result, FALSE, 'Invalid StringHelper.TryAppendToTarget method returned result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{2c9c6e6b-374c-4557-a5f7-66b3f4a3dec8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{b5029a49-066d-413a-8659-6e53eeb5e5db}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>