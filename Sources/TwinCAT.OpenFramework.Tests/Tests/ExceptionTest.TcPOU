<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="ExceptionTest" Id="{26e3c0f6-79be-0fd8-2416-047495069edc}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK ExceptionTest EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestStandardExceptions();
TestAggregateException();]]></ST>
    </Implementation>
    <Method Name="TestAggregateException" Id="{a0a36685-039a-455b-9e90-8d283dc9d749}">
      <Declaration><![CDATA[METHOD TestAggregateException
VAR
	exception1Message : WSTRING := "Simple exception 1 thrown";
	exception2Message : WSTRING := "Simple exception 2 thrown";
	exception3Message : WSTRING := "Simple exception 3 thrown";
	
	errorMessage : Core.ERROR_MESSAGE;
	
	standardException1 : Core.StandardException;
	standardException2 : Core.StandardException;
	standardException3 : Core.StandardException;

	caughtException : Core.IException;
	
	aggregateException : Core.AggregateException;
	
	exceptionCode : __SYSTEM.ExceptionCode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

__TRY
	standardException1.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION(), exception1Message, 0, FALSE, 0);
__CATCH(exceptionCode)
	caughtException := Core.ExceptionManager.GetLastException(exceptionCode);
	aggregateException.AddInnerException(caughtException);
__ENDTRY

__TRY
	standardException2.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION(), exception2Message, 0, FALSE, 0);
__CATCH(exceptionCode)
	caughtException := Core.ExceptionManager.GetLastException(exceptionCode);
	aggregateException.AddInnerException(caughtException);
__ENDTRY

__TRY
	standardException3.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION(), exception3Message, 0, FALSE, 0);
__CATCH(exceptionCode)
	caughtException := Core.ExceptionManager.GetLastException(exceptionCode);
	aggregateException.AddInnerException(caughtException);
__ENDTRY

__TRY
	aggregateException.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION());
__CATCH(exceptionCode)
	errorMessage := Core.ExceptionManager.GetLastException(exceptionCode).GetMessage();
	
	AssertEquals_INT(
		1, 
		Tc2_Standard.WFIND(errorMessage, "3"), 
		'Wrong aggregate exception1 message caught');	
__ENDTRY

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestStandardExceptions" Id="{c3d65c3a-6585-4f11-ab6e-5902e1fc565c}">
      <Declaration><![CDATA[METHOD TestStandardExceptions
VAR
	exception1Message : WSTRING := "Simple exception 1";
	exception2Message : WSTRING := "Simple exception 2";
	exception3Message : WSTRING := "Simple exception 3";
	
	expectedErrorMessage : WSTRING(255);
	recievedErrorMessage : WSTRING(255);
	
	standardException1 : Core.StandardException;
	standardException2 : Core.StandardException;
	standardException3 : Core.StandardException;
	
	caughtException : Core.IException;
	
	exceptionCode : __SYSTEM.ExceptionCode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

__TRY
	standardException1.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION(), exception1Message, 0, FALSE, 0);
__CATCH(exceptionCode)
	caughtException := Core.ExceptionManager.GetLastException(exceptionCode);
	
	expectedErrorMessage := exception2Message;
	recievedErrorMessage := caughtException.GetMessage();
	
	AssertEquals_WSTRING(
		exception1Message, 
		recievedErrorMessage, 
		'Wrong exception1 message caught');	
__ENDTRY

__TRY
	standardException2.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION(), exception2Message, 0, FALSE, caughtException);
__CATCH(exceptionCode)
	caughtException := Core.ExceptionManager.GetLastException(exceptionCode);
	
	expectedErrorMessage := Core.WideStringHelper.ConcatStrings255(exception2Message, " -> ", exception1Message);
	recievedErrorMessage := caughtException.GetMessage();
	
	AssertEquals_WSTRING(
		expectedErrorMessage, 
		recievedErrorMessage, 
		'Wrong exception2 message caught');	
__ENDTRY

__TRY
	standardException3.Throw(CurrentNamespace.Name, 'ExceptionTest', __POUNAME(), __POSITION(), exception3Message, 0, FALSE, caughtException);
__CATCH(exceptionCode)
	caughtException := Core.ExceptionManager.GetLastException(exceptionCode);
	
	expectedErrorMessage := Core.WideStringHelper.ConcatStrings255(exception3Message, " -> ", exception2Message, " -> ", exception1Message);
	recievedErrorMessage := caughtException.GetMessage();
	
	AssertEquals_WSTRING(
		expectedErrorMessage, 
		recievedErrorMessage, 
		'Wrong exception3 message caught');	
__ENDTRY

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>