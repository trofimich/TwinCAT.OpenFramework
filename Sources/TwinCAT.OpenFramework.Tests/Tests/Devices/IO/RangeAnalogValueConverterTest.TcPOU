<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="RangeAnalogValueConverterTest" Id="{79b9f598-a289-4b39-880b-c398c6b2163a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RangeAnalogValueConverterTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test16Bit();
Test32Bit();]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{2cedf406-06bf-4ca8-969e-34e0a5d88999}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{dabe126b-05d1-4c91-bcc1-3bbe4e426142}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NamespaceName" Id="{8cf77838-5df4-47e4-81ac-ad456d3e7fe7}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{e69dd118-f7ef-4b6a-b34d-18b529f89be1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Test16Bit" Id="{96de00d9-bcfe-4422-835a-9eb9628c25c8}">
      <Declaration><![CDATA[METHOD Test16Bit
VAR
	converter_From_0_To_10 : TOF_Devices_IO.RangeInt16AnalogValueConverter(SignedInt16Helper.MIN_VALUE, SignedInt16Helper.MAX_VALUE, 0, 10);
	converter_From_Minus20_To_Plus20 : TOF_Devices_IO.RangeInt16AnalogValueConverter(SignedInt16Helper.MIN_VALUE, SignedInt16Helper.MAX_VALUE, -20, +20);
	
	digitizedValue : TOF_Devices_IO.DIGITIZED_ANALOG_VALUE;
	analogValue : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

// from analog value conversion 

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(0);
AssertEquals_INT(Expected := -32768, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 0');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(2.5);
AssertEquals_INT(Expected := -16384, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 2.5');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(5);
AssertEquals_INT(Expected := -1, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 5');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(7.5);
AssertEquals_INT(Expected := 16383, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 7.5');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(10);
AssertEquals_INT(Expected := 32767, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 10');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(-20);
AssertEquals_INT(Expected := -32768, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 0');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(-10);
AssertEquals_INT(Expected := -16384, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 2.5');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(0);
AssertEquals_INT(Expected := -1, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 5');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(+10);
AssertEquals_INT(Expected := 16383, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 7.5');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(+20);
AssertEquals_INT(Expected := 32767, Actual := digitizedValue._16Bit, Message := 'Invalid conversion from analog value 10');

// to analog value conversion 

digitizedValue._16Bit := -32768;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(0, analogValue, 0.01, 'Invalid conversion from digitized value -32768');

digitizedValue._16Bit := -16384;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(2.5, analogValue, 0.01, 'Invalid conversion from digitized value -16384');

digitizedValue._16Bit := 0;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(5, analogValue, 0.01, 'Invalid conversion from digitized value 0');

digitizedValue._16Bit := +16383;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(7.5, analogValue, 0.01, 'Invalid conversion from digitized value +16383');

digitizedValue._16Bit := +32767;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(10, analogValue, 0.01, 'Invalid conversion from digitized value +32767');

digitizedValue._16Bit := -32768;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(-20, analogValue, 0.01, 'Invalid conversion from digitized value -32768');

digitizedValue._16Bit := -16384;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(-10, analogValue, 0.01, 'Invalid conversion from digitized value -16384');

digitizedValue._16Bit := 0;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(0, analogValue, 0.01, 'Invalid conversion from digitized value 0');

digitizedValue._16Bit := +16383;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(+10, analogValue, 0.01, 'Invalid conversion from digitized value +16383');

digitizedValue._16Bit := +32767;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(+20, analogValue, 0.01, 'Invalid conversion from digitized value +32767');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test32Bit" Id="{b9c0cca6-0b4e-476e-a5b4-25ccb56c6e0d}">
      <Declaration><![CDATA[METHOD Test32Bit
VAR
	converter_From_0_To_10 : TOF_Devices_IO.RangeInt32AnalogValueConverter(SignedInt32Helper.MIN_24BIT_VALUE, SignedInt32Helper.MAX_24BIT_VALUE, 0, 10);
	converter_From_Minus20_To_Plus20 : TOF_Devices_IO.RangeInt32AnalogValueConverter(SignedInt32Helper.MIN_24BIT_VALUE, SignedInt32Helper.MAX_24BIT_VALUE, -20, +20);

	digitizedValue : TOF_Devices_IO.DIGITIZED_ANALOG_VALUE;
	analogValue : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

// from analog value conversion 

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(0);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MIN_24BIT_VALUE, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 0');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(2.5);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MIN_24BIT_VALUE / 2, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 2.5');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(5);
AssertEquals_DINT(Expected := -1, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 5');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(7.5);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MAX_24BIT_VALUE / 2, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 7.5');

digitizedValue := converter_From_0_To_10.ConvertAnalogValueToDigitizedValue(10);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MAX_24BIT_VALUE, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 10');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(-20);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MIN_24BIT_VALUE, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 0');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(-10);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MIN_24BIT_VALUE / 2, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 2.5');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(0);
AssertEquals_DINT(Expected := -1, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 5');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(+10);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MAX_24BIT_VALUE / 2, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 7.5');

digitizedValue := converter_From_Minus20_To_Plus20.ConvertAnalogValueToDigitizedValue(+20);
AssertEquals_DINT(Expected := Core.SignedInt32Helper.MAX_24BIT_VALUE, Actual := digitizedValue._32Bit, Message := 'Invalid conversion from analog value 10');

// to analog value conversion 

digitizedValue._32Bit := Core.SignedInt32Helper.MIN_24BIT_VALUE;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(0, analogValue, 0.01, 'Invalid conversion from digitized value -32768');

digitizedValue._32Bit := Core.SignedInt32Helper.MIN_24BIT_VALUE / 2;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(2.5, analogValue, 0.01, 'Invalid conversion from digitized value -16384');

digitizedValue._32Bit := 0;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(5, analogValue, 0.01, 'Invalid conversion from digitized value 0');

digitizedValue._32Bit := Core.SignedInt32Helper.MAX_24BIT_VALUE / 2;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(7.5, analogValue, 0.01, 'Invalid conversion from digitized value +16383');

digitizedValue._32Bit := Core.SignedInt32Helper.MAX_24BIT_VALUE;
analogValue := converter_From_0_To_10.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(10, analogValue, 0.01, 'Invalid conversion from digitized value +32767');

digitizedValue._32Bit := Core.SignedInt32Helper.MIN_24BIT_VALUE;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(-20, analogValue, 0.01, 'Invalid conversion from digitized value -32768');

digitizedValue._32Bit := Core.SignedInt32Helper.MIN_24BIT_VALUE / 2;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(-10, analogValue, 0.01, 'Invalid conversion from digitized value -16384');

digitizedValue._32Bit := 0;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(0, analogValue, 0.01, 'Invalid conversion from digitized value 0');

digitizedValue._32Bit := Core.SignedInt32Helper.MAX_24BIT_VALUE / 2;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(+10, analogValue, 0.01, 'Invalid conversion from digitized value +16383');

digitizedValue._32Bit := Core.SignedInt32Helper.MAX_24BIT_VALUE;
analogValue := converter_From_Minus20_To_Plus20.ConvertDigitizedValueToAnalogValue(digitizedValue);
AssertEquals_LREAL(+20, analogValue, 0.01, 'Invalid conversion from digitized value +32767');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>