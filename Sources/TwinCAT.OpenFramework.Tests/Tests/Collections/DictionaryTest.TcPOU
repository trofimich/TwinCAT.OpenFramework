<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="DictionaryTest" Id="{d159496d-599c-4433-8a53-56a797e612ad}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK DictionaryTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();

	_KeyArray : ARRAY [0..6] OF INT := [0, 1, 2, 3, 4, 5, 6];
	_ValueArray : ARRAY [0..6] OF STRING := ['String0', 'String1', 'String2', 'String3', 'String4', 'String5', 'String6'];
	
	_DictionaryToTest : Collections.Dictionary(0, 0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
SetAndGet();
Remove();
Contains();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{07735b46-b61a-4859-ad51-ad205f010448}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_DictionaryToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := _DictionaryToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{18a79df6-1c99-4597-a4c1-9c4b75e55bd3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{9ed47bd1-8e2f-45d0-9a69-b917206a9eab}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{3d0356bb-823f-44ba-902f-4d6182578f27}">
      <Declaration><![CDATA[METHOD Clear 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_DictionaryToTest.Clear();

AssertEquals_DINT(Expected := 0, Actual := _DictionaryToTest._ArrayLength, Message := 'Invalid memory size after Clear');
AssertEquals_DINT(Expected := 0, Actual := _DictionaryToTest.Count, Message := 'Invalid element count after Clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{d3baf0b9-cf4b-491a-b057-832b3cf2b167}">
      <Declaration><![CDATA[METHOD Contains]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_DictionaryToTest
	.SetCopy(_KeyArray[6], _ValueArray[6])
	.SetCopy(_KeyArray[5], _ValueArray[5])
	.SetCopy(_KeyArray[4], _ValueArray[4])
	.SetCopy(_KeyArray[3], _ValueArray[3])
	.SetCopy(_KeyArray[2], _ValueArray[2])
	.SetCopy(_KeyArray[1], _ValueArray[1])
	.SetCopy(_KeyArray[0], _ValueArray[0])
	.SetCopy(_KeyArray[3], _ValueArray[3]);

AssertEquals_BOOL(Expected := TRUE, Actual := _DictionaryToTest.ContainsKey(_KeyArray[3]), Message := 'ContainsKey did not find the value');
AssertEquals_BOOL(Expected := TRUE, Actual := _DictionaryToTest.ContainsGenericKey(GenericValueFactory.FromIntValue(3)), Message := 'ContainsGenericKey did not find the value');
AssertEquals_BOOL(Expected := FALSE, Actual := _DictionaryToTest.ContainsGenericKey(GenericValueFactory.FromIntValue(9)), Message := 'ContainsGenericKey found not existing value');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{93d5646e-318b-4558-ad34-b55297d3d003}">
      <Declaration><![CDATA[METHOD Remove]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_DictionaryToTest.SetCopy(_KeyArray[6], _ValueArray[6]);
_DictionaryToTest.SetCopy(_KeyArray[5], _ValueArray[5]);
_DictionaryToTest.SetCopy(_KeyArray[4], _ValueArray[4]);
_DictionaryToTest.SetCopy(_KeyArray[3], _ValueArray[3]);
_DictionaryToTest.SetCopy(_KeyArray[2], _ValueArray[2]);
_DictionaryToTest.SetCopy(_KeyArray[1], _ValueArray[1]);
_DictionaryToTest.SetCopy(_KeyArray[0], _ValueArray[0]);
_DictionaryToTest.SetCopy(_KeyArray[3], _ValueArray[3]);

_DictionaryToTest.RemoveAt(3);

AssertEquals_DINT(Expected := 6, Actual := _DictionaryToTest.Count, Message := 'Invalid element count after RemoveAt');
AssertEquals_INT(Expected := 3, Actual := TO_INT(_DictionaryToTest.GetKeyPosition(_KeyArray[4])), Message := 'Invalid element position after RemoveAt');

_DictionaryToTest.TryRemoveByKey(_KeyArray[2]);

AssertEquals_DINT(Expected := 5, Actual := _DictionaryToTest.Count, Message := 'Invalid element count after TryRemoveByKey');
AssertEquals_INT(Expected := 2, Actual := TO_INT(_DictionaryToTest.GetKeyPosition(_KeyArray[4])), Message := 'Invalid element position after TryRemoveByKey');

_DictionaryToTest.TryRemoveByGenericKey(Core.GenericValueFactory.FromIntValue(1));

AssertEquals_DINT(Expected := 4, Actual := _DictionaryToTest.Count, Message := 'Invalid element count after TryRemoveByGenericKey');
AssertEquals_INT(Expected := 1, Actual := TO_INT(_DictionaryToTest.GetKeyPosition(_KeyArray[4])), Message := 'Invalid element position after TryRemoveByGenericKey');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAndGet" Id="{fbd1236e-63ef-48f9-bcb2-74185b7c5660}">
      <Declaration><![CDATA[METHOD SetAndGet
VAR
	genericValue : Core.GENERIC_VALUE;
	keyValuePair : Core.GENERIC_KEY_VALUE_PAIR;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_DictionaryToTest
	.SetCopy(_KeyArray[6], _ValueArray[6])
	.SetCopy(_KeyArray[5], _ValueArray[5])
	.SetCopy(_KeyArray[4], _ValueArray[4])
	.SetCopy(_KeyArray[3], _ValueArray[3])
	.SetCopy(_KeyArray[2], _ValueArray[2])
	.SetCopy(_KeyArray[1], _ValueArray[1])
	.SetCopy(_KeyArray[0], _ValueArray[0])
	.SetCopy(_KeyArray[3], _ValueArray[3])
	.SetGeneric(Core.GenericValueFactory.FromIntValue(5), Core.GenericValueFactory.FromStringValue('String5'));

AssertEquals_DINT(Expected := 7, Actual := _DictionaryToTest.Count, Message := 'Invalid element count after Set');

AssertEquals_INT(Expected := 2, Actual := TO_INT(_DictionaryToTest.GetKeyPosition(_KeyArray[2])), Message := 'Invalid element position returned after Set and GetKeyPosition');

AssertEquals_INT(Expected := 2, Actual := TO_INT(_DictionaryToTest.GetGenericKeyPosition(Core.GenericValueFactory.FromIntValue(2))), Message := 'Invalid element position returned after Set and GetGenericKeyPosition');

_DictionaryToTest.TryGetValueByKey(_KeyArray[2], value => genericValue);
AssertEquals_STRING(Expected := 'String2', Actual := genericValue.AsString255(), Message := 'Invalid element found by TryGetValueByKey');

_DictionaryToTest.TryGetValueByGenericKey(Core.GenericValueFactory.FromIntValue(2), value => genericValue);
AssertEquals_STRING(Expected := 'String2', Actual := genericValue.AsString255(), Message := 'Invalid element found by TryGetValueByGenericKey');

keyValuePair := _DictionaryToTest.GetKeyValuePairByIndex(3);
AssertEquals_STRING(Expected := 'String3', Actual := keyValuePair.Value.AsString255(), Message := 'Invalid element position found by GetKeyValuePairByIndex');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>