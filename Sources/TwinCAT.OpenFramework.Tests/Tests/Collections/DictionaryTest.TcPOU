<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="DictionaryTest" Id="{d159496d-599c-4433-8a53-56a797e612ad}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK DictionaryTest EXTENDS TcUnit.FB_TestSuite
VAR
	keyArray : ARRAY [0..6] OF INT := [0, 1, 2, 3, 4, 5, 6];
	valueArray : ARRAY [0..6] OF STRING := ['String0', 'String1', 'String2', 'String3', 'String4', 'String5', 'String6'];
	
	dictionaryToTest : Collections.Dictionary();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
SetAndGet();
Remove();
Contains();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{07735b46-b61a-4859-ad51-ad205f010448}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := dictionaryToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{3d0356bb-823f-44ba-902f-4d6182578f27}">
      <Declaration><![CDATA[METHOD Clear 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Clear();

AssertEquals_DINT(Expected := 0, Actual := dictionaryToTest._ArrayLength, Message := 'Invalid memory size after Clear');
AssertEquals_DINT(Expected := 0, Actual := dictionaryToTest.Count, Message := 'Invalid element count after Clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{d3baf0b9-cf4b-491a-b057-832b3cf2b167}">
      <Declaration><![CDATA[METHOD Contains]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest
	.Set(keyArray[6], valueArray[6])
	.Set(keyArray[5], valueArray[5])
	.Set(keyArray[4], valueArray[4])
	.Set(keyArray[3], valueArray[3])
	.Set(keyArray[2], valueArray[2])
	.Set(keyArray[1], valueArray[1])
	.Set(keyArray[0], valueArray[0])
	.Set(keyArray[3], valueArray[3]);

AssertEquals_BOOL(Expected := TRUE, Actual := dictionaryToTest.ContainsKey(keyArray[3]), Message := 'ContainsKey did not find the value');
AssertEquals_BOOL(Expected := TRUE, Actual := dictionaryToTest.ContainsGenericKey(GenericValueFactory.FromIntValue(3)), Message := 'ContainsGenericKey did not find the value');
AssertEquals_BOOL(Expected := FALSE, Actual := dictionaryToTest.ContainsGenericKey(GenericValueFactory.FromIntValue(9)), Message := 'ContainsGenericKey found not existing value');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{93d5646e-318b-4558-ad34-b55297d3d003}">
      <Declaration><![CDATA[METHOD Remove]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Set(keyArray[6], valueArray[6]);
dictionaryToTest.Set(keyArray[5], valueArray[5]);
dictionaryToTest.Set(keyArray[4], valueArray[4]);
dictionaryToTest.Set(keyArray[3], valueArray[3]);
dictionaryToTest.Set(keyArray[2], valueArray[2]);
dictionaryToTest.Set(keyArray[1], valueArray[1]);
dictionaryToTest.Set(keyArray[0], valueArray[0]);
dictionaryToTest.Set(keyArray[3], valueArray[3]);

dictionaryToTest.RemoveAt(3);

AssertEquals_DINT(Expected := 6, Actual := dictionaryToTest.Count, Message := 'Invalid element count after RemoveAt');
AssertEquals_INT(Expected := 3, Actual := TO_INT(dictionaryToTest.GetKeyPosition(keyArray[4])), Message := 'Invalid element position after RemoveAt');

dictionaryToTest.TryRemoveByKey(keyArray[2]);

AssertEquals_DINT(Expected := 5, Actual := dictionaryToTest.Count, Message := 'Invalid element count after TryRemoveByKey');
AssertEquals_INT(Expected := 2, Actual := TO_INT(dictionaryToTest.GetKeyPosition(keyArray[4])), Message := 'Invalid element position after TryRemoveByKey');

dictionaryToTest.TryRemoveByGenericKey(Core.GenericValueFactory.FromIntValue(1));

AssertEquals_DINT(Expected := 4, Actual := dictionaryToTest.Count, Message := 'Invalid element count after TryRemoveByGenericKey');
AssertEquals_INT(Expected := 1, Actual := TO_INT(dictionaryToTest.GetKeyPosition(keyArray[4])), Message := 'Invalid element position after TryRemoveByGenericKey');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAndGet" Id="{fbd1236e-63ef-48f9-bcb2-74185b7c5660}">
      <Declaration><![CDATA[METHOD SetAndGet
VAR
	genericValue : Core.GENERIC_VALUE;
	keyValuePair : Core.GENERIC_KEY_VALUE_PAIR;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Set(keyArray[6], valueArray[6]);
dictionaryToTest.Set(keyArray[5], valueArray[5]);
dictionaryToTest.Set(keyArray[4], valueArray[4]);
dictionaryToTest.Set(keyArray[3], valueArray[3]);
dictionaryToTest.Set(keyArray[2], valueArray[2]);
dictionaryToTest.Set(keyArray[1], valueArray[1]);
dictionaryToTest.Set(keyArray[0], valueArray[0]);
dictionaryToTest.Set(keyArray[3], valueArray[3]);
dictionaryToTest.SetGeneric(Core.GenericValueFactory.FromIntValue(5), Core.GenericValueFactory.FromStringValue('String5'));

AssertEquals_DINT(Expected := 7, Actual := dictionaryToTest.Count, Message := 'Invalid element count after Set');

AssertEquals_INT(Expected := 2, Actual := TO_INT(dictionaryToTest.GetKeyPosition(keyArray[2])), Message := 'Invalid element position returned after Set and GetKeyPosition');

AssertEquals_INT(Expected := 2, Actual := TO_INT(dictionaryToTest.GetGenericKeyPosition(Core.GenericValueFactory.FromIntValue(2))), Message := 'Invalid element position returned after Set and GetGenericKeyPosition');

dictionaryToTest.TryGetValueByKey(keyArray[2], value => genericValue);
AssertEquals_STRING(Expected := 'String2', Actual := genericValue.AsString255(), Message := 'Invalid element found by TryGetValueByKey');

dictionaryToTest.TryGetValueByGenericKey(Core.GenericValueFactory.FromIntValue(2), value => genericValue);
AssertEquals_STRING(Expected := 'String2', Actual := genericValue.AsString255(), Message := 'Invalid element found by TryGetValueByGenericKey');

keyValuePair := dictionaryToTest.GetKeyValuePairByIndex(3);
AssertEquals_STRING(Expected := 'String3', Actual := keyValuePair.Value.AsString255(), Message := 'Invalid element position found by GetKeyValuePairByIndex');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>