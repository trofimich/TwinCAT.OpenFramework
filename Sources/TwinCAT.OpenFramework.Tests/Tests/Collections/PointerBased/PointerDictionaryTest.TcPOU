<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="PointerDictionaryTest" Id="{25a5867c-656c-0594-30c0-1412e12f3fba}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PointerDictionaryTest EXTENDS TcUnit.FB_TestSuite
VAR
	dictionaryToTest : TwinCAT_OpenFramework_Collections.PointerDictionary(POINTER_TYPE.INT_POINTER, POINTER_TYPE.STRING_POINTER, 0);
	testKeys : ARRAY [0..5] OF INT := [0, 1, 2, 3, 4, 5];
	testValues : ARRAY [0..5] OF STRING := ['0', '1', '2', '3', '4', '5'];
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
SetAndGetByIndex();
ContainsKey();
Remove();
RemoveAt();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{5c0296a6-8b97-0ffa-28d5-239623e8fb7d}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := dictionaryToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{98514f4a-c3c9-030a-0a17-41a63ee186f0}">
      <Declaration><![CDATA[METHOD Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Clear(FALSE, FALSE);

AssertEquals_DINT(Expected := 0, Actual := dictionaryToTest._ArrayLength, Message := 'Invalid memory size');
AssertEquals_DINT(Expected := 0, Actual := dictionaryToTest.Count, Message := 'Invalid element count');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ContainsKey" Id="{7a614cd8-bdb0-028a-3391-9146f0921991}">
      <Declaration><![CDATA[METHOD ContainsKey
VAR
	valueToSearch3 : INT := 3;
	valueToSearch6 : INT := 6;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Set(ADR(testKeys[0]), ADR(testValues[0]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[1]), ADR(testValues[1]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[2]), ADR(testValues[2]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[3]), ADR(testValues[3]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[4]), ADR(testValues[4]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[5]), ADR(testValues[5]), FALSE, FALSE);

AssertEquals_BOOL(Expected := TRUE, Actual := dictionaryToTest.ContainsKey(ADR(valueToSearch3)), Message := 'Key not found');
AssertEquals_BOOL(Expected := FALSE, Actual := dictionaryToTest.ContainsKey(ADR(valueToSearch6)), Message := 'Unavailable key found');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{0ae4f769-0c2d-0950-03c5-b87892c22173}">
      <Declaration><![CDATA[METHOD Remove
VAR
	keyToRemove : INT  := 3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Set(ADR(testKeys[0]), ADR(testValues[0]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[1]), ADR(testValues[1]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[2]), ADR(testValues[2]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[3]), ADR(testValues[3]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[4]), ADR(testValues[4]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[5]), ADR(testValues[5]), FALSE, FALSE);

dictionaryToTest.Remove(ADR(keyToRemove), FALSE, FALSE);

AssertEquals_BOOL(Expected := FALSE, Actual := dictionaryToTest.ContainsKey(ADR(keyToRemove)), Message := 'Value not removed by key');
AssertEquals_DINT(Expected := 5, Actual := dictionaryToTest.Count, Message := 'Invalid element count after removing');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{3ded70a4-41f4-0055-2bc1-87ea179bca59}">
      <Declaration><![CDATA[METHOD RemoveAt
VAR
	keyToRemove : INT  := 3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Set(ADR(testKeys[0]), ADR(testValues[0]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[1]), ADR(testValues[1]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[2]), ADR(testValues[2]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[3]), ADR(testValues[3]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[4]), ADR(testValues[4]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[5]), ADR(testValues[5]), FALSE, FALSE);

dictionaryToTest.RemoveAt(3, FALSE, FALSE);

AssertEquals_BOOL(Expected := FALSE, Actual := dictionaryToTest.ContainsKey(ADR(keyToRemove)), Message := 'Key and value are not removed by index');
AssertEquals_DINT(Expected := 5, Actual := dictionaryToTest.Count, Message := 'Invalid element count after removing by index');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAndGetByIndex" Id="{7f2629ae-86b7-0bd9-2252-48d2093f0fc4}">
      <Declaration><![CDATA[METHOD SetAndGetByIndex
VAR
	key : POINTER TO INT;
	value : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

dictionaryToTest.Set(ADR(testKeys[0]), ADR(testValues[0]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[1]), ADR(testValues[1]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[1]), ADR(testValues[1]), FALSE, FALSE);
dictionaryToTest.Set(ADR(testKeys[2]), ADR(testValues[2]), FALSE, FALSE);

AssertEquals_DINT(Expected := 3, Actual := dictionaryToTest.Count, Message := 'Invalid value setting');

dictionaryToTest.AllocateMemory(20);

AssertEquals_DINT(Expected := 30, Actual := dictionaryToTest._ArrayLength, Message := 'Invalid memory re-allocation');

key := dictionaryToTest.GetKeyByIndex(2);
AssertEquals_INT(Expected := 2, Actual := key^, Message := 'Invalid key setting');

value := dictionaryToTest.GetValueByIndex(2);
AssertEquals_STRING(Expected := '2', Actual := value^, Message := 'Invalid value setting');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>