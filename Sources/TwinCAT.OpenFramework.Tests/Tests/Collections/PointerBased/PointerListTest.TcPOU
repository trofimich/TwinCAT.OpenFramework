<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="PointerListTest" Id="{59e06096-49c3-0211-2204-6cc02f8d5cd8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PointerListTest EXTENDS TcUnit.FB_TestSuite
VAR
	staticArray : ARRAY [0..5] OF INT := [0, 1, 2, 3, 4, 5];
	listToTest : TwinCAT_OpenFramework_Collections.PointerList(POINTER_TYPE.INT_POINTER);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
Append();
Insert();
GetAndSet();
Find();
Remove();
RemoveAt();
Swap();
Sort();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{d6427254-b766-0d20-0d6e-cb2fee8ea00a}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := listToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append" Id="{6944319e-9f47-053f-365f-e0f9564ba95e}">
      <Declaration><![CDATA[METHOD Append
VAR
	intPointer : POINTER TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Append(ADR(staticArray[0]));
listToTest.Append(ADR(staticArray[1]));
listToTest.Append(ADR(staticArray[2]));

AssertEquals_DINT(Expected := 3, Actual := listToTest.Count, Message := 'Wrong element count');

intPointer := listToTest.Get(2);
AssertEquals_INT(Expected := 2, Actual := intPointer^, Message := 'Wrong element value');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{a5b6cb38-8ca4-0fc5-298e-0dbaba8d61d7}">
      <Declaration><![CDATA[METHOD Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear(FALSE);

AssertEquals_DINT(Expected := 0, Actual := listToTest._ArrayLength, Message := 'Invalid memory size');
AssertEquals_DINT(Expected := 0, Actual := listToTest.Count, Message := 'Invalid element count');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{dc645730-7cf7-09ec-297f-575897787a43}">
      <Declaration><![CDATA[METHOD Find
VAR
	result : BOOL;
	index : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear(FALSE);
listToTest.Append(ADR(staticArray[0]));
listToTest.Append(ADR(staticArray[1]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));
listToTest.Append(ADR(staticArray[4]));
listToTest.Append(ADR(staticArray[5]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));

result := listToTest.Find(ADR(staticArray[2]), 0, 1, index => index);

AssertEquals_BOOL(Expected := TRUE, Actual := result, Message := 'Value not found');
AssertEquals_DINT(Expected := 6, Actual := index, Message := 'Wrong index of found element');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAndSet" Id="{4bc03eda-c7a7-0f99-2563-8d54720c27af}">
      <Declaration><![CDATA[METHOD GetAndSet
VAR
	intPointer : POINTER TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Set(ADR(staticArray[4]), 1, FALSE);	
intPointer := listToTest.Get(1);
AssertEquals_INT(Expected := 4, Actual := intPointer^, Message := 'Invalid value set');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{945c1004-551c-0403-31fa-07debbe8a839}">
      <Declaration><![CDATA[METHOD Insert
VAR
	intPointer : POINTER TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Insert(ADR(staticArray[5]), 1);	
intPointer := listToTest.Get(1);
AssertEquals_INT(Expected := 5, Actual := intPointer^, Message := 'Invalid inserted value');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{821f877e-96d4-0b7c-3721-bf0ccdb5f484}">
      <Declaration><![CDATA[METHOD Remove]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear(FALSE);
listToTest.Append(ADR(staticArray[0]));
listToTest.Append(ADR(staticArray[1]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));
listToTest.Append(ADR(staticArray[4]));
listToTest.Append(ADR(staticArray[5]));

listToTest.Remove(ADR(staticArray[2]), FALSE);

AssertEquals_DINT(Expected := 5, Actual := listToTest.Count, Message := 'Wrong list size');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{0a31d9f8-5198-05a3-1c6a-3951048dc42c}">
      <Declaration><![CDATA[METHOD RemoveAt]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear(FALSE);
listToTest.Append(ADR(staticArray[0]));
listToTest.Append(ADR(staticArray[1]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));
listToTest.Append(ADR(staticArray[4]));
listToTest.Append(ADR(staticArray[5]));

listToTest.RemoveAt(3, FALSE);

AssertEquals_DINT(Expected := 5, Actual := listToTest.Count, Message := 'Wrong list size');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sort" Id="{c6a5b89f-a6f3-0019-0898-ca746e835376}">
      <Declaration><![CDATA[METHOD Sort
VAR
	result : BOOL;
	index : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear(FALSE);
listToTest.Append(ADR(staticArray[0]));
listToTest.Append(ADR(staticArray[1]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));
listToTest.Append(ADR(staticArray[4]));
listToTest.Append(ADR(staticArray[5]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));

result := listToTest.Find(ADR(staticArray[2]), 0, 1, index => index);

AssertEquals_BOOL(Expected := TRUE, Actual := result, Message := 'Value not found');
AssertEquals_DINT(Expected := 6, Actual := index, Message := 'Wrong index of found element');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Swap" Id="{0d827c33-7654-0af0-0707-661a1b19851a}">
      <Declaration><![CDATA[METHOD Swap
VAR
	intPointer : POINTER TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear(FALSE);
listToTest.Append(ADR(staticArray[0]));
listToTest.Append(ADR(staticArray[1]));
listToTest.Append(ADR(staticArray[2]));
listToTest.Append(ADR(staticArray[3]));
listToTest.Append(ADR(staticArray[4]));
listToTest.Append(ADR(staticArray[5]));

listToTest.Swap(0, 5);

intPointer := listToTest.Get(0);

AssertEquals_INT(Expected := 5, Actual := intPointer^, Message := 'Wrong swap result');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>