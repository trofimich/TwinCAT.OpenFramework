<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="PointerUniqueSetTest" Id="{214e3539-4a08-4306-aa65-d319ce8b4f6e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PointerUniqueSetTest EXTENDS TcUnit.FB_TestSuite
VAR
	uniqueSetToTest : TwinCAT_OpenFramework_Collections.PointerUniqueSet(POINTER_TYPE.INT_POINTER, 0);
	testValues : ARRAY [0..5] OF INT := [0, 1, 2, 3, 4, 5];
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
SetAndGetByIndex();
Contains();
Remove();
RemoveAt();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{c6a9f427-7c32-46b5-9086-c7b2a489f3d4}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := uniqueSetToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{663bdfd8-554a-49f8-9dc4-0d622b636c8e}">
      <Declaration><![CDATA[METHOD Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Clear(FALSE);

AssertEquals_DINT(Expected := 0, Actual := uniqueSetToTest._ArrayLength, Message := 'Invalid memory size');
AssertEquals_DINT(Expected := 0, Actual := uniqueSetToTest.Count, Message := 'Invalid element count');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{cddfb3b8-a0b2-4ef4-b9e4-dc8322b1dfed}">
      <Declaration><![CDATA[METHOD Contains
VAR
	valueToSearch3 : INT := 3;
	valueToSearch6 : INT := 6;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Set(ADR(testValues[0]), FALSE);
uniqueSetToTest.Set(ADR(testValues[1]), FALSE);
uniqueSetToTest.Set(ADR(testValues[2]), FALSE);
uniqueSetToTest.Set(ADR(testValues[3]), FALSE);
uniqueSetToTest.Set(ADR(testValues[4]), FALSE);
uniqueSetToTest.Set(ADR(testValues[5]), FALSE);

AssertEquals_BOOL(Expected := TRUE, Actual := uniqueSetToTest.Contains(ADR(valueToSearch3)), Message := 'Value not found');
AssertEquals_BOOL(Expected := FALSE, Actual := uniqueSetToTest.Contains(ADR(valueToSearch6)), Message := 'Unavailable value found');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{8546694f-83b1-4a08-bdf5-bf6fdc18f7be}">
      <Declaration><![CDATA[METHOD Remove
VAR
	valueToRemove : INT  := 3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Set(ADR(testValues[0]), FALSE);
uniqueSetToTest.Set(ADR(testValues[1]), FALSE);
uniqueSetToTest.Set(ADR(testValues[2]), FALSE);
uniqueSetToTest.Set(ADR(testValues[3]), FALSE);
uniqueSetToTest.Set(ADR(testValues[4]), FALSE);
uniqueSetToTest.Set(ADR(testValues[5]), FALSE);

uniqueSetToTest.Remove(ADR(valueToRemove), FALSE);

AssertEquals_BOOL(Expected := FALSE, Actual := uniqueSetToTest.Contains(ADR(valueToRemove)), Message := 'Value not removed');
AssertEquals_DINT(Expected := 5, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after removing');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{01125839-30c4-0985-078b-8448883cb352}">
      <Declaration><![CDATA[METHOD RemoveAt
VAR
	valueToRemove : INT  := 3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Set(ADR(testValues[0]), FALSE);
uniqueSetToTest.Set(ADR(testValues[1]), FALSE);
uniqueSetToTest.Set(ADR(testValues[2]), FALSE);
uniqueSetToTest.Set(ADR(testValues[3]), FALSE);
uniqueSetToTest.Set(ADR(testValues[4]), FALSE);
uniqueSetToTest.Set(ADR(testValues[5]), FALSE);

uniqueSetToTest.RemoveAt(3, FALSE);

AssertEquals_BOOL(Expected := FALSE, Actual := uniqueSetToTest.Contains(ADR(valueToRemove)), Message := 'Value not removed');
AssertEquals_DINT(Expected := 5, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after removing by index');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAndGetByIndex" Id="{623d18f9-0eb2-051e-3024-8252183b9ee1}">
      <Declaration><![CDATA[METHOD SetAndGetByIndex
VAR
	value : POINTER TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Set(ADR(testValues[0]), FALSE);
uniqueSetToTest.Set(ADR(testValues[1]), FALSE);
uniqueSetToTest.Set(ADR(testValues[1]), FALSE);
uniqueSetToTest.Set(ADR(testValues[2]), FALSE);

AssertEquals_DINT(Expected := 3, Actual := uniqueSetToTest.Count, Message := 'Invalid value setting');

uniqueSetToTest.AllocateMemory(20);

AssertEquals_DINT(Expected := 30, Actual := uniqueSetToTest._ArrayLength, Message := 'Invalid memory re-allocation');

value := uniqueSetToTest.GetByIndex(2);
AssertEquals_DINT(Expected := 2, Actual := value^, Message := 'Invalid value setting');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>