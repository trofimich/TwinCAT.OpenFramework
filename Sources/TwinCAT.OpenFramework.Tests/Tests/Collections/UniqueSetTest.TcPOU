<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="UniqueSetTest" Id="{48ddaaaf-04ba-4555-bbf6-ad4d3fedae0f}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK UniqueSetTest EXTENDS TcUnit.FB_TestSuite
VAR
	values : ARRAY [0..6] OF STRING := ['String0', 'String1', 'String2', 'String3', 'String4', 'String5', 'String6'];
	
	uniqueSetToTest : Collections.UniqueSet();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
//SetAndGet();
Remove();
Contains();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{af55282f-18c3-44a4-9abc-d1c47b09ed38}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := uniqueSetToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{a1170765-6536-4258-8248-d445d44dd738}">
      <Declaration><![CDATA[METHOD Clear 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Clear();

AssertEquals_DINT(Expected := 0, Actual := uniqueSetToTest._ArrayLength, Message := 'Invalid memory size after Clear');
AssertEquals_DINT(Expected := 0, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after Clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{c1e32079-7068-4c5d-9984-43b7695c92e8}">
      <Declaration><![CDATA[METHOD Contains]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest
	.Set(values[6])
	.Set(values[5])
	.Set(values[4])
	.Set(values[3])
	.Set(values[2])
	.Set(values[1])
	.Set(values[0])
	.Set(values[3])
	.SetGeneric(GenericValueFactory.FromStringValue('String3'))
	.SetGeneric(GenericValueFactory.FromStringValue('String5'));

AssertEquals_BOOL(Expected := TRUE, Actual := uniqueSetToTest.Contains(values[3]), Message := 'Contains did not find the value');
AssertEquals_BOOL(Expected := TRUE, Actual := uniqueSetToTest.ContainsGeneric(GenericValueFactory.FromStringValue('String3')), Message := 'ContainsGeneric did not find the value');
AssertEquals_BOOL(Expected := FALSE, Actual := uniqueSetToTest.ContainsGeneric(GenericValueFactory.FromStringValue('String9')), Message := 'Contains found not existing value');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{7b58aa08-bdf2-4cb9-baee-21f808829be7}">
      <Declaration><![CDATA[METHOD Remove]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Set(values[6]);
uniqueSetToTest.Set(values[5]);
uniqueSetToTest.Set(values[4]);
uniqueSetToTest.Set(values[3]);
uniqueSetToTest.Set(values[2]);
uniqueSetToTest.Set(values[1]);
uniqueSetToTest.Set(values[0]);
uniqueSetToTest.Set(values[3]);
uniqueSetToTest.SetGeneric(GenericValueFactory.FromStringValue('String3'));
uniqueSetToTest.SetGeneric(GenericValueFactory.FromStringValue('String5'));

uniqueSetToTest.RemoveAt(3);

AssertEquals_DINT(Expected := 6, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after RemoveAt');
AssertEquals_INT(Expected := 3, Actual := TO_INT(uniqueSetToTest.GetValuePosition(values[4])), Message := 'Invalid element position');

uniqueSetToTest.TryRemove(values[2]);

AssertEquals_DINT(Expected := 5, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after TryRemoveByKey');
AssertEquals_INT(Expected := 2, Actual := TO_INT(uniqueSetToTest.GetValuePosition(values[4])), Message := 'Invalid element position');

uniqueSetToTest.TryRemoveGeneric(Core.GenericValueFactory.FromStringValue('String1'));

AssertEquals_DINT(Expected := 4, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after TryRemoveByGenericKey');
AssertEquals_INT(Expected := 1, Actual := TO_INT(uniqueSetToTest.GetValuePosition(values[4])), Message := 'Invalid element position');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAndGet" Id="{9f649d8a-3840-4874-888b-39568bf44253}">
      <Declaration><![CDATA[METHOD SetAndGet
VAR
	genericValue : Core.GENERIC_VALUE;
	keyValuePair : Core.GENERIC_KEY_VALUE_PAIR;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

uniqueSetToTest.Set(values[6]);
uniqueSetToTest.Set(values[5]);
uniqueSetToTest.Set(values[4]);
uniqueSetToTest.Set(values[3]);
uniqueSetToTest.Set(values[2]);
uniqueSetToTest.Set(values[1]);
uniqueSetToTest.Set(values[0]);
uniqueSetToTest.Set(values[3]);
uniqueSetToTest.SetGeneric(Core.GenericValueFactory.FromStringValue('String3'));
uniqueSetToTest.SetGeneric(Core.GenericValueFactory.FromStringValue('String5'));

AssertEquals_DINT(Expected := 7, Actual := uniqueSetToTest.Count, Message := 'Invalid element count after Set');

AssertEquals_INT(Expected := 2, Actual := TO_INT(uniqueSetToTest.GetValuePosition(values[2])), Message := 'Invalid element position returned after Set and GetValuePosition');

AssertEquals_INT(Expected := 2, Actual := TO_INT(uniqueSetToTest.GetGenericValuePosition(Core.GenericValueFactory.FromStringValue('String2'))), Message := 'Invalid element position returned after Set and GetGenericValuePosition');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>