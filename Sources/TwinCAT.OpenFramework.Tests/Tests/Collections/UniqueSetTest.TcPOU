<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="UniqueSetTest" Id="{48ddaaaf-04ba-4555-bbf6-ad4d3fedae0f}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK UniqueSetTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();

	_Values : ARRAY [0..6] OF STRING := ['String0', 'String1', 'String2', 'String3', 'String4', 'String5', 'String6'];
	
	_UniqueSetToTest : Collections.UniqueSet(0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
Remove();
Contains();
Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{af55282f-18c3-44a4-9abc-d1c47b09ed38}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_UniqueSetToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := _UniqueSetToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{b2c1af1b-d99e-40f0-a031-dd86940e857b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{689acdd5-2898-4a00-9eb5-cd5d3868969e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{a1170765-6536-4258-8248-d445d44dd738}">
      <Declaration><![CDATA[METHOD Clear 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_UniqueSetToTest.Clear();

AssertEquals_DINT(Expected := 0, Actual := _UniqueSetToTest._ArrayLength, Message := 'Invalid memory size after Clear');
AssertEquals_DINT(Expected := 0, Actual := _UniqueSetToTest.Count, Message := 'Invalid element count after Clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{c1e32079-7068-4c5d-9984-43b7695c92e8}">
      <Declaration><![CDATA[METHOD Contains]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_UniqueSetToTest
	.SetCopy(_Values[6])
	.SetCopy(_Values[5])
	.SetCopy(_Values[4])
	.SetCopy(_Values[3])
	.SetCopy(_Values[2])
	.SetCopy(_Values[1])
	.SetCopy(_Values[0])
	.SetCopy(_Values[3])
	.SetGeneric(GenericValueFactory.FromStringValue('String3'))
	.SetGeneric(GenericValueFactory.FromStringValue('String5'));

AssertEquals_BOOL(Expected := TRUE, Actual := _UniqueSetToTest.Contains(_Values[3]), Message := 'Contains did not find the value');
AssertEquals_BOOL(Expected := TRUE, Actual := _UniqueSetToTest.ContainsGeneric(GenericValueFactory.FromStringValue('String3')), Message := 'ContainsGeneric did not find the value');
AssertEquals_BOOL(Expected := FALSE, Actual := _UniqueSetToTest.ContainsGeneric(GenericValueFactory.FromStringValue('String9')), Message := 'Contains found not existing value');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Property Name="NamespaceName" Id="{59705d53-c7ad-4807-9c10-6b2828496683}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY NamespaceName : STRING]]></Declaration>
      <Get Name="Get" Id="{89e36922-09b6-4dfe-9ad3-8eab216abbb1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[NamespaceName := CurrentNamespace.Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Remove" Id="{7b58aa08-bdf2-4cb9-baee-21f808829be7}">
      <Declaration><![CDATA[METHOD Remove]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_UniqueSetToTest.SetCopy(_Values[6]);
_UniqueSetToTest.SetCopy(_Values[5]);
_UniqueSetToTest.SetCopy(_Values[4]);
_UniqueSetToTest.SetCopy(_Values[3]);
_UniqueSetToTest.SetCopy(_Values[2]);
_UniqueSetToTest.SetCopy(_Values[1]);
_UniqueSetToTest.SetCopy(_Values[0]);
_UniqueSetToTest.SetCopy(_Values[3]);
_UniqueSetToTest.SetGeneric(GenericValueFactory.FromStringValue('String3'));
_UniqueSetToTest.SetGeneric(GenericValueFactory.FromStringValue('String5'));

_UniqueSetToTest.RemoveAt(3);

AssertEquals_DINT(Expected := 6, Actual := _UniqueSetToTest.Count, Message := 'Invalid element count after RemoveAt');
AssertEquals_INT(Expected := 3, Actual := TO_INT(_UniqueSetToTest.GetValuePosition(_Values[4])), Message := 'Invalid element position');

_UniqueSetToTest.TryRemove(_Values[2]);

AssertEquals_DINT(Expected := 5, Actual := _UniqueSetToTest.Count, Message := 'Invalid element count after TryRemoveByKey');
AssertEquals_INT(Expected := 2, Actual := TO_INT(_UniqueSetToTest.GetValuePosition(_Values[4])), Message := 'Invalid element position');

_UniqueSetToTest.TryRemoveGeneric(Core.GenericValueFactory.FromStringValue('String1'));

AssertEquals_DINT(Expected := 4, Actual := _UniqueSetToTest.Count, Message := 'Invalid element count after TryRemoveByGenericKey');
AssertEquals_INT(Expected := 1, Actual := TO_INT(_UniqueSetToTest.GetValuePosition(_Values[4])), Message := 'Invalid element position');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAndGet" Id="{9f649d8a-3840-4874-888b-39568bf44253}">
      <Declaration><![CDATA[METHOD SetAndGet
VAR
	genericValue : Core.GENERIC_VALUE;
	keyValuePair : Core.GENERIC_KEY_VALUE_PAIR;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_UniqueSetToTest.SetCopy(_Values[6]);
_UniqueSetToTest.SetCopy(_Values[5]);
_UniqueSetToTest.SetCopy(_Values[4]);
_UniqueSetToTest.SetCopy(_Values[3]);
_UniqueSetToTest.SetCopy(_Values[2]);
_UniqueSetToTest.SetCopy(_Values[1]);
_UniqueSetToTest.SetCopy(_Values[0]);
_UniqueSetToTest.SetCopy(_Values[3]);
_UniqueSetToTest.SetGeneric(Core.GenericValueFactory.FromStringValue('String3'));
_UniqueSetToTest.SetGeneric(Core.GenericValueFactory.FromStringValue('String5'));

AssertEquals_DINT(Expected := 7, Actual := _UniqueSetToTest.Count, Message := 'Invalid element count after Set');

AssertEquals_INT(Expected := 2, Actual := TO_INT(_UniqueSetToTest.GetValuePosition(_Values[2])), Message := 'Invalid element position returned after Set and GetValuePosition');

AssertEquals_INT(Expected := 2, Actual := TO_INT(_UniqueSetToTest.GetGenericValuePosition(Core.GenericValueFactory.FromStringValue('String2'))), Message := 'Invalid element position returned after Set and GetGenericValuePosition');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>