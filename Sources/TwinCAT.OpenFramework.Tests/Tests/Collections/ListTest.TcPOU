<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="ListTest" Id="{a8157042-a1af-4e81-b333-f8e118913b95}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ListTest EXTENDS TcUnit.FB_TestSuite
VAR
	staticStringArray : ARRAY [0..5] OF STRING := ['String0', 'String1', 'String2', 'String3', 'String4', 'String5'];
	dynamicStringArray : ARRAY [0..5] OF POINTER TO STRING;
	
	listToTest : Collections.List();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AllocateMemory();
Append();
Insert();
GetAndSet();
Find();
RemoveFirst();
RemoveMatched();
RemoveAt();
Swap();
Sort();

AppendGeneric();
InsertGeneric();
GetAndSetGeneric();

Clear();]]></ST>
    </Implementation>
    <Method Name="AllocateMemory" Id="{43b54da8-b5b3-4159-958c-c3f9cfe83e2f}">
      <Declaration><![CDATA[METHOD AllocateMemory]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.AllocateMemory(10);

AssertEquals_DINT(Expected := 10, Actual := listToTest._ArrayLength, Message := 'Invalid memory allocation');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append" Id="{3df410dc-4d4e-461d-ac9a-e35a5f96cc28}">
      <Declaration><![CDATA[METHOD Append]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.AppendCopy(staticStringArray[0]);
listToTest.AppendCopy(staticStringArray[1]);
listToTest.AppendCopy(staticStringArray[2]);

AssertEquals_DINT(Expected := 3, Actual := listToTest.Count, Message := 'Wrong element count after Append');
AssertEquals_STRING(Expected := 'String2', Actual := listToTest.Get(2).AsString255(), Message := 'Wrong element value after Append');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendGeneric" Id="{d1a0e33b-c853-4b7b-aed6-36825b13c07f}">
      <Declaration><![CDATA[METHOD AppendGeneric]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();

listToTest.AppendGeneric(Core.GenericValueFactory.FromStringReference(dynamicStringArray[0]^));
listToTest.AppendGeneric(Core.GenericValueFactory.FromStringReference(dynamicStringArray[1]^));
listToTest.AppendGeneric(Core.GenericValueFactory.FromStringReference(dynamicStringArray[2]^));

AssertEquals_DINT(Expected := 3, Actual := listToTest.Count, Message := 'Wrong element count after AppendGeneric');
AssertEquals_STRING(Expected := 'String2', Actual := listToTest.Get(2).AsString255(), Message := 'Wrong element value after AppendGeneric');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{0d9b39f8-551a-459e-8dc6-1c9d73b7dc81}">
      <Declaration><![CDATA[METHOD Clear 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();

AssertEquals_DINT(Expected := 0, Actual := listToTest._ArrayLength, Message := 'Invalid memory size after Clear');
AssertEquals_DINT(Expected := 0, Actual := listToTest.Count, Message := 'Invalid element count after Clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Exit" Id="{35985d5a-82ef-4502-8f35-09e527e7a8a1}">
      <Declaration><![CDATA[//FB_Exit must be implemented explicitly. If there is an implementation, then the
//method is called before the controller removes the code of the function block instance
//(implicit call). The return value is not evaluated.
METHOD FB_Exit: BOOL
VAR_INPUT
    bInCopyCode: BOOL;  // TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change).  
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO 5 DO
	__DELETE(dynamicStringArray[i]);	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{1d99c210-5f51-4989-904e-4bb2bc9c2d71}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
END_VAR
VAR
	i : DINT;
	dynamicString : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO 5 DO
	dynamicString := __NEW(STRING);
	
	dynamicString^ := Tc2_Standard.CONCAT('String', DINT_TO_STRING(i));
	
	dynamicStringArray[i] := dynamicString;	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{b2ed03c1-86b3-4bf7-a06a-0831862f9511}">
      <Declaration><![CDATA[METHOD Find
VAR
	result : BOOL;
	index : DINT;
		
	sameDataPredicate : Comparision.IdenticalDataPredicate;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest
	.Clear()
	.AppendCopy(staticStringArray[0])
	.AppendCopy(staticStringArray[1])
	.AppendCopy(staticStringArray[2])
	.AppendCopy(staticStringArray[3])
	.AppendCopy(staticStringArray[4])
	.AppendCopy(staticStringArray[5])
	.AppendCopy(staticStringArray[2])
	.AppendCopy(staticStringArray[3]);

sameDataPredicate.SetReferenceValueByAny(staticStringArray[2]);
result := listToTest.FindSingle(sameDataPredicate, 0, index => index);

AssertEquals_BOOL(Expected := TRUE, Actual := result, Message := 'Value not found');
AssertEquals_DINT(Expected := 2, Actual := index, Message := 'Wrong index of found element');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAndSet" Id="{ae74dc61-2b7f-4abe-a6d0-8020b6035f0c}">
      <Declaration><![CDATA[METHOD GetAndSet]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.SetCopy(staticStringArray[4], 1);	
AssertEquals_STRING(Expected := 'String4', Actual := listToTest.Get(1).AsString255(), Message := 'Invalid value set');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAndSetGeneric" Id="{749830b6-f701-459b-967a-d4c797e45651}">
      <Declaration><![CDATA[METHOD GetAndSetGeneric]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.SetGeneric(Core.GenericValueFactory.FromStringReference(dynamicStringArray[4]^), 1);
	
AssertEquals_STRING(Expected := 'String4', Actual := listToTest.Get(1).AsString255(), Message := 'Invalid generic value set');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{615084e5-147c-404e-b079-98dd8d369645}">
      <Declaration><![CDATA[METHOD Insert]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.InsertCopy(staticStringArray[5], 1);	
AssertEquals_STRING(Expected := 'String5', Actual := listToTest.Get(1).AsString255(), Message := 'Invalid inserted value');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="InsertGeneric" Id="{191d87de-d127-4096-900e-753a4010ef8e}">
      <Declaration><![CDATA[METHOD InsertGeneric]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.InsertGeneric(Core.GenericValueFactory.FromStringReference(dynamicStringArray[5]^), 1);
	
AssertEquals_STRING(Expected := 'String5', Actual := listToTest.Get(1).AsString255(), Message := 'Invalid inserted generic value');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{fc4db24d-5d6f-41bb-bcd4-821f4fb20fd3}">
      <Declaration><![CDATA[METHOD RemoveAt]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();
listToTest.AppendCopy(staticStringArray[0]);
listToTest.AppendCopy(staticStringArray[1]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[3]);
listToTest.AppendCopy(staticStringArray[4]);
listToTest.AppendCopy(staticStringArray[5]);

listToTest.RemoveAt(3);

AssertEquals_DINT(Expected := 5, Actual := listToTest.Count, Message := 'Wrong list size after RemoveAt');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveFirst" Id="{cc578b9f-9c75-457b-bf15-7a75f2b1a276}">
      <Declaration><![CDATA[METHOD RemoveFirst]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();
listToTest.AppendCopy(staticStringArray[0]);
listToTest.AppendCopy(staticStringArray[1]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[3]);
listToTest.AppendCopy(staticStringArray[4]);
listToTest.AppendCopy(staticStringArray[5]);

listToTest.RemoveFirst(staticStringArray[2]);

AssertEquals_DINT(Expected := 5, Actual := listToTest.Count, Message := 'Wrong list size after RemoveFirst');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveMatched" Id="{07d148c8-5c71-49fe-b484-658ec52fd12e}">
      <Declaration><![CDATA[METHOD RemoveMatched
VAR
	result : BOOL;
	index : DINT;
		
	sameDataPredicate : Comparision.IdenticalDataPredicate;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();
listToTest.AppendCopy(staticStringArray[0]);
listToTest.AppendCopy(staticStringArray[1]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[3]);
listToTest.AppendCopy(staticStringArray[4]);
listToTest.AppendCopy(staticStringArray[5]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[3]);

sameDataPredicate.SetReferenceValueByAny(staticStringArray[2]);
listToTest.RemoveMatched(sameDataPredicate);

AssertEquals_DINT(Expected := 6, Actual := listToTest.Count, Message := 'Wrong list size after RemoveMatched');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sort" Id="{a9a5625a-dfa8-4934-9b30-394868f8e3b6}">
      <Declaration><![CDATA[METHOD Sort
VAR
	result : BOOL;
	index : DINT;
	value : GENERIC_VALUE;
		
	sameDataPredicate : Comparision.IdenticalDataPredicate;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();
listToTest.AppendCopy(staticStringArray[5]);
listToTest.AppendCopy(staticStringArray[4]);
listToTest.AppendCopy(staticStringArray[3]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[1]);
listToTest.AppendCopy(staticStringArray[0]);

listToTest.Sort(StandardComparers.StringComparer);

sameDataPredicate.SetReferenceValueByAny(staticStringArray[3]);
result := listToTest.FindSingle(sameDataPredicate, 0, 1, value => value, index => index);

AssertEquals_BOOL(Expected := TRUE, Actual := result, Message := 'Value not found after sorting');
AssertEquals_DINT(Expected := 5, Actual := index, Message := 'Wrong index of found element after sorting');
AssertEquals_STRING(Expected := 'String3', Actual := value.AsString255(), Message := 'Wrong value of found element after sorting');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Swap" Id="{0411ea2a-49cd-44e1-822c-cca318faf8dc}">
      <Declaration><![CDATA[METHOD Swap
VAR
	intPointer : POINTER TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

listToTest.Clear();
listToTest.AppendCopy(staticStringArray[0]);
listToTest.AppendCopy(staticStringArray[1]);
listToTest.AppendCopy(staticStringArray[2]);
listToTest.AppendCopy(staticStringArray[3]);
listToTest.AppendCopy(staticStringArray[4]);
listToTest.AppendCopy(staticStringArray[5]);

listToTest.Swap(0, 5);

AssertEquals_STRING(Expected := 'String5', Actual := listToTest.Get(0).AsString255(), Message := 'Wrong swap result');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>