<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="ListOfBytesTest" Id="{e0d457f1-7691-0ed2-12e6-5af4eb76f387}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK ListOfBytesTest EXTENDS TcUnit.FB_TestSuite
VAR
	_ClassName : STRING := __POUNAME();

	_StaticArray : ARRAY [0..5] OF BYTE := [0, 1, 2, 3, 4, 5];
	
	_ListToTest : Collections.ListOfBytes;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[LoadFromVariable();
GetAndSet();
Find();
Remove();
RemoveAt();
Resize();
Clear();]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{a2b12548-8dd5-4791-9b99-5e1ffb1d3f79}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{db6f1650-7ada-4311-9780-6c316561d98c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{cc7b6cce-b32c-0e1b-3a5f-5cc4a98b3703}">
      <Declaration><![CDATA[METHOD Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_ListToTest.Clear(TRUE);

AssertEquals_DINT(Expected := 0, Actual := _ListToTest._MemorySize, Message := 'Invalid memory size after Clear');
AssertEquals_DINT(Expected := 0, Actual := _ListToTest.Count, Message := 'Invalid byte count after Clear');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{291851e1-364d-0b93-33e4-2a55e4f63de1}">
      <Declaration><![CDATA[METHOD Find
VAR
	result : BOOL;
	index : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

result := _ListToTest.Find(50, index => index);

AssertEquals_BOOL(Expected := TRUE, Actual := result, Message := 'Value not found');
AssertEquals_DINT(Expected := 5, Actual := index, Message := 'Wrong index of found element');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAndSet" Id="{f3e83969-a851-0550-3369-b044cf3b7e76}">
      <Declaration><![CDATA[METHOD GetAndSet
VAR
	exceptionCode : __SYSTEM.ExceptionCode;
	errorMessage : Core.ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_ListToTest
	.Clear()
	.Append(_StaticArray[0])
	.Append(_StaticArray[1])
	.Append(_StaticArray[2])
	.Append(_StaticArray[3])
	.Append(_StaticArray[4])
	.Append(_StaticArray[5]); 

__TRY
	AssertEquals_BYTE(Expected := 5, Actual := _ListToTest.Get(5), Message := 'Invalid value received by Get');
	
	_ListToTest.Set(5, 50);

	AssertEquals_BYTE(Expected := 50, Actual := _ListToTest.Get(5), Message := 'Invalid value received by Get after Set');

	_ListToTest.Set(-1, 10);
__CATCH(exceptionCode)
	errorMessage := Core.ExceptionManager.GetLastException(exceptionCode).GetMessage();
	AssertEquals_STRING('Index is less then zero', WSTRING_TO_STRING(errorMessage), 'Wrong exception message');
__ENDTRY
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadFromVariable" Id="{257471d6-c1c9-0a5a-31cc-34a45c2c6e67}">
      <Declaration><![CDATA[METHOD LoadFromVariable
VAR
	exceptionCode : __SYSTEM.ExceptionCode;
	errorMessage : Core.ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

__TRY
	_ListToTest.LoadFromVariable(_StaticArray, 0);
	
	AssertEquals_DINT(Expected := TO_DINT(SIZEOF(_StaticArray)), Actual := _ListToTest.Count, Message := 'Wrong loading from variable');

	_ListToTest.LoadFromVariable(_StaticArray, -1);
__CATCH(exceptionCode)
	errorMessage := Core.ExceptionManager.GetLastException(exceptionCode).GetMessage();
	AssertEquals_STRING(Expected := 'Start index is less then zero', Actual := WSTRING_TO_STRING(errorMessage), Message := 'Wrong exception message');
__ENDTRY
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{43bf549b-b7ff-037c-02c7-57a820353e13}">
      <Declaration><![CDATA[METHOD Remove]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_ListToTest.Clear();
_ListToTest.Append(_StaticArray[0]);
_ListToTest.Append(_StaticArray[1]);
_ListToTest.Append(_StaticArray[2]);
_ListToTest.Append(_StaticArray[3]);
_ListToTest.Append(_StaticArray[4]);
_ListToTest.Append(_StaticArray[5]); 

_ListToTest.Remove(2);

AssertEquals_DINT(Expected := 5, Actual := _ListToTest.Count, Message := 'Wrong array size after Remove');
AssertEquals_BYTE(Expected := 3, Actual := _ListToTest.Get(2), Message := 'Wrong element removed by Remove');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{0da45385-69b4-029d-0187-17e53c4cff6e}">
      <Declaration><![CDATA[METHOD RemoveAt]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_ListToTest.Clear();
_ListToTest.Append(_StaticArray[0]);
_ListToTest.Append(_StaticArray[1]);
_ListToTest.Append(_StaticArray[2]);
_ListToTest.Append(_StaticArray[3]);
_ListToTest.Append(_StaticArray[4]);
_ListToTest.Append(_StaticArray[5]); 

_ListToTest.RemoveAt(2, 2);

AssertEquals_DINT(Expected := 4, Actual := _ListToTest.Count, Message := 'Wrong array size after RemoveAt');
AssertEquals_BYTE(Expected := 4, Actual := _ListToTest.Get(2), Message := 'Wrong element removed by RemoveAt');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resize" Id="{f041a7b6-9d21-0dc3-2bbd-11159243dede}">
      <Declaration><![CDATA[METHOD Resize]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

_ListToTest.Clear();
_ListToTest.Append(_StaticArray[0]);
_ListToTest.Append(_StaticArray[1]);
_ListToTest.Append(_StaticArray[2]);
_ListToTest.Append(_StaticArray[3]);
_ListToTest.Append(_StaticArray[4]);
_ListToTest.Append(_StaticArray[5]); 

_ListToTest.Resize(3);

AssertEquals_DINT(Expected := 3, Actual := _ListToTest.Count, Message := 'Wrong resizing');
AssertEquals_BYTE(Expected := 2, Actual := _ListToTest.Get(2), Message := 'Wrong element after Resize');
 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>