<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AnalogInput" Id="{53ded094-f30c-413d-b537-b1168c47757b}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK AnalogInput EXTENDS Automation.InputDevice<0>
VAR_INPUT
	SimulatedStatus : WORD;	
	SimulatedDigitizedValue : DIGITIZED_ANALOG_VALUE;
END_VAR
VAR	
	_ClassName : STRING := __POUNAME();

	_Converter : IAnalogValueConverter;

	_CurrentStatus : ANALOG_INPUT_STATUS;
	_PreviousStatus : ANALOG_INPUT_STATUS;

	_CurrentValue : LREAL;
	_PreviousValue : LREAL;
	
	_PhysicalStatus AT %I* : WORD;
	_PhysicalDigitizedValue : DIGITIZED_ANALOG_VALUE_INPUT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service members" Id="{bf5932e5-8724-4b17-946f-965b2da61b5c}" />
    <Property Name="ClassName" Id="{e2a4d305-0531-4dc9-9542-3658a5b19872}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{af9caee4-ddd3-4939-a2d8-5bfd4ce7ebe4}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="convertDigitizedAnalogValueInputToDigitizedAnalogValue" Id="{da5282df-3232-4e60-bf89-232b10b0d6fc}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD convertDigitizedAnalogValueInputToDigitizedAnalogValue : DIGITIZED_ANALOG_VALUE
VAR_INPUT
	sourceValueInput : DIGITIZED_ANALOG_VALUE_INPUT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[convertDigitizedAnalogValueInputToDigitizedAnalogValue._32Bit := sourceValueInput._32Bit;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{993169c9-f3f4-4fab-acaf-b46d829c5468}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
	parent : ISimulatable;
	converter : IAnalogValueConverter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Converter := converter;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnInitialize" Id="{8717aaec-84bf-4a6d-9cd2-1392f347817c}">
      <Declaration><![CDATA[METHOD PROTECTED OnInitialize : BOOL
VAR
	converterNotInitializedException : ClassInitializationException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Converter = 0 THEN
	converterNotInitializedException.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "converter not specified");
END_IF

OnInitialize := SUPER^.OnInitialize();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnUpdateStateFromInputs" Id="{57d2301c-4a56-4287-8fd8-47f67d507f8c}">
      <Declaration><![CDATA[METHOD PROTECTED OnUpdateStateFromInputs
VAR_IN_OUT CONSTANT
	executionContext : Automation.AUTOMATION_EXECUTION_CONTEXT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_PreviousStatus := _CurrentStatus;
_PreviousValue := _CurrentValue;

IF NOT SimulationMode THEN
	_CurrentStatus.SetStatus(_PhysicalStatus);
	_CurrentValue := _converter.ConvertDigitizedValueToAnalogValue(convertDigitizedAnalogValueInputToDigitizedAnalogValue(_PhysicalDigitizedValue));
ELSE
	_CurrentStatus.SetStatus(SimulatedStatus);
	_CurrentValue := _converter.ConvertDigitizedValueToAnalogValue(SimulatedDigitizedValue);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{f41fe795-6269-415f-84e0-21e0f708ca3c}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY FINAL Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{d50f06ea-53dd-48a0-94e9-7788d3c6014a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{8dee4244-1695-4a0e-80f3-405b88b016b6}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY Status : ANALOG_INPUT_STATUS]]></Declaration>
      <Get Name="Get" Id="{77fdc709-09f5-4c73-8b5c-68e70c584a44}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status := _CurrentStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SubDevices" Id="{f459d4cc-172e-49ac-b869-8db4acd4e7a6}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY SubDevices : REFERENCE TO ARRAY [0.._SubDeviceCount_ - 1] OF IDevice]]></Declaration>
      <Get Name="Get" Id="{27469674-c5f2-4236-8f04-d355114100cd}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[SubDevices REF= 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Value" Id="{bff835a2-8bf3-4c77-a0ff-361609610603}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY Value : LREAL]]></Declaration>
      <Get Name="Get" Id="{8f9bfa97-e392-4cb7-9ce6-53fc7fd6a0c9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := _CurrentValue;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>