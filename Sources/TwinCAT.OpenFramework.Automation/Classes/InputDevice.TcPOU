<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="InputDevice" Id="{efa8b231-2751-492d-8626-738af2170475}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK ABSTRACT InputDevice
VAR_GENERIC CONSTANT
    _SubDeviceCount : INT(0..1000) := 0;
END_VAR
EXTENDS Device<_SubDeviceCount> IMPLEMENTS IInputDevice]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods to override" Id="{57e5027c-d025-4d1f-bcea-3cc2ecc52027}" />
    <Method Name="OnUpdateStateFromInputs" Id="{50b4b51b-e53a-4a31-adad-2a22b1128511}" FolderPath="Methods to override\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnUpdateStateFromInputs
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateStateFromInputs" Id="{c8983ed6-ea33-4eb7-a3f3-5a36dc5ceb9e}">
      <Declaration><![CDATA[METHOD FINAL UpdateStateFromInputs
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
	aggregateException : Core.AggregateException;
END_VAR
VAR
	i : INT;
	
	inputSubDevice : IInputDevice;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(SubDevices) AND_THEN _SubDeviceCount > 0 THEN
	FOR i := 0 TO _SubDeviceCount - 1 DO
		IF NOT __QUERYINTERFACE(SubDevices[i], inputSubDevice) THEN
			CONTINUE;
		END_IF
		
		__TRY
			inputSubDevice.UpdateStateFromInputs(executionContext, aggregateException);
		__CATCH(exceptionCode)
			exception := ExceptionManager.GetLastException(exceptionCode);
						
			IF NOT exception.Fatal THEN
				aggregateException.AddInnerException(exception);
			ELSE
				ExceptionManager.ReThrowLastException(exceptionCode);
			END_IF		
		__ENDTRY 
	END_FOR	
END_IF

__TRY
	OnUpdateStateFromInputs(executionContext);
__CATCH(exceptionCode)
	exception := ExceptionManager.GetLastException(exceptionCode);
				
	IF NOT exception.Fatal THEN
		aggregateException.AddInnerException(exception);
	ELSE
		ExceptionManager.ReThrowLastException(exceptionCode);
	END_IF		
__ENDTRY]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>