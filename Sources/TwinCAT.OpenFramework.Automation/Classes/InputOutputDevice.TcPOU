<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="InputOutputDevice" Id="{d3cfaf06-a014-47b7-8cf6-98a0cc083f94}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

FUNCTION_BLOCK ABSTRACT InputOutputDevice
VAR_GENERIC CONSTANT
    _SubDeviceCount : INT(0..1000) := 0;
END_VAR
EXTENDS Device<_SubDeviceCount> IMPLEMENTS IInputDevice, IOutputDevice]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods to override" Id="{c65c0bbf-e1ef-43ca-a18f-3c425c65c3bc}" />
    <Method Name="OnUpdateOutputsFromState" Id="{4c787d5e-9ebd-4e1d-9d29-6abac1473421}" FolderPath="Methods to override\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnUpdateOutputsFromState
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnUpdateStateFromInputs" Id="{12789fdb-7206-4b6d-9ba4-e340395c2892}" FolderPath="Methods to override\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnUpdateStateFromInputs
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateOutputsFromState" Id="{41595c71-5414-4593-a797-cb95863046c3}">
      <Declaration><![CDATA[METHOD FINAL UpdateOutputsFromState
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
	aggregateException : Core.AggregateException;
END_VAR
VAR
	i : INT;
	
	outputSubDevice : IOutputDevice;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	OnUpdateOutputsFromState(executionContext);
__CATCH(exceptionCode)
	exception := ExceptionManager.GetLastException(exceptionCode);
				
	IF NOT exception.Fatal THEN
		aggregateException.AddInnerException(exception);
	ELSE
		ExceptionManager.ReThrowLastException();
	END_IF		
__ENDTRY

IF __ISVALIDREF(SubDevices) AND_THEN _SubDeviceCount > 0 THEN
	FOR i := 0 TO _SubDeviceCount - 1 DO
		IF NOT __QUERYINTERFACE(SubDevices[i], outputSubDevice) THEN
			CONTINUE;
		END_IF
		
		__TRY
			outputSubDevice.UpdateOutputsFromState(executionContext, aggregateException);
		__CATCH(exceptionCode)
			exception := ExceptionManager.GetLastException(exceptionCode);
						
			IF NOT exception.Fatal THEN
				aggregateException.AddInnerException(exception);
			ELSE
				ExceptionManager.ReThrowLastException();
			END_IF		
		__ENDTRY 
	END_FOR	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateStateFromInputs" Id="{253f2967-16b7-4926-8948-e00e6a6f87fb}">
      <Declaration><![CDATA[METHOD FINAL UpdateStateFromInputs
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
	aggregateException : Core.AggregateException;
END_VAR
VAR
	i : INT;
	
	inputSubDevice : IInputDevice;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(SubDevices) AND_THEN _SubDeviceCount > 0 THEN
	FOR i := 0 TO _SubDeviceCount - 1 DO
		IF NOT __QUERYINTERFACE(SubDevices[i], inputSubDevice) THEN
			CONTINUE;
		END_IF
		
		__TRY
			inputSubDevice.UpdateStateFromInputs(executionContext, aggregateException);
		__CATCH(exceptionCode)
			exception := ExceptionManager.GetLastException(exceptionCode);
						
			IF NOT exception.Fatal THEN
				aggregateException.AddInnerException(exception);
			ELSE
				ExceptionManager.ReThrowLastException();
			END_IF		
		__ENDTRY 
	END_FOR	
END_IF

__TRY
	OnUpdateStateFromInputs(executionContext);
__CATCH(exceptionCode)
	exception := ExceptionManager.GetLastException(exceptionCode);
				
	IF NOT exception.Fatal THEN
		aggregateException.AddInnerException(exception);
	ELSE
		ExceptionManager.ReThrowLastException();
	END_IF		
__ENDTRY]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>