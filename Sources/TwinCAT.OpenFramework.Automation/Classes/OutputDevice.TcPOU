<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="OutputDevice" Id="{105b6dfa-d76f-4477-807a-cf1396dca32a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT OutputDevice
VAR_GENERIC CONSTANT
    _SubDeviceCount : INT(0..1000) := 0;
END_VAR
EXTENDS Device<_SubDeviceCount> IMPLEMENTS IOutputDevice]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods to override" Id="{79900fc6-701a-41aa-8938-d0017f4e6cae}" />
    <Method Name="OnUpdateOutputsFromState" Id="{836154ee-dcb9-4012-94b0-addbb879e72d}" FolderPath="Methods to override\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnUpdateOutputsFromState
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateOutputsFromState" Id="{e860c3bd-fe5d-4af5-8b65-0b4dfced7747}">
      <Declaration><![CDATA[METHOD FINAL UpdateOutputsFromState
VAR_IN_OUT CONSTANT
	executionContext : AUTOMATION_EXECUTION_CONTEXT;
	aggregateException : Core.AggregateException;
END_VAR
VAR
	i : INT;
	
	outputSubDevice : IOutputDevice;
	
	exceptionCode : __SYSTEM.ExceptionCode;
	exception : IException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	OnUpdateOutputsFromState(executionContext);
__CATCH(exceptionCode)
	exception := ExceptionManager.GetLastException(exceptionCode);
				
	IF NOT exception.Fatal THEN
		aggregateException.AddInnerException(exception);
	ELSE
		ExceptionManager.ReThrowLastException(exceptionCode);
	END_IF		
__ENDTRY

IF __ISVALIDREF(SubDevices) AND_THEN _SubDeviceCount > 0 THEN
	FOR i := 0 TO _SubDeviceCount - 1 DO
		IF NOT __QUERYINTERFACE(SubDevices[i], outputSubDevice) THEN
			CONTINUE;
		END_IF
		
		__TRY
			outputSubDevice.UpdateOutputsFromState(executionContext, aggregateException);
		__CATCH(exceptionCode)
			exception := ExceptionManager.GetLastException(exceptionCode);
						
			IF NOT exception.Fatal THEN
				aggregateException.AddInnerException(exception);
			ELSE
				ExceptionManager.ReThrowLastException(exceptionCode);
			END_IF		
		__ENDTRY 
	END_FOR	
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>