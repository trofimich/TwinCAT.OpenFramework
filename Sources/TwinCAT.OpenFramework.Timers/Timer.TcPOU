<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Timer" Id="{7e7a71d0-f67a-4b00-8023-39a9671a3be5}" SpecialFunc="None">
    <Declaration><![CDATA[(*

.. <legal notes>

legal notes
=================
| SPDX-FileCopyrightText: © 2025 Oleksandr Tiutyk <trofimich@gmail.com>
| SPDX-License-Identifier: LGPL-3.0-only
| For details check: LGPL-3.0-only_

.. _LGPL-3.0-only: https://www.gnu.org/licenses/lgpl-3.0.en.html

.. </legal notes>

*)

{attribute 'no_explicit_call' := 'do not call this function block directly'} 
// The wrapper around Tc2_Standard.TON
FUNCTION_BLOCK Timer EXTENDS Core.AbortableTask IMPLEMENTS ITimer
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}
	_Timer : Tc2_Standard.TON;
	
	{attribute 'OPC.UA.DA' := '0'}
	_PrevTimerQ : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Overriden" Id="{e8e109c1-c323-41d3-976d-ad132843052d}" />
    <Property Name="ClassName" Id="{0828dabd-7de7-477c-986f-c786e04b967d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{3f63a584-2023-4c98-a2f5-3b49c3985277}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ElapsedTime" Id="{cd5b8d23-e037-4bad-b1e3-c6dd7fb5fe54}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY ElapsedTime : TIME]]></Declaration>
      <Get Name="Get" Id="{03323e00-9d0d-430e-a045-4085f6cb1f30}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ElapsedTime := _Timer.ET;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Interval" Id="{14e1338e-e20d-460b-b041-25f6a05cc695}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY Interval : TIME]]></Declaration>
      <Get Name="Get" Id="{5bd88fb1-8256-4e13-9e51-2bea89b182b8}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Interval := _Timer.PT;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{42068178-9189-4fec-b08c-457db6a1ded3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Timer.PT := Interval;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Name" Id="{cc010169-a87d-4c1c-85f9-23ce88d8f373}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY Name : WSTRING
]]></Declaration>
      <Get Name="Get" Id="{1738f523-8ca9-4b53-b86b-eca5f6cc908d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := TO_WSTRING(ClassName);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAborting" Id="{d716c16c-e228-44df-b54b-6124ed1ce602}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnAborting 
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF start THEN
	_Timer(IN := FALSE);
END_IF

done := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRunning" Id="{7ef78b76-773d-489d-bd9b-3058c24424bd}" FolderPath="Overriden\">
      <Declaration><![CDATA[METHOD PROTECTED OnRunning 
VAR_INPUT
	start : BOOL;
END_VAR
VAR_OUTPUT
	done : BOOL;
END_VAR
VAR
	intervalNotSpecifiedException : Core.StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_PrevTimerQ := _Timer.Q;

IF start THEN	
	_Timer(IN := FALSE);
END_IF

IF _Timer.PT > T#0S THEN
	_Timer(IN := TRUE);
	
	done := _timer.Q;
ELSE	
	done := TRUE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetIntervalAndStart" Id="{f4b50be1-59c2-498b-b0b6-e742f30e0dc5}">
      <Declaration><![CDATA[// Restart timer if already started
METHOD SetIntervalAndStart
VAR_INPUT
	interval : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Timer.PT := interval;

Start();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{48430939-6703-4604-a8f2-f77a92c70c4f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Size : ULINT]]></Declaration>
      <Get Name="Get" Id="{c14e43b5-b54a-44d1-8ef3-bf1ede3346c2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := XSIZEOF(THIS^);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Triggered" Id="{a5955db5-1801-4da6-8fb4-f5bd42f9b8a4}">
      <Declaration><![CDATA[// True if timer just elapsed
PROPERTY Triggered : BOOL]]></Declaration>
      <Get Name="Get" Id="{e857186c-ea2b-4d5e-92c9-ec18619c4145}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Triggered := NOT _PrevTimerQ AND_THEN _Timer.Q;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>